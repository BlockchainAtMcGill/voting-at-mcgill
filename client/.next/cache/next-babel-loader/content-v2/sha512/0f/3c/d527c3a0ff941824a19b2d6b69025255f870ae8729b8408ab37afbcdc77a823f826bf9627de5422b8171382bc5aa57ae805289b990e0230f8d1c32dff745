{"ast":null,"code":"import Web3 from \"web3\";\n\nconst getWeb3 = async () => {\n  const web3 = new Web3(window.ethereum);\n  await window.eth_requestAccounts;\n  return web3;\n}; // new Promise((resolve, reject) => {\n// Wait for loading completion to avoid race conditions with web3 injection timing.\n// window.addEventListener(\"load\", async () => {\n//   // Modern dapp browsers...\n//   if (window.ethereum) {\n//     const web3 = new Web3(window.ethereum);\n//     try {\n//       // Request account access if needed\n//       await window.eth_requestAccounts;\n//       // Acccounts now exposed\n//       resolve(web3);\n//     } catch (error) {\n//       reject(error);\n//     }\n//   }\n//   // Legacy dapp browsers...\n//   else if (window.web3) {\n//     // Use Mist/MetaMask's provider.\n//     const web3 = window.web3;\n//     console.log(\"Injected web3 detected.\");\n//     resolve(web3);\n//   }\n//   // Fallback to localhost; use dev console port by default...\n//   else {\n//     const provider = new Web3.providers.HttpProvider(\n//       \"http://127.0.0.1:8545\"\n//     );\n//     const web3 = new Web3(provider);\n//     console.log(\"No web3 instance injected, using Local web3.\");\n//     resolve(web3);\n//   }\n// });\n// });\n\n\nexport default getWeb3;","map":{"version":3,"sources":["C:/Users/foubroker/PROJECT_VOTE/voting-at-mcgill/client/src/getWeb3.js"],"names":["Web3","getWeb3","web3","window","ethereum","eth_requestAccounts"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,OAAO,GAAG,YAAU;AACxB,QAAMC,IAAI,GAAG,IAAIF,IAAJ,CAASG,MAAM,CAACC,QAAhB,CAAb;AACA,QAAMD,MAAM,CAACE,mBAAb;AACA,SAAQH,IAAR;AAED,CALD,C,CAME;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;;;AAEF,eAAeD,OAAf","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = async() =>{\r\n  const web3 = new Web3(window.ethereum);\r\n  await window.eth_requestAccounts;\r\n  return (web3);\r\n\r\n}\r\n  // new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    // window.addEventListener(\"load\", async () => {\r\n    //   // Modern dapp browsers...\r\n    //   if (window.ethereum) {\r\n    //     const web3 = new Web3(window.ethereum);\r\n    //     try {\r\n    //       // Request account access if needed\r\n    //       await window.eth_requestAccounts;\r\n    //       // Acccounts now exposed\r\n    //       resolve(web3);\r\n    //     } catch (error) {\r\n    //       reject(error);\r\n    //     }\r\n    //   }\r\n    //   // Legacy dapp browsers...\r\n    //   else if (window.web3) {\r\n    //     // Use Mist/MetaMask's provider.\r\n    //     const web3 = window.web3;\r\n    //     console.log(\"Injected web3 detected.\");\r\n    //     resolve(web3);\r\n    //   }\r\n    //   // Fallback to localhost; use dev console port by default...\r\n    //   else {\r\n    //     const provider = new Web3.providers.HttpProvider(\r\n    //       \"http://127.0.0.1:8545\"\r\n    //     );\r\n    //     const web3 = new Web3(provider);\r\n    //     console.log(\"No web3 instance injected, using Local web3.\");\r\n    //     resolve(web3);\r\n    //   }\r\n    // });\r\n  // });\r\n\r\nexport default getWeb3;\r\n"]},"metadata":{},"sourceType":"module"}