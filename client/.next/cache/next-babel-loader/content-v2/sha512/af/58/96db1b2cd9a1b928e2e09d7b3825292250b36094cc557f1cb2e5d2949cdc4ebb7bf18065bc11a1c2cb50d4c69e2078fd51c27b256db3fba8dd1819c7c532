{"ast":null,"code":"var _jsxFileName = \"/home/wen_wong/voting-at-mcgill/client/src/pages/joinGroup.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes';\nimport 'semantic-ui-css/semantic.min.css';\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width: '80%'\n  }\n});\n\nconst JoinGroup = () => {\n  var web3Instance;\n  var factoryContract;\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: contract,\n    1: setContract\n  } = useState('');\n  const {\n    0: groupList,\n    1: setGroups\n  } = useState([]);\n  const {\n    0: members,\n    1: getMembers\n  } = useState([]);\n  const {\n    0: renderedGroups,\n    1: renderGroups\n  } = useState([]); // Initialize Web3\n\n  useEffect(() => {\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, []); // Initialize VoteFactory Contract\n\n  useEffect(() => {\n    async function setupVoteFactory() {\n      if (web3 == '') {\n        console.log('unable to get factory');\n        return;\n      }\n\n      try {\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        factoryContract = instance;\n        setContract(instance);\n      } catch (error) {\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setupVoteFactory();\n  }, [web3]); // Display all Groups\n\n  useEffect(() => {\n    var displayGroups = async () => {\n      if (contract == '') {\n        return;\n      } //const response = await contract.methods.getExistingGroups().call();\n      //setGroups(response);\n\n    };\n\n    displayGroups();\n  }, [contract]); // Display the information of a Group\n\n  useEffect(() => {\n    var displayInfo = async groupID => {\n      if (groupList == '') {\n        return;\n      }\n\n      try {\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, groupID);\n        return await instance.methods.getGroup(groupID).call();\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    var renderGs = async () => {\n      if (groupList == '') {\n        return;\n      }\n\n      await groupList.forEach(groupID => {\n        displayInfo(groupID).then(newGroup => {\n          renderGroups([...renderedGroups, newGroup]);\n        });\n      });\n    };\n\n    renderGs();\n  }, [groupList]);\n  useEffect(() => {\n    if (renderedGroups != []) {\n      console.log(renderedGroups);\n    }\n  }, [renderedGroups]);\n  return __jsx(React.Fragment, null); //return <a>Hello World</a>;\n\n  return groupList ? groupList.map(group => //<Link className=\"ui button\" route ={`/elections/vote/${vote}`} key={index}>\n  __jsx(\"div\", {\n    className: \"ui link card\",\n    style: {\n      width: \"80%\",\n      color: '#f00000'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, \"Group\"), __jsx(\"div\", {\n    className: \"meta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, group.groupName)), __jsx(\"div\", {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, group.description)), __jsx(\"div\", {\n    className: \"extra content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, __jsx(\"i\", {\n    className: \"user icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }), group.getMembers.size()))))) : __jsx(React.Fragment, null);\n};\n\nexport default JoinGroup;","map":{"version":3,"sources":["/home/wen_wong/voting-at-mcgill/client/src/pages/joinGroup.js"],"names":["React","useState","useEffect","makeStyles","VoteFactoryContract","VoteContract","getWeb3","Header","Link","require","useStyles","card","width","JoinGroup","web3Instance","factoryContract","web3","setWeb3","contract","setContract","groupList","setGroups","members","getMembers","renderedGroups","renderGroups","initWeb3","setupVoteFactory","console","log","networkId","eth","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","displayGroups","displayInfo","groupID","methods","getGroup","call","renderGs","forEach","then","newGroup","map","group","color","groupName","description","size"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,mBAAP,MAAgC,+BAAhC;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,OAAO,kCAAP;;AAEAC,OAAO,CAAC,6BAAD,CAAP;;AAEA,MAAMC,SAAS,GAAGP,UAAU,CAAC;AAC3BQ,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAC;AADF;AADqB,CAAD,CAA5B;;AAMA,MAAMC,SAAS,GAAG,MAAM;AACpB,MAAIC,YAAJ;AACA,MAAIC,eAAJ;AAEA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBhB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAA,OAACiB,QAAD;AAAA,OAAWC;AAAX,MAA0BlB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACmB,SAAD;AAAA,OAAYC;AAAZ,MAAyBpB,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM;AAAA,OAACqB,OAAD;AAAA,OAAUC;AAAV,MAAwBtB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAA,OAACuB,cAAD;AAAA,OAAiBC;AAAjB,MAAiCxB,QAAQ,CAAC,EAAD,CAA/C,CARoB,CAUpB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,mBAAewB,QAAf,GAA0B;AACtBZ,MAAAA,YAAY,GAAG,MAAMR,OAAO,EAA5B;AACAW,MAAAA,OAAO,CAACH,YAAD,CAAP;AACH;;AACDY,IAAAA,QAAQ;AACX,GAPQ,EAON,EAPM,CAAT,CAXoB,CAoBpB;;AACAxB,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeyB,gBAAf,GAAkC;AAC9B,UAAIX,IAAI,IAAI,EAAZ,EAAgB;AACZY,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA;AACH;;AAED,UAAI;AACA,cAAMC,SAAS,GAAG,MAAMd,IAAI,CAACe,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAxB;AACA,cAAMC,eAAe,GAAG9B,mBAAmB,CAAC+B,QAApB,CAA6BL,SAA7B,CAAxB;AACA,cAAMM,QAAQ,GAAG,IAAIpB,IAAI,CAACe,GAAL,CAASM,QAAb,CACbjC,mBAAmB,CAACkC,GADP,EAEbJ,eAAe,IAAIA,eAAe,CAACK,OAFtB,CAAjB;AAIAxB,QAAAA,eAAe,GAAGqB,QAAlB;AACAjB,QAAAA,WAAW,CAACiB,QAAD,CAAX;AACH,OATD,CASE,OAAOI,KAAP,EAAc;AACZC,QAAAA,KAAK,CAAE,wEAAF,CAAL;AACAb,QAAAA,OAAO,CAACY,KAAR,CAAcA,KAAd;AACH;AACJ;;AAEDb,IAAAA,gBAAgB;AACnB,GAvBQ,EAuBN,CAACX,IAAD,CAvBM,CAAT,CArBoB,CA8CpB;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIwC,aAAa,GAAG,YAAY;AAC5B,UAAIxB,QAAQ,IAAI,EAAhB,EAAoB;AAChB;AACH,OAH2B,CAI5B;AACA;;AACH,KAND;;AAQAwB,IAAAA,aAAa;AAChB,GAVQ,EAUN,CAACxB,QAAD,CAVM,CAAT,CA/CoB,CA2DpB;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIyC,WAAW,GAAG,MAAOC,OAAP,IAAmB;AACjC,UAAIxB,SAAS,IAAI,EAAjB,EAAqB;AACjB;AACH;;AAED,UAAI;AACA,cAAMgB,QAAQ,GAAG,IAAIpB,IAAI,CAACe,GAAL,CAASM,QAAb,CACbjC,mBAAmB,CAACkC,GADP,EAEbM,OAFa,CAAjB;AAKA,eAAQ,MAAMR,QAAQ,CAACS,OAAT,CAAiBC,QAAjB,CAA0BF,OAA1B,EAAmCG,IAAnC,EAAd;AACH,OAPD,CAOE,OAAOP,KAAP,EAAc;AACZZ,QAAAA,OAAO,CAACY,KAAR,CAAcA,KAAd;AACH;AACJ,KAfD;;AAiBA,QAAIQ,QAAQ,GAAG,YAAY;AACvB,UAAI5B,SAAS,IAAI,EAAjB,EAAqB;AACjB;AACH;;AAED,YAAMA,SAAS,CAAC6B,OAAV,CAAkBL,OAAO,IAAI;AAC/BD,QAAAA,WAAW,CAACC,OAAD,CAAX,CAAqBM,IAArB,CAA0BC,QAAQ,IAAI;AAClC1B,UAAAA,YAAY,CAAC,CAAC,GAAGD,cAAJ,EAAoB2B,QAApB,CAAD,CAAZ;AACH,SAFD;AAGH,OAJK,CAAN;AAKH,KAVD;;AAWAH,IAAAA,QAAQ;AACX,GA9BQ,EA8BN,CAAC5B,SAAD,CA9BM,CAAT;AAgCAlB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIsB,cAAc,IAAI,EAAtB,EAA0B;AACtBI,MAAAA,OAAO,CAACC,GAAR,CAAYL,cAAZ;AACH;AACJ,GAJQ,EAIN,CAACA,cAAD,CAJM,CAAT;AAMA,SAAO,2BAAP,CAlGoB,CAoGpB;;AACA,SAAOJ,SAAS,GAAGA,SAAS,CAACgC,GAAV,CAAeC,KAAD,IAC7B;AACA;AAAK,IAAA,SAAS,EAAC,cAAf;AAA8B,IAAA,KAAK,EAAE;AAACzC,MAAAA,KAAK,EAAC,KAAP;AAAc0C,MAAAA,KAAK,EAAE;AAArB,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAEI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,KAAK,CAACE,SAAV,CADJ,CAFJ,EAKI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,KAAK,CAACG,WADX,CALJ,CADA,EAUI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKH,KAAK,CAAC9B,UAAN,CAAiBkC,IAAjB,EAFL,CADJ,CAVJ,CADA,CAFe,CAAH,GAqBd,2BArBF;AAsBH,CA3HD;;AA6HA,eAAe5C,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes'\nimport 'semantic-ui-css/semantic.min.css';\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width:'80%'\n  }\n});\n\nconst JoinGroup = () => {\n    var web3Instance;\n    var factoryContract;\n\n    const [web3, setWeb3] = useState('');\n    const [contract, setContract] = useState('');\n    const [groupList, setGroups] = useState([]);\n    const [members, getMembers] = useState([]);\n    const [renderedGroups, renderGroups] = useState([]);\n\n    // Initialize Web3\n    useEffect(() => {\n\n        async function initWeb3() {\n            web3Instance = await getWeb3();\n            setWeb3(web3Instance);\n        }\n        initWeb3();\n    }, []);\n\n    // Initialize VoteFactory Contract\n    useEffect(() => {\n        async function setupVoteFactory() {\n            if (web3 == '') {\n                console.log('unable to get factory');\n                return;\n            }\n\n            try {\n                const networkId = await web3.eth.net.getId();\n                const deployedNetwork = VoteFactoryContract.networks[networkId];\n                const instance = new web3.eth.Contract(\n                    VoteFactoryContract.abi,\n                    deployedNetwork && deployedNetwork.address\n                );\n                factoryContract = instance;\n                setContract(instance);\n            } catch (error) {\n                alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n                console.error(error);\n            }\n        }\n\n        setupVoteFactory();\n    }, [web3]);\n\n    // Display all Groups\n    useEffect(() => {\n        var displayGroups = async () => {\n            if (contract == '') {\n                return;\n            }\n            //const response = await contract.methods.getExistingGroups().call();\n            //setGroups(response);\n        };\n\n        displayGroups();\n    }, [contract]);\n\n    // Display the information of a Group\n    useEffect(() => {\n        var displayInfo = async (groupID) => {\n            if (groupList == '') {\n                return;\n            }\n\n            try {\n                const instance = new web3.eth.Contract(\n                    VoteFactoryContract.abi, \n                    groupID\n                );\n\n                return (await instance.methods.getGroup(groupID).call());\n            } catch (error) {\n                console.error(error);\n            }\n        };\n\n        var renderGs = async () => {\n            if (groupList == '') {\n                return;\n            }\n\n            await groupList.forEach(groupID => {\n                displayInfo(groupID).then(newGroup => {\n                    renderGroups([...renderedGroups, newGroup]);\n                });\n            });\n        }\n        renderGs();\n    }, [groupList]);\n\n    useEffect(() => {\n        if (renderedGroups != []) {\n            console.log(renderedGroups);\n        }\n    }, [renderedGroups]);\n\n    return <></>;\n\n    //return <a>Hello World</a>;\n    return groupList ? groupList.map((group) => \n        //<Link className=\"ui button\" route ={`/elections/vote/${vote}`} key={index}>\n        <div className=\"ui link card\" style={{width:\"80%\", color: '#f00000'}}>\n        <div className=\"card\">\n        <div className=\"content\">\n            <div className=\"header\">Group</div>\n            <div className=\"meta\">\n                <a>{group.groupName}</a>\n            </div>\n            <div className=\"description\">\n                {group.description}\n            </div>\n        </div>\n            <div className=\"extra content\">\n                <span>\n                    <i className=\"user icon\"></i>\n                    {group.getMembers.size()}\n                </span>\n            </div>\n        </div>\n        </div>\n  ) : <></>\n};\n\nexport default JoinGroup;"]},"metadata":{},"sourceType":"module"}