{"ast":null,"code":"var _jsxFileName = \"/home/wen_wong/voting-at-mcgill/client/src/pages/elections/vote/vote.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Header } from '../../../components/header';\nimport getWeb3 from \"../../../getWeb3\";\nimport VoteContract from \"../../../contracts/Vote.json\";\nimport 'semantic-ui-css/semantic.min.css';\nimport { Link } from '../../../../routes';\nimport { Modal, Dimmer, Loader, Image, Segment } from 'semantic-ui-react';\n\nconst Vote = () => {\n  var web3Instance;\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: voteAddress,\n    1: setVoteAddress\n  } = useState('');\n  const {\n    0: currentVote,\n    1: setCurrentVote\n  } = useState('');\n  const {\n    0: voteInstance,\n    1: setVoteInstance\n  } = useState('');\n  const {\n    0: candidates,\n    1: setCandidates\n  } = useState('');\n  const {\n    0: currentUser,\n    1: setCurrentUser\n  } = useState('');\n  const {\n    0: voting,\n    1: setVoting\n  } = useState(false);\n  const {\n    0: hasVoted,\n    1: setHasVoted\n  } = useState(false);\n  const {\n    0: load,\n    1: setLoad\n  } = useState(true);\n  useEffect(() => {\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    var getElectionAddress = async () => {\n      const url = window.location.href;\n      const pos = url.indexOf('vote') + 5;\n      setVoteAddress(url.slice(pos));\n      console.log(voteAddress);\n    };\n\n    initWeb3();\n    getElectionAddress();\n  }, [load]);\n  useEffect(() => {\n    async function setupVote() {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        // Get the contract instance.\n        const instance = await new web3.eth.Contract(VoteContract.abi, voteAddress);\n        setVoteInstance(instance);\n        setCurrentVote(await instance.methods.currentElection().call());\n        var current;\n        [current] = await web3.eth.getAccounts();\n        setCurrentUser(current);\n        setHasVoted(await instance.methods.getElectionVoter(current).call());\n        const candidatesCount = await instance.methods.candidatesCount().call();\n        var array = [];\n\n        for (var i = 0; i < candidatesCount; i++) {\n          array.push(await instance.methods.candidateArray(i).call());\n        }\n\n        setCandidates(array); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setupVote();\n  }, [web3]);\n  const long = {\n    width: '90%',\n    texAlign: 'center',\n    margin: 'auto',\n    color: '#f00000'\n  };\n\n  function VoteModal(name, address) {\n    var voteFor = async () => {\n      if (voteInstance) {\n        setVoting(true);\n        await voteInstance.methods.voteFor(address).send({\n          from: currentUser\n        });\n        setVoting(false);\n        setLoad(!load);\n      }\n    };\n\n    if (!hasVoted) {\n      return __jsx(Modal, {\n        trigger: __jsx(\"button\", {\n          className: \"ui right floated inverted red button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 30\n          }\n        }, \"Vote\"),\n        header: \"Vote!\",\n        content: \"are you sure you want to vote for \" + name + \" ?\",\n        actions: [__jsx(\"button\", {\n          key: 1,\n          className: \"ui inverted green button\",\n          onClick: voteFor,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 21\n          }\n        }, \"yes\"), __jsx(\"button\", {\n          key: 2,\n          className: \"ui inverted red button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 21\n          }\n        }, \"no\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      });\n    } else return __jsx(React.Fragment, null);\n  }\n\n  function leaveElection() {\n    var startDate = new Date(currentVote.startDate * 1);\n    var currDate = new Date();\n\n    var leavethis = async () => {\n      if (voteInstance) {\n        setVoting(true);\n        await voteInstance.methods.leaveElection(0).send({\n          from: currentUser\n        });\n        setVoting(false);\n        setLoad(!load);\n      }\n    };\n\n    if (currDate < startDate) {\n      return __jsx(Modal, {\n        trigger: __jsx(\"button\", {\n          className: \"ui right floated inverted red button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 28\n          }\n        }, \"Leave Election\"),\n        header: \"Leave Election\",\n        content: \"are you sure you want to no longer be a candidate\",\n        actions: [__jsx(\"button\", {\n          key: 1,\n          className: \"ui inverted green button\",\n          onClick: leavethis,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 19\n          }\n        }, \"yes\"), __jsx(\"button\", {\n          key: 2,\n          className: \"ui inverted red button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 19\n          }\n        }, \"no\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }\n      });\n    }\n  }\n\n  function applyELection() {\n    var startDate = new Date(currentVote.startDate * 1);\n    var currDate = new Date();\n\n    if (currDate < startDate) {\n      return __jsx(Link, {\n        route: `/elections/apply/${voteAddress}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }\n      }, __jsx(\"button\", {\n        className: \"extra content ui inverted red button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 19\n        }\n      }, __jsx(\"i\", {\n        className: \"plus icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 24\n        }\n      }), \" Apply as Candidate\")));\n    }\n  }\n\n  function displayCandidates() {\n    if (candidates == \"\") {\n      return __jsx(\"div\", {\n        className: \"card\",\n        style: long,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 20\n        }\n      }, __jsx(\"div\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }\n      }, __jsx(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 29\n        }\n      }, \"no candidates yet\")));\n    }\n\n    return candidates.map((candidate, index) => __jsx(\"div\", {\n      className: \"card\",\n      style: long,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"content ui container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"header clearing segment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }\n    }, candidate.name, \" \", VoteModal(candidate.name, candidate.candidateAddr)), __jsx(\"div\", {\n      className: \"header clearing segment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }, leaveElection()), __jsx(\"div\", {\n      className: \"meta\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }\n    }, candidate.candidateAddr), __jsx(\"div\", {\n      className: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }, candidate.description))));\n  }\n\n  var voted;\n\n  if (hasVoted) {\n    voted = __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }\n    }, __jsx(\"i\", {\n      className: \"floated check icon right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 23\n      }\n    }), \" You have already Voted\");\n  } else {\n    voted = __jsx(React.Fragment, null);\n  }\n\n  function formatVote() {\n    if (currentVote) {\n      var startDate = new Date(currentVote.startDate * 1);\n      var endDate = new Date(currentVote.endDate * 1);\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"ui card\",\n        style: long,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }\n      }, __jsx(\"div\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }\n      }, __jsx(\"div\", {\n        className: \"header container\",\n        style: {\n          color: '#f00000'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }\n      }, currentVote.title, __jsx(\"span\", {\n        className: \"floated right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 29\n        }\n      }, voted)), __jsx(\"div\", {\n        className: \"meta\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 25\n        }\n      }, startDate.toUTCString().slice(0, 17), \" to \", endDate.toUTCString().slice(0, 17)), __jsx(\"div\", {\n        className: \"ui card\",\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 25\n        }\n      }, __jsx(\"div\", {\n        className: \"description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 29\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 29\n        }\n      }, currentVote.description)))), __jsx(\"div\", {\n        style: {\n          textAlign: 'center',\n          margin: '50px',\n          color: '#f00000'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }\n      }, __jsx(\"div\", {\n        className: \"ui cards\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }\n      }, displayCandidates()), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }\n      }), __jsx(Loader, {\n        active: voting,\n        inline: \"centered\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }\n      })), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }\n      }), __jsx(\"div\", {\n        className: \"extra content\",\n        style: {\n          color: '#f00000'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }\n      }, __jsx(\"i\", {\n        className: \"check icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 25\n        }\n      }), currentVote.numVotes, \" Votes\"), applyELection()));\n    } else {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 20\n        }\n      }, \" loading vote ...\");\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }\n  }), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }\n  }, formatVote()));\n};\n\nexport default Vote;","map":{"version":3,"sources":["/home/wen_wong/voting-at-mcgill/client/src/pages/elections/vote/vote.js"],"names":["React","useEffect","useState","Header","getWeb3","VoteContract","Link","Modal","Dimmer","Loader","Image","Segment","Vote","web3Instance","web3","setWeb3","voteAddress","setVoteAddress","currentVote","setCurrentVote","voteInstance","setVoteInstance","candidates","setCandidates","currentUser","setCurrentUser","voting","setVoting","hasVoted","setHasVoted","load","setLoad","initWeb3","getElectionAddress","url","window","location","href","pos","indexOf","slice","console","log","setupVote","instance","eth","Contract","abi","methods","currentElection","call","current","getAccounts","getElectionVoter","candidatesCount","array","i","push","candidateArray","error","alert","long","width","texAlign","margin","color","VoteModal","name","address","voteFor","send","from","leaveElection","startDate","Date","currDate","leavethis","applyELection","displayCandidates","map","candidate","index","candidateAddr","description","voted","formatVote","endDate","title","toUTCString","textAlign","numVotes"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { Header } from '../../../components/header'\nimport getWeb3 from \"../../../getWeb3\";\nimport VoteContract from \"../../../contracts/Vote.json\";\nimport 'semantic-ui-css/semantic.min.css';\nimport { Link } from '../../../../routes';\nimport { Modal, Dimmer, Loader, Image, Segment } from 'semantic-ui-react'\nconst Vote = () => {\n    \n    var web3Instance;\n    const [web3, setWeb3] = useState('');\n    const [voteAddress, setVoteAddress] = useState('')\n    const [currentVote, setCurrentVote] = useState('')\n    const [voteInstance, setVoteInstance] = useState('')\n    const [candidates, setCandidates ] = useState('');\n    const [currentUser, setCurrentUser ] = useState('');\n    const [voting, setVoting ] = useState(false)\n    const [hasVoted, setHasVoted] = useState(false)\n    const [load, setLoad] = useState(true)\n\n    useEffect(() => {\n        async function initWeb3() {\n            web3Instance = await getWeb3();\n            setWeb3(web3Instance);\n        }\n        var getElectionAddress = async() =>{\n            const url=window.location.href;\n            const pos=url.indexOf('vote')+5;\n            setVoteAddress(url.slice(pos));\n            console.log(voteAddress);\n          };\n        initWeb3();\n        getElectionAddress();\n    },[load]);\n\n    useEffect(() => {\n        async function setupVote() {\n            if(web3 == '') {\n                return;\n            }\n            try {\n                // Get the contract instance.\n                const instance = await new web3.eth.Contract(\n                    VoteContract.abi,\n                    voteAddress\n                );\n                setVoteInstance(instance);\n                setCurrentVote(await instance.methods.currentElection().call());\n                var current\n                [current] = await web3.eth.getAccounts()\n                setCurrentUser(current)\n                setHasVoted(await instance.methods.getElectionVoter(current).call())\n                const candidatesCount = await instance.methods.candidatesCount().call();\n                var array = []\n                for (var i = 0; i < candidatesCount; i++){\n                    array.push(await instance.methods.candidateArray(i).call())\n                }\n                setCandidates(array);\n                // Set web3, accounts, and contract to the state, and then proceed with an\n            } catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n                `Failed to load web3, accounts, or contract. Check console for details.`,\n            );\n            console.error(error);\n            }\n        }\n        setupVote();\n    },[web3])\n\n    const long = {\n        width: '90%',\n        texAlign:'center',\n        margin: 'auto',\n        color: '#f00000',\n    }\n\n    function VoteModal(name,address) {\n        var voteFor = async () => {\n            if(voteInstance){\n                setVoting(true)\n                await voteInstance.methods.voteFor(address).send({\n                    from: currentUser\n                })\n                setVoting(false)\n                setLoad(!load)\n            }\n        }\n        if(!hasVoted){\n            return (\n                <Modal\n                    trigger={<button className=\"ui right floated inverted red button\">Vote</button>}\n                    header=\"Vote!\"\n                    content={\"are you sure you want to vote for \"+ name+\" ?\"}\n                    actions={[\n                    <button key={1} className=\"ui inverted green button\" onClick={voteFor}>yes</button>,\n                    <button key={2} className=\"ui inverted red button\" >no</button>]}\n                />\n            )\n        }\n        else return (<></>)\n    }\n    function  leaveElection(){\n          var startDate = new Date(currentVote.startDate * 1)\n          var currDate= new Date()\n          var leavethis = async () => {\n              if(voteInstance){\n                setVoting(true)\n                await voteInstance.methods.leaveElection(0).send({\n                    from: currentUser\n                })\n                setVoting(false)\n                setLoad(!load)\n              }\n          }\n          if(currDate<startDate){\n            return (\n              <Modal\n                  trigger={<button className=\"ui right floated inverted red button\">Leave Election</button>}\n                  header=\"Leave Election\"\n                  content={\"are you sure you want to no longer be a candidate\"}\n                  actions={[\n                  <button key={1} className=\"ui inverted green button\"onClick={leavethis}>yes</button>,\n                  <button key={2} className=\"ui inverted red button\" >no</button>]}\n              />\n            )\n          }\n    }\n    function applyELection(){\n      var startDate = new Date(currentVote.startDate * 1)\n      var currDate= new Date()\n      if(currDate<startDate){\n        return(\n          <Link route ={`/elections/apply/${voteAddress}`}>\n              <button className=\"extra content ui inverted red button\" >\n                  <div><i className=\"plus icon\"></i> Apply as Candidate</div>\n              </button>\n          </Link>\n        )\n      }\n    }\n    function displayCandidates() {\n        if (candidates == \"\"){\n            return <div  className=\"card\" style={long}>\n                        <div className=\"content\">\n                            <div className=\"header\">\n                                no candidates yet\n                            </div>\n                        </div>\n                    </div>\n        }\n\n        return candidates.map((candidate,index) =>\n        <div className=\"card\"  style={long} key={index}>\n            <div className=\"content ui container\">\n                <div className=\"header clearing segment\">\n                    {candidate.name} {VoteModal(candidate.name, candidate.candidateAddr)}\n                </div>\n                <div className=\"header clearing segment\">\n                    {leaveElection()}\n                </div>\n                <div className=\"meta\">\n                    {candidate.candidateAddr}\n                </div>\n                <div className=\"description\">\n                    {candidate.description}\n                </div>\n\n            </div>\n        </div>\n\n        )\n    }\n    var voted;\n    if(hasVoted) {\n        voted = <span><i className=\"floated check icon right\"></i> You have already Voted</span>;\n    } else {\n        voted = <></>\n    }\n\n    function formatVote() {\n        if (currentVote){\n            var startDate = new Date(currentVote.startDate * 1)\n            var endDate = new Date(currentVote.endDate * 1)\n            return <>\n                <div className=\"ui card\" style={long}>\n                    <div className=\"content\">\n                        <div className=\"header container\" style= {{color: '#f00000'}}>\n                            {currentVote.title}\n                            <span className=\"floated right\">{voted}</span>\n                        </div>\n                        <div className=\"meta\">{startDate.toUTCString().slice(0,17)} to {endDate.toUTCString().slice(0,17)}</div>\n                        <div className=\"ui card\" style= {{width: '100%'}}>\n                            <div className=\"description\" >\n                            <p>{currentVote.description}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div style={{textAlign:'center', margin:'50px', color: '#f00000'}}>\n                    <div className =\"ui cards\">{displayCandidates()}</div>\n                    <br></br>\n                    <Loader\n                        active={voting}\n                        inline='centered'\n                    />\n                    </div>\n                    <div>\n                </div>\n\n                    <div className=\"extra content\" style= {{color: '#f00000'}}>\n                        <i className=\"check icon\"></i>\n                        {currentVote.numVotes} Votes\n                    </div>\n                    {applyELection()}\n\n                </div>\n            </>\n        }\n        else{\n            return <div> loading vote ...</div>\n        }\n    }\n\n    return (\n        <>\n            <Header/>\n            <br></br>\n            <br></br>\n            <br></br>\n            <h1>{formatVote()}</h1>\n        </>\n    )\n\n}\nexport default Vote;\n"]},"metadata":{},"sourceType":"module"}