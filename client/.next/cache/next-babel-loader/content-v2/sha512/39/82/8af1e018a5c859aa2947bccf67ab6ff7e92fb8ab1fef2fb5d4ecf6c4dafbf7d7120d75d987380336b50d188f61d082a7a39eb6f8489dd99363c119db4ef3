{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\PROJECT_VOTE\\\\voting-at-mcgill\\\\client\\\\src\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid'; // CommonJS\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width: '80%'\n  }\n});\n\nfunction App() {\n  const classes = useStyles();\n  const {\n    0: votesAddresses,\n    1: setVotesAddresses\n  } = useState('');\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: accounts,\n    1: setAccounts\n  } = useState('');\n  const {\n    0: contract,\n    1: setContract\n  } = useState('');\n  const {\n    0: voteContract,\n    1: setVoteContract\n  } = useState('');\n  useEffect(() => {\n    // get web3\n    async function initWeb3() {\n      const web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, []);\n  useEffect(() => {\n    // get Factory contract\n    async function setup() {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        setAccounts(await web3.eth.getAccounts()); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        setAccounts(await web3.eth.getAccounts());\n        setContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setup();\n  }, [web3]);\n  useEffect(() => {\n    //just get Vote contract\n    async function setup() {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        // Get the contract instance.\n        const instance = new web3.eth.Contract(VoteContract.abi, votesAddresses[votesAddresses.length - 1]);\n        setVoteContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setup();\n  }, [contract, votesAddresses]);\n  useEffect(() => {\n    //display available votes\n    var displayVotes = async () => {\n      if (contract == '') {\n        return;\n      }\n\n      const response = await contract.methods.getDeployedVotes().call(); // Update state with the result.\n\n      setVotesAddresses(response);\n    };\n\n    displayVotes();\n  }, [contract]);\n\n  var displayInfo = async address => {\n    if (web3 == '') {\n      return;\n    }\n\n    try {\n      // Get the contract instance.\n      const instance = new web3.eth.Contract(VoteContract.abi, address);\n      console.log('hello'); // console.log(await instance.methods.getDeployedVotes().call());\n      // Set web3, accounts, and contract to the state, and then proceed with an\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n      console.error(error);\n    }\n  };\n\n  function displayVoteList() {\n    if (web3 == \"\") {\n      return \"waiting for votes to display...\";\n    } else if (votesAddresses == \"\") {\n      return \"no votes to display\";\n    }\n\n    return votesAddresses.map(address => __jsx(Card, {\n      key: address,\n      variant: \"outlined\",\n      className: classes.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, \" \", console.log('hello'), __jsx(CardContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }, __jsx(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 15\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 35\n      }\n    }, address)), __jsx(Grid, {\n      item: true,\n      xs: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }, __jsx(Link, {\n      route: `/elections/apply/${address}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 19\n      }\n    }, \"Apply as Candidate\")), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    }, __jsx(Link, {\n      route: `/elections/vote/${address}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 19\n      }\n    }, \"Vote\")))))));\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    handleClick: displayInfo(votesAddresses[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/foubroker/PROJECT_VOTE/voting-at-mcgill/client/src/pages/index.js"],"names":["React","useState","useEffect","makeStyles","VoteFactoryContract","VoteContract","getWeb3","Header","Link","Card","CardContent","Grid","require","useStyles","card","width","App","classes","votesAddresses","setVotesAddresses","web3","setWeb3","accounts","setAccounts","contract","setContract","voteContract","setVoteContract","initWeb3","web3Instance","setup","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","console","length","displayVotes","response","methods","getDeployedVotes","call","displayInfo","log","displayVoteList","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\r\nimport VoteContract from \"../contracts/Vote.json\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport { Header } from '../components/header';\r\nimport { Link } from '../../routes'\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\n// CommonJS\r\nrequire(\"regenerator-runtime/runtime\");\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    width:'80%'\r\n  }\r\n});\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [votesAddresses, setVotesAddresses] = useState('');\r\n  const [web3, setWeb3] = useState('');\r\n  const [accounts, setAccounts] = useState('');\r\n  const [contract, setContract] = useState('');\r\n  const [voteContract, setVoteContract] = useState('');\r\n\r\n  useEffect(() => {// get web3\r\n    async function initWeb3() {\r\n      const web3Instance = await getWeb3()\r\n      setWeb3(web3Instance);\r\n    }\r\n    initWeb3();\r\n  },[]);\r\n\r\n  useEffect(() => {// get Factory contract\r\n    async function setup() {\r\n      if(web3 == '') {\r\n        return;\r\n      }\r\n      try {\r\n        setAccounts(await web3.eth.getAccounts());\r\n        // Get the contract instance.\r\n        const networkId = await web3.eth.net.getId();\r\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n        const instance = new web3.eth.Contract(\r\n          VoteFactoryContract.abi,\r\n          deployedNetwork && deployedNetwork.address,\r\n        );\r\n        setAccounts(await web3.eth.getAccounts());\r\n        setContract(instance);\r\n    \r\n        // Set web3, accounts, and contract to the state, and then proceed with an\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    }\r\n      setup();\r\n  },[web3]);\r\n\r\n  useEffect(() => {//just get Vote contract\r\n    async function setup() {\r\n      if(web3 == '') {\r\n        return;\r\n      }\r\n      try {\r\n        // Get the contract instance.\r\n        const instance = new web3.eth.Contract(\r\n          VoteContract.abi,\r\n          votesAddresses[votesAddresses.length-1],\r\n        );\r\n        setVoteContract(instance);\r\n        // Set web3, accounts, and contract to the state, and then proceed with an\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    }\r\n      setup();\r\n  },[contract,votesAddresses]);\r\n\r\n  useEffect(()=> {//display available votes\r\n    var displayVotes = async () => {\r\n      if(contract == ''){\r\n        return;\r\n      }\r\n      const response = await contract.methods.getDeployedVotes().call();\r\n      // Update state with the result.\r\n      setVotesAddresses(response);\r\n    };\r\n    displayVotes();\r\n  },[contract]);\r\n\r\n  var displayInfo = async (address) => { \r\n    if(web3 == '') {\r\n      return;\r\n    }\r\n    try {\r\n      // Get the contract instance.\r\n      const instance = new web3.eth.Contract(\r\n        VoteContract.abi,\r\n        address\r\n      );\r\n      console.log('hello')\r\n      // console.log(await instance.methods.getDeployedVotes().call());\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  function displayVoteList() {\r\n    if(web3 == \"\"){\r\n      return \"waiting for votes to display...\"\r\n    }\r\n    else if(votesAddresses == \"\"){\r\n      return \"no votes to display\"\r\n    }\r\n    return votesAddresses.map(address => \r\n        <Card key={address} variant=\"outlined\" className ={classes.card}> {console.log('hello')}\r\n          <CardContent >\r\n            <Grid container>\r\n              <Grid item xs ={10}><span>{address}</span></Grid>\r\n              <Grid item xs ={2}>\r\n                <div>            \r\n                  <Link route ={`/elections/apply/${address}`}> \r\n                    Apply as Candidate\r\n                  </Link>\r\n                </div>\r\n                <div>  \r\n                  <Link route ={`/elections/vote/${address}`}> \r\n                    Vote\r\n                  </Link>\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n    )\r\n  }\r\n\r\n  \r\n  return( \r\n    <>\r\n      <Header></Header>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <div className=\"App\">\r\n        <button handleClick={displayInfo(votesAddresses[0])}></button>\r\n        {/* <div>{ displayVoteList() }</div> */}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}