{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from \"web3\";\n\nvar getWeb3 = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n              // Wait for loading completion to avoid race conditions with web3 injection timing.\n              // window.addEventListener(\"load\", async () => {\n              var tryer = /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var web3;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          if (!window.ethereum) {\n                            _context.next = 13;\n                            break;\n                          }\n\n                          console.log('jello!');\n                          web3 = new Web3(window.ethereum);\n                          _context.prev = 3;\n                          _context.next = 6;\n                          return window.eth_requestAccounts;\n\n                        case 6:\n                          // Acccounts now exposed\n                          console.log(web3);\n                          resolve(web3);\n                          _context.next = 13;\n                          break;\n\n                        case 10:\n                          _context.prev = 10;\n                          _context.t0 = _context[\"catch\"](3);\n                          reject(_context.t0);\n\n                        case 13:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[3, 10]]);\n                }));\n\n                return function tryer() {\n                  return _ref2.apply(this, arguments);\n                };\n              }();\n\n              return tryer; //   // Legacy dapp browsers...\n              //   else if (window.web3) {\n              //     // Use Mist/MetaMask's provider.\n              //     const web3 = window.web3;\n              //     console.log(\"Injected web3 detected.\");\n              //     resolve(web3);\n              //   }\n              //   // Fallback to localhost; use dev console port by default...\n              //   else {\n              //     const provider = new Web3.providers.HttpProvider(\n              //       \"http://127.0.0.1:8545\"\n              //     );\n              //     const web3 = new Web3(provider);\n              //     console.log(\"No web3 instance injected, using Local web3.\");\n              //     resolve(web3);\n              //   }\n              // });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getWeb3() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default getWeb3;","map":{"version":3,"sources":["C:/Users/foubroker/PROJECT_VOTE/voting-at-mcgill/client/src/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","tryer","window","ethereum","console","log","web3","eth_requestAccounts"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,IAAMC,OAAO;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA,8CACd,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B;AACA;AACE,kBAAIC,KAAK;AAAA,qFAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAETC,MAAM,CAACC,QAFE;AAAA;AAAA;AAAA;;AAGXC,0BAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACMC,0BAAAA,IAJK,GAIE,IAAIV,IAAJ,CAASM,MAAM,CAACC,QAAhB,CAJF;AAAA;AAAA;AAAA,iCAOHD,MAAM,CAACK,mBAPJ;;AAAA;AAQT;AACAH,0BAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACAP,0BAAAA,OAAO,CAACO,IAAD,CAAP;AAVS;AAAA;;AAAA;AAAA;AAAA;AAYTN,0BAAAA,MAAM,aAAN;;AAZS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAJ;;AAAA,gCAALC,KAAK;AAAA;AAAA;AAAA,iBAAT;;AAgBF,qBAAOA,KAAP,CAnB+B,CAoB/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,aArCD,CADc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPJ,OAAO;AAAA;AAAA;AAAA,GAAb;;AAwCA,eAAeA,OAAf","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = async () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    // window.addEventListener(\"load\", async () => {\r\n      var tryer =  async () =>{\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        console.log('jello!')\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.eth_requestAccounts;\r\n          // Acccounts now exposed\r\n          console.log(web3)\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n    }\r\n    return tryer;\r\n    //   // Legacy dapp browsers...\r\n    //   else if (window.web3) {\r\n    //     // Use Mist/MetaMask's provider.\r\n    //     const web3 = window.web3;\r\n    //     console.log(\"Injected web3 detected.\");\r\n    //     resolve(web3);\r\n    //   }\r\n    //   // Fallback to localhost; use dev console port by default...\r\n    //   else {\r\n    //     const provider = new Web3.providers.HttpProvider(\r\n    //       \"http://127.0.0.1:8545\"\r\n    //     );\r\n    //     const web3 = new Web3(provider);\r\n    //     console.log(\"No web3 instance injected, using Local web3.\");\r\n    //     resolve(web3);\r\n    //   }\r\n    // });\r\n  });\r\n\r\nexport default getWeb3;\r\n"]},"metadata":{},"sourceType":"module"}