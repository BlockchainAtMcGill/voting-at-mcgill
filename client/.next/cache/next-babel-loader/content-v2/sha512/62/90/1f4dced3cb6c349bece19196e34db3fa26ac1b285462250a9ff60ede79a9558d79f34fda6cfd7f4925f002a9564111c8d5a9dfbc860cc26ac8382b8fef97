{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes';\nimport 'semantic-ui-css/semantic.min.css';\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width: '80%'\n  }\n});\n\nconst JoinGroup = () => {\n  var web3Instance;\n  var factoryContract;\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: groupsID,\n    1: setGroupsID\n  } = useState([]);\n  const {\n    0: contract,\n    1: setContract\n  } = useState('');\n  const {\n    0: renderedGroups,\n    1: renderGroups\n  } = useState([]); // Initialize Web3\n\n  useEffect(() => {\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, []); // Initialize VoteFactory Contract\n\n  useEffect(() => {\n    async function setupVoteFactory() {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        factoryContract = instance;\n        setContract(instance);\n      } catch (error) {\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setupVoteFactory();\n  }, [web3]); // Display all Groups\n\n  useEffect(() => {\n    var displayGroups = async () => {\n      if (contract == '') {\n        return;\n      }\n\n      const response = await contract.methods.getDeployedVotes().call();\n      setGroupsID(response);\n    };\n\n    displayGroups();\n  }, [contract]);\n\n  var displayInfo = async ident => {\n    if (groupsID == '') {\n      return;\n    }\n\n    try {\n      const instance = new web3.eth.Contract(VoteFactoryContract.abi, ident);\n      return await instance.methods.currentElection().call();\n    } catch (error) {\n      console.error(error);\n    }\n  }; // Display the information of a Group\n\n\n  useEffect(() => {\n    var renderGs = async () => {\n      if (!groupsID) {\n        return;\n      }\n\n      await groupsID.forEach(ident => {\n        displayInfo(ident).then(newGroup => {\n          renderGroups([...renderedGroups, newGroup]);\n        });\n      });\n    };\n\n    renderGs();\n  }, [groupsID]);\n  useEffect(() => {\n    if (renderedGroups != []) {\n      console.log(renderedGroups);\n    }\n  }, [renderedGroups]);\n  return __jsx(React.Fragment, null);\n  /*\n     //return <a>Hello World</a>;\n     return groupList ? groupList.map((group) => \n         //<Link className=\"ui button\" route ={`/elections/vote/${vote}`} key={index}>\n         <div className=\"ui link card\" style={{width:\"80%\", color: '#f00000'}}>\n         <div className=\"card\">\n         <div className=\"content\">\n             <div className=\"header\">Group</div>\n             <div className=\"meta\">\n                 <a>{group.groupName}</a>\n             </div>\n             <div className=\"description\">\n                 {group.description}\n             </div>\n         </div>\n             <div className=\"extra content\">\n                 <span>\n                     <i className=\"user icon\"></i>\n                     {group.getMembers.size()}\n                 </span>\n             </div>\n         </div>\n         </div>\n   ) : <></> */\n};\n\nexport default JoinGroup;","map":{"version":3,"sources":["/home/wen_wong/voting-at-mcgill/client/src/pages/joinGroup.js"],"names":["React","useState","useEffect","makeStyles","VoteFactoryContract","VoteContract","getWeb3","Header","Link","require","useStyles","card","width","JoinGroup","web3Instance","factoryContract","web3","setWeb3","groupsID","setGroupsID","contract","setContract","renderedGroups","renderGroups","initWeb3","setupVoteFactory","networkId","eth","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","console","displayGroups","response","methods","getDeployedVotes","call","displayInfo","ident","currentElection","renderGs","forEach","then","newGroup","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes'\nimport 'semantic-ui-css/semantic.min.css';\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width:'80%'\n  }\n});\n\nconst JoinGroup = () => {\n    var web3Instance;\n    var factoryContract;\n\n    const [web3, setWeb3] = useState('');\n    const [groupsID, setGroupsID] = useState([]);\n    const [contract, setContract] = useState('');\n    const [renderedGroups, renderGroups] = useState([]);\n\n    // Initialize Web3\n    useEffect(() => {\n\n        async function initWeb3() {\n            web3Instance = await getWeb3();\n            setWeb3(web3Instance);\n        }\n        initWeb3();\n    }, []);\n\n    // Initialize VoteFactory Contract\n    useEffect(() => {\n        async function setupVoteFactory() {\n            if (web3 == '') {\n                return;\n            }\n\n            try {\n                const networkId = await web3.eth.net.getId();\n                const deployedNetwork = VoteFactoryContract.networks[networkId];\n                const instance = new web3.eth.Contract(\n                    VoteFactoryContract.abi,\n                    deployedNetwork && deployedNetwork.address\n                );\n                factoryContract = instance;\n                setContract(instance);\n            } catch (error) {\n                alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n                console.error(error);\n            }\n        }\n\n        setupVoteFactory();\n    }, [web3]);\n\n    // Display all Groups\n    useEffect(() => {\n        var displayGroups = async () => {\n            if (contract == '') {\n                return;\n            }\n            const response = await contract.methods.getDeployedVotes().call();\n            setGroupsID(response);\n        };\n\n        displayGroups();\n    }, [contract]);\n\n    var displayInfo = async (ident) => {\n        if (groupsID == '') {\n            return;\n        }\n\n        try {\n            const instance = new web3.eth.Contract(\n                VoteFactoryContract.abi, \n                ident\n            );\n\n            return (await instance.methods.currentElection().call());\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    // Display the information of a Group\n    useEffect(() => {\n        var renderGs = async () => {\n            if (!groupsID) {\n                return;\n            }\n\n            await groupsID.forEach(ident => {\n                displayInfo(ident).then(newGroup => {\n                    renderGroups([...renderedGroups, newGroup]);\n                });\n            });\n        }\n        renderGs();\n    }, [groupsID]);\n\n    useEffect(() => {\n        if (renderedGroups != []) {\n            console.log(renderedGroups);\n        }\n    }, [renderedGroups]);\n\n    return <></>;\n /*\n    //return <a>Hello World</a>;\n    return groupList ? groupList.map((group) => \n        //<Link className=\"ui button\" route ={`/elections/vote/${vote}`} key={index}>\n        <div className=\"ui link card\" style={{width:\"80%\", color: '#f00000'}}>\n        <div className=\"card\">\n        <div className=\"content\">\n            <div className=\"header\">Group</div>\n            <div className=\"meta\">\n                <a>{group.groupName}</a>\n            </div>\n            <div className=\"description\">\n                {group.description}\n            </div>\n        </div>\n            <div className=\"extra content\">\n                <span>\n                    <i className=\"user icon\"></i>\n                    {group.getMembers.size()}\n                </span>\n            </div>\n        </div>\n        </div>\n  ) : <></> */\n};\n\nexport default JoinGroup;"]},"metadata":{},"sourceType":"module"}