{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\PROJECT_VOTE\\\\voting-at-mcgill\\\\client\\\\src\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid'; // CommonJS\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width: '80%'\n  }\n});\n\nfunction App() {\n  const classes = useStyles();\n  const {\n    0: votesAddresses,\n    1: setVotesAddresses\n  } = useState('');\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: accounts,\n    1: setAccounts\n  } = useState('');\n  const {\n    0: contract,\n    1: setContract\n  } = useState('');\n  const {\n    0: voteContract,\n    1: setVoteContract\n  } = useState('');\n  const {\n    0: renderedAddresses,\n    1: renderAddresses\n  } = useState([]);\n  useEffect(() => {\n    // get web3\n    async function initWeb3() {\n      const web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, []);\n  useEffect(() => {\n    // get Factory contract\n    async function setup() {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        setAccounts(await web3.eth.getAccounts()); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        setAccounts(await web3.eth.getAccounts());\n        setContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setup();\n  }, [web3]);\n  useEffect(() => {\n    //just get Vote contract\n    async function setup() {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        // Get the contract instance.\n        const instance = new web3.eth.Contract(VoteContract.abi, votesAddresses[votesAddresses.length - 1]);\n        setVoteContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setup();\n  }, [contract, votesAddresses]);\n  useEffect(() => {\n    //display available votes\n    var displayVotes = async () => {\n      if (contract == '') {\n        return;\n      }\n\n      const response = await contract.methods.getDeployedVotes().call(); // Update state with the result.\n\n      setVotesAddresses(response);\n    };\n\n    displayVotes();\n  }, [contract]);\n  useEffect(() => {\n    //render votes\n    var displayInfo = async address => {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        // Get the contract instance.\n        const instance = new web3.eth.Contract(VoteContract.abi, address);\n        return await instance.methods.currentElection().call(); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    var renderVotes = async () => {\n      if (!votesAddresses) {\n        return;\n      }\n\n      var temp = [];\n      votesAddresses.forEach(address => {\n        displayInfo(address).then(newAddress => temp.push(newAddress));\n      });\n      renderAddresses(temp);\n    };\n\n    renderVotes();\n  }, [votesAddresses]);\n\n  function displayVoteList() {\n    if (web3 == \"\") {\n      return \"waiting for votes to display...\";\n    } else if (votesAddresses == \"\") {\n      return \"no votes to display\";\n    }\n\n    setTimeout(function () {//\n    }, 2000);\n    setTimeout(1);\n    console.log(JSON.stringify(renderedAddresses));\n    return votesAddresses.map((vote, index) => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }, \"Sadge\") // <Card key={index} variant=\"outlined\" className ={classes.card}>\n    //   <CardContent >\n    //     <Grid container>\n    //       {/* <Grid item xs ={10}><span>{vote.title}</span></Grid> */}\n    //       <Grid item xs ={2}>\n    //         <div>            \n    //           {/* <Link route ={`/elections/apply/${index}`}>  */}\n    //             Apply as Candidate\n    //           {/* </Link> */}\n    //         </div>\n    //         <div>  \n    //           {/* <Link route ={`/elections/vote/${index}`}>  */}\n    //             Vote\n    //           {/* </Link> */}\n    //         </div>\n    //       </Grid>\n    //     </Grid>\n    //   </CardContent>\n    // </Card>\n    );\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, displayVoteList())));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/foubroker/PROJECT_VOTE/voting-at-mcgill/client/src/pages/index.js"],"names":["React","useState","useEffect","makeStyles","VoteFactoryContract","VoteContract","getWeb3","Header","Link","Card","CardContent","Grid","require","useStyles","card","width","App","classes","votesAddresses","setVotesAddresses","web3","setWeb3","accounts","setAccounts","contract","setContract","voteContract","setVoteContract","renderedAddresses","renderAddresses","initWeb3","web3Instance","setup","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","console","length","displayVotes","response","methods","getDeployedVotes","call","displayInfo","currentElection","renderVotes","temp","forEach","then","newAddress","push","displayVoteList","setTimeout","log","JSON","stringify","map","vote","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\r\nimport VoteContract from \"../contracts/Vote.json\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport { Header } from '../components/header';\r\nimport { Link } from '../../routes'\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\n// CommonJS\r\nrequire(\"regenerator-runtime/runtime\");\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    width:'80%'\r\n  }\r\n});\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [votesAddresses, setVotesAddresses] = useState('');\r\n  const [web3, setWeb3] = useState('');\r\n  const [accounts, setAccounts] = useState('');\r\n  const [contract, setContract] = useState('');\r\n  const [voteContract, setVoteContract] = useState('');\r\n  const [renderedAddresses, renderAddresses] = useState([]);\r\n\r\n  useEffect(() => {// get web3\r\n    async function initWeb3() {\r\n      const web3Instance = await getWeb3()\r\n      setWeb3(web3Instance);\r\n    }\r\n    initWeb3();\r\n  },[]);\r\n\r\n  useEffect(() => {// get Factory contract\r\n    async function setup() {\r\n      if(web3 == '') {\r\n        return;\r\n      }\r\n      try {\r\n        setAccounts(await web3.eth.getAccounts());\r\n        // Get the contract instance.\r\n        const networkId = await web3.eth.net.getId();\r\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n        const instance = new web3.eth.Contract(\r\n          VoteFactoryContract.abi,\r\n          deployedNetwork && deployedNetwork.address,\r\n        );\r\n        setAccounts(await web3.eth.getAccounts());\r\n        setContract(instance);\r\n    \r\n        // Set web3, accounts, and contract to the state, and then proceed with an\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    }\r\n      setup();\r\n  },[web3]);\r\n\r\n  useEffect(() => {//just get Vote contract\r\n    async function setup() {\r\n      if(web3 == '') {\r\n        return;\r\n      }\r\n      try {\r\n        // Get the contract instance.\r\n        const instance = new web3.eth.Contract(\r\n          VoteContract.abi,\r\n          votesAddresses[votesAddresses.length-1],\r\n        );\r\n        setVoteContract(instance);\r\n        // Set web3, accounts, and contract to the state, and then proceed with an\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    }\r\n      setup();\r\n  },[contract,votesAddresses]);\r\n\r\n  useEffect(()=> {//display available votes\r\n    var displayVotes = async () => {\r\n      if(contract == ''){\r\n        return;\r\n      }\r\n      const response = await contract.methods.getDeployedVotes().call();\r\n      // Update state with the result.\r\n      setVotesAddresses(response);\r\n    };\r\n    displayVotes();\r\n  },[contract]);\r\n\r\n  useEffect(()=> {//render votes\r\n    var displayInfo = async (address) => { \r\n      if(web3 == '') {\r\n        return;\r\n      }\r\n      try {\r\n        // Get the contract instance.\r\n        const instance = new web3.eth.Contract(\r\n          VoteContract.abi,\r\n          address\r\n        );\r\n        return (await instance.methods.currentElection().call());\r\n        // Set web3, accounts, and contract to the state, and then proceed with an\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    };\r\n    var renderVotes = async () => {\r\n      if (!votesAddresses){\r\n        return;\r\n      }\r\n      var temp = []\r\n      votesAddresses.forEach(address => {\r\n          displayInfo(address).then(newAddress =>\r\n          temp.push(newAddress)\r\n        )\r\n      })\r\n      renderAddresses(temp);\r\n    }\r\n    renderVotes();\r\n  },[votesAddresses]);\r\n\r\n\r\n  function displayVoteList() {\r\n    if(web3 == \"\"){\r\n      return \"waiting for votes to display...\"\r\n    }\r\n    else if(votesAddresses == \"\"){\r\n      return \"no votes to display\"\r\n    }\r\n    setTimeout(function(){\r\n      //\r\n    }, 2000);\r\n    setTimeout(1)\r\n    console.log(JSON.stringify(renderedAddresses));\r\n    return votesAddresses.map((vote, index) => \r\n        <li>Sadge</li>\r\n        // <Card key={index} variant=\"outlined\" className ={classes.card}>\r\n        //   <CardContent >\r\n        //     <Grid container>\r\n        //       {/* <Grid item xs ={10}><span>{vote.title}</span></Grid> */}\r\n        //       <Grid item xs ={2}>\r\n        //         <div>            \r\n        //           {/* <Link route ={`/elections/apply/${index}`}>  */}\r\n        //             Apply as Candidate\r\n        //           {/* </Link> */}\r\n        //         </div>\r\n        //         <div>  \r\n        //           {/* <Link route ={`/elections/vote/${index}`}>  */}\r\n        //             Vote\r\n        //           {/* </Link> */}\r\n        //         </div>\r\n        //       </Grid>\r\n        //     </Grid>\r\n        //   </CardContent>\r\n        // </Card>\r\n    )\r\n  }\r\n\r\n  \r\n  return( \r\n    <>\r\n      <Header></Header>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <div className=\"App\">\r\n        <div>{ displayVoteList() }</div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}