{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\PROJECT_VOTE\\\\voting-at-mcgill\\\\client\\\\src\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid'; // CommonJS\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar useStyles = makeStyles({\n  card: {\n    width: '80%'\n  }\n});\n\nfunction App(_ref) {\n  _s();\n\n  var votes = _ref.votes;\n  var classes = useStyles();\n\n  var _useState = useState(''),\n      votesAddresses = _useState[0],\n      setVotesAddresses = _useState[1];\n\n  var _useState2 = useState(''),\n      web3 = _useState2[0],\n      setWeb3 = _useState2[1];\n\n  var _useState3 = useState(''),\n      accounts = _useState3[0],\n      setAccounts = _useState3[1];\n\n  var _useState4 = useState(''),\n      contract = _useState4[0],\n      setContract = _useState4[1];\n\n  var _useState5 = useState(''),\n      voteContract = _useState5[0],\n      setVoteContract = _useState5[1];\n\n  useEffect(function () {\n    // get web3\n    function initWeb3() {\n      return _initWeb.apply(this, arguments);\n    }\n\n    function _initWeb() {\n      _initWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var web3Instance;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getWeb3();\n\n              case 2:\n                web3Instance = _context.sent;\n                setWeb3(web3Instance);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _initWeb.apply(this, arguments);\n    }\n\n    initWeb3();\n  }, []);\n  useEffect(function () {\n    // get Factory contract\n    function setup() {\n      return _setup.apply(this, arguments);\n    }\n\n    function _setup() {\n      _setup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var networkId, deployedNetwork, instance;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(web3 == '')) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                _context2.prev = 2;\n                _context2.t0 = setAccounts;\n                _context2.next = 6;\n                return web3.eth.getAccounts();\n\n              case 6:\n                _context2.t1 = _context2.sent;\n                (0, _context2.t0)(_context2.t1);\n                _context2.next = 10;\n                return web3.eth.net.getId();\n\n              case 10:\n                networkId = _context2.sent;\n                deployedNetwork = VoteFactoryContract.networks[networkId];\n                instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n                _context2.t2 = setAccounts;\n                _context2.next = 16;\n                return web3.eth.getAccounts();\n\n              case 16:\n                _context2.t3 = _context2.sent;\n                (0, _context2.t2)(_context2.t3);\n                setContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n\n                _context2.next = 25;\n                break;\n\n              case 21:\n                _context2.prev = 21;\n                _context2.t4 = _context2[\"catch\"](2);\n                // Catch any errors for any of the above operations.\n                alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n                console.error(_context2.t4);\n\n              case 25:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[2, 21]]);\n      }));\n      return _setup.apply(this, arguments);\n    }\n\n    setup();\n  }, [web3]);\n  useEffect(function () {\n    //just get Vote contract\n    function setup() {\n      return _setup2.apply(this, arguments);\n    }\n\n    function _setup2() {\n      _setup2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var instance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(web3 == '')) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 2:\n                try {\n                  // Get the contract instance.\n                  instance = new web3.eth.Contract(VoteContract.abi, votesAddresses[0]);\n                  setVoteContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n                } catch (error) {\n                  // Catch any errors for any of the above operations.\n                  alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n                  console.error(error);\n                }\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n      return _setup2.apply(this, arguments);\n    }\n\n    setup();\n  }, [contract, votesAddresses]);\n  useEffect(function () {\n    //display available votes\n    var displayVotes = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(contract == '')) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 2:\n                _context4.next = 4;\n                return contract.methods.getDeployedVotes().call();\n\n              case 4:\n                response = _context4.sent;\n                // Update state with the result.\n                setVotesAddresses(response);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function displayVotes() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    displayVotes();\n  }, [contract]);\n\n  function displayVoteList() {\n    var _this = this;\n\n    if (votesAddresses == \"\") {\n      return \"waiting for votes to display...\";\n    }\n\n    return votesAddresses.map(function (address) {\n      return __jsx(Card, {\n        variant: \"outlined\",\n        key: address,\n        className: classes.card,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }\n      }, __jsx(CardContent, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }\n      }, __jsx(Grid, {\n        container: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }\n      }, __jsx(Grid, {\n        item: true,\n        xs: 10,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }\n      }, __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 35\n        }\n      }, address)), __jsx(Grid, {\n        item: true,\n        xs: 2,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }\n      }, __jsx(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }, __jsx(Link, {\n        route: \"/elections/apply/\".concat(address),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 19\n        }\n      }, \"Apply as Candidate\")), __jsx(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }\n      }, __jsx(Link, {\n        route: \"/elections/vote/\".concat(address),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 19\n        }\n      }, \"Vote\"))))));\n    });\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, votes), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, displayVoteList())));\n}\n\n_s(App, \"OLa/w32w2xBblAnJFP4CdzASwCs=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\n\nApp.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(props) {\n    var setup, _setup3, displayVotes, response, web3;\n\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _setup3 = function _setup5() {\n              _setup3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n                var networkId, deployedNetwork, instance;\n                return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                  while (1) {\n                    switch (_context6.prev = _context6.next) {\n                      case 0:\n                        if (!(web3 == '')) {\n                          _context6.next = 2;\n                          break;\n                        }\n\n                        return _context6.abrupt(\"return\");\n\n                      case 2:\n                        _context6.prev = 2;\n                        _context6.t0 = setAccounts;\n                        _context6.next = 6;\n                        return web3.eth.getAccounts();\n\n                      case 6:\n                        _context6.t1 = _context6.sent;\n                        (0, _context6.t0)(_context6.t1);\n                        _context6.next = 10;\n                        return web3.eth.net.getId();\n\n                      case 10:\n                        networkId = _context6.sent;\n                        deployedNetwork = VoteFactoryContract.networks[networkId];\n                        instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n\n                        _context6.next = 19;\n                        break;\n\n                      case 15:\n                        _context6.prev = 15;\n                        _context6.t2 = _context6[\"catch\"](2);\n                        // Catch any errors for any of the above operations.\n                        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n                        console.error(_context6.t2);\n\n                      case 19:\n                      case \"end\":\n                        return _context6.stop();\n                    }\n                  }\n                }, _callee6, null, [[2, 15]]);\n              }));\n              return _setup3.apply(this, arguments);\n            };\n\n            setup = function _setup4() {\n              return _setup3.apply(this, arguments);\n            };\n\n            displayVotes = /*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n                return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                  while (1) {\n                    switch (_context5.prev = _context5.next) {\n                      case 0:\n                        if (!(contract == '')) {\n                          _context5.next = 2;\n                          break;\n                        }\n\n                        return _context5.abrupt(\"return\");\n\n                      case 2:\n                        _context5.next = 4;\n                        return contract.methods.getDeployedVotes().call();\n\n                      case 4:\n                        response = _context5.sent;\n\n                      case 5:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }\n                }, _callee5);\n              }));\n\n              return function displayVotes() {\n                return _ref4.apply(this, arguments);\n              };\n            }();\n\n            _context7.next = 5;\n            return getWeb3();\n\n          case 5:\n            web3 = _context7.sent;\n            _context7.next = 8;\n            return setup();\n\n          case 8:\n            _context7.next = 10;\n            return displayVotes();\n\n          case 10:\n            return _context7.abrupt(\"return\", {\n              votes: 'poop'\n            });\n\n          case 11:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/foubroker/PROJECT_VOTE/voting-at-mcgill/client/src/pages/index.js"],"names":["React","useState","useEffect","makeStyles","VoteFactoryContract","VoteContract","getWeb3","Header","Link","Card","CardContent","Grid","require","useStyles","card","width","App","votes","classes","votesAddresses","setVotesAddresses","web3","setWeb3","accounts","setAccounts","contract","setContract","voteContract","setVoteContract","initWeb3","web3Instance","setup","eth","getAccounts","net","getId","networkId","deployedNetwork","networks","instance","Contract","abi","address","alert","console","error","displayVotes","methods","getDeployedVotes","call","response","displayVoteList","map","getInitialProps","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\r\nimport VoteContract from \"../contracts/Vote.json\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport { Header } from '../components/header';\r\nimport { Link } from '../../routes'\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\n// CommonJS\r\nrequire(\"regenerator-runtime/runtime\");\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    width:'80%'\r\n  }\r\n});\r\n\r\nfunction App({votes}) {\r\n  const classes = useStyles();\r\n  const [votesAddresses, setVotesAddresses] = useState('');\r\n  const [web3, setWeb3] = useState('');\r\n  const [accounts, setAccounts] = useState('');\r\n  const [contract, setContract] = useState('');\r\n  const [voteContract, setVoteContract] = useState('');\r\n\r\n  useEffect(() => {// get web3\r\n    async function initWeb3() {\r\n      const web3Instance = await getWeb3()\r\n      setWeb3(web3Instance);\r\n    }\r\n    initWeb3();\r\n  },[]);\r\n\r\n  useEffect(() => {// get Factory contract\r\n    async function setup() {\r\n      if(web3 == '') {\r\n        return;\r\n      }\r\n      try {\r\n        setAccounts(await web3.eth.getAccounts());\r\n        // Get the contract instance.\r\n        const networkId = await web3.eth.net.getId();\r\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n        const instance = new web3.eth.Contract(\r\n          VoteFactoryContract.abi,\r\n          deployedNetwork && deployedNetwork.address,\r\n        );\r\n        setAccounts(await web3.eth.getAccounts());\r\n        setContract(instance);\r\n    \r\n        // Set web3, accounts, and contract to the state, and then proceed with an\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    }\r\n      setup();\r\n  },[web3]);\r\n\r\n  useEffect(() => {//just get Vote contract\r\n    async function setup() {\r\n      if(web3 == '') {\r\n        return;\r\n      }\r\n      try {\r\n        // Get the contract instance.\r\n        const instance = new web3.eth.Contract(\r\n          VoteContract.abi,\r\n          votesAddresses[0],\r\n        );\r\n        setVoteContract(instance);\r\n        // Set web3, accounts, and contract to the state, and then proceed with an\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    }\r\n      setup();\r\n  },[contract,votesAddresses]);\r\n\r\n  useEffect(()=> {//display available votes\r\n    var displayVotes = async () => {\r\n      if(contract == ''){\r\n        return;\r\n      }\r\n      const response = await contract.methods.getDeployedVotes().call();\r\n      // Update state with the result.\r\n      setVotesAddresses(response);\r\n    };\r\n    displayVotes();\r\n  },[contract]);\r\n\r\n\r\n  function displayVoteList() {\r\n    if(votesAddresses == \"\"){\r\n      return \"waiting for votes to display...\"\r\n    }\r\n    return votesAddresses.map(address => \r\n        <Card variant=\"outlined\" key={address} className ={classes.card}> \r\n          <CardContent>\r\n            <Grid container>\r\n              <Grid item xs ={10}><span>{address}</span></Grid>\r\n              <Grid item xs ={2}>\r\n                <div>            \r\n                  <Link route ={`/elections/apply/${address}`}> \r\n                    Apply as Candidate\r\n                  </Link>\r\n                </div>\r\n                <div>  \r\n                  <Link route ={`/elections/vote/${address}`}> \r\n                    Vote\r\n                  </Link>\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n    )\r\n  }\r\n\r\n  return( \r\n    <>\r\n      <Header></Header>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <div className=\"App\">\r\n        <div>{votes}</div>\r\n        <div>{ displayVoteList() }</div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nApp.getInitialProps = async (props) => {\r\n  async function setup() {\r\n    if(web3 == '') {\r\n      return;\r\n    }\r\n    try {\r\n      setAccounts(await web3.eth.getAccounts());\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        VoteFactoryContract.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  }\r\n  \r\n  var displayVotes = async () => {\r\n    if(contract == ''){\r\n      return;\r\n    }\r\n    response = await contract.methods.getDeployedVotes().call();\r\n    // Update state with the result.\r\n    \r\n  };\r\n  var response;\r\n  var web3 = await getWeb3();\r\n  await setup();\r\n  await displayVotes();\r\n\r\n  return {votes: 'poop'}\r\n  // return {votes:response};\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}