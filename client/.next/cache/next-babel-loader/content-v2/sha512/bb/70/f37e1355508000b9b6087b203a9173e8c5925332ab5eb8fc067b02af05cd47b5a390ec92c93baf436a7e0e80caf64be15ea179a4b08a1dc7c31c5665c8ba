{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\PROJECT_VOTE\\\\voting-at-mcgill\\\\client\\\\src\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\n\nfunction App() {\n  _s();\n\n  const {\n    0: votesAddresses,\n    1: setVotesAddresses\n  } = useState('');\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: accounts,\n    1: setAccounts\n  } = useState('');\n  const {\n    0: contract,\n    1: setContract\n  } = useState('');\n  const {\n    0: voteContract,\n    1: setVoteContract\n  } = useState('');\n  var web3Instance;\n  useEffect(() => {\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, []);\n  useEffect(() => {\n    async function setup() {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        setAccounts(await web3.eth.getAccounts()); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        setAccounts(await web3.eth.getAccounts());\n        setContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setup();\n  }, [web3]);\n  useEffect(() => {\n    async function setup() {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteContract.abi, deployedNetwork && deployedNetwork.address);\n        setVoteContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setup();\n  }, [contract]);\n  useEffect(() => {\n    var createVote = async () => {\n      if (contract == '') {\n        return;\n      } // Get the value from the contract to prove it worked.\n      // uncomment to create votes, note that second await call wont run if first is run.\n\n\n      await contract.methods.createVote(0).send({\n        from: accounts[0]\n      });\n    };\n\n    var displayVotes = async () => {\n      if (contract == '') {\n        return;\n      }\n\n      const response = await contract.methods.getDeployedVotes().call(); // Update state with the result.\n      // console.log(\"response is\" + response);\n\n      setVotesAddresses(response);\n    };\n\n    createVote();\n    displayVotes();\n  }, [contract]);\n  useEffect(() => {\n    var displayVotes = async () => {\n      if (votesAddresses == []) {\n        return;\n      } // Update state with the result.\n\n\n      console.log('works!');\n    };\n\n    displayVotes();\n  }, [votesAddresses[0]]);\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, \"test value: \", votesAddresses)));\n}\n\n_s(App, \"mp+xPlWreHdGDgGmgv+2MSszpDo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/foubroker/PROJECT_VOTE/voting-at-mcgill/client/src/pages/index.js"],"names":["React","useState","useEffect","VoteFactoryContract","VoteContract","getWeb3","Header","App","votesAddresses","setVotesAddresses","web3","setWeb3","accounts","setAccounts","contract","setContract","voteContract","setVoteContract","web3Instance","initWeb3","setup","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","console","createVote","methods","send","from","displayVotes","response","getDeployedVotes","call","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\r\nimport VoteContract from \"../contracts/Vote.json\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport { Header } from '../components/header';\r\n\r\n\r\nfunction App() {\r\n  const [votesAddresses, setVotesAddresses] = useState('');\r\n  const [web3, setWeb3] = useState('');\r\n  const [accounts, setAccounts] = useState('');\r\n  const [contract, setContract] = useState('');\r\n  const [voteContract, setVoteContract] = useState('');\r\n  var web3Instance;\r\n  useEffect(() => {\r\n    async function initWeb3() {\r\n      web3Instance = await getWeb3()\r\n      setWeb3(web3Instance);\r\n    }\r\n    initWeb3();\r\n  },[]);\r\n\r\n  useEffect(() => {\r\n    async function setup() {\r\n      if(web3 == '') {\r\n        return;\r\n      }\r\n      try {\r\n        setAccounts(await web3.eth.getAccounts());\r\n        // Get the contract instance.\r\n        const networkId = await web3.eth.net.getId();\r\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n        const instance = new web3.eth.Contract(\r\n          VoteFactoryContract.abi,\r\n          deployedNetwork && deployedNetwork.address,\r\n        );\r\n        setAccounts(await web3.eth.getAccounts());\r\n        setContract(instance);\r\n    \r\n        // Set web3, accounts, and contract to the state, and then proceed with an\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    }\r\n      setup();\r\n  },[web3]);\r\n\r\n  useEffect(() => {\r\n    async function setup() {\r\n      if(web3 == '') {\r\n        return;\r\n      }\r\n      try {\r\n        // Get the contract instance.\r\n        const networkId = await web3.eth.net.getId();\r\n        const deployedNetwork = VoteContract.networks[networkId];\r\n        const instance = new web3.eth.Contract(\r\n          VoteContract.abi,\r\n          deployedNetwork && deployedNetwork.address,\r\n        );\r\n        setVoteContract(instance);\r\n    \r\n        // Set web3, accounts, and contract to the state, and then proceed with an\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    }\r\n      setup();\r\n  },[contract]);\r\n\r\n  useEffect(()=> {\r\n    var createVote = async () => {\r\n      if(contract == ''){\r\n        return;\r\n      }\r\n      // Get the value from the contract to prove it worked.\r\n      // uncomment to create votes, note that second await call wont run if first is run.\r\n      await contract.methods.createVote(0).send({\r\n        from: accounts[0]\r\n      });\r\n    };\r\n    var displayVotes = async () => {\r\n      if(contract == ''){\r\n        return;\r\n      }\r\n      const response = await contract.methods.getDeployedVotes().call();\r\n      // Update state with the result.\r\n      // console.log(\"response is\" + response);\r\n      setVotesAddresses(response);\r\n    };\r\n    createVote();\r\n    displayVotes();\r\n  },[contract]);\r\n\r\n  useEffect(()=> {\r\n    var displayVotes = async () => {\r\n      if(votesAddresses == []){\r\n        return;\r\n      }\r\n      // Update state with the result.\r\n      console.log('works!')\r\n    };\r\n    displayVotes();\r\n  },[votesAddresses[0]]);\r\n\r\n  return( \r\n    <>\r\n      <Header></Header>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <div className=\"App\">\r\n        <div>test value: {votesAddresses}</div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}