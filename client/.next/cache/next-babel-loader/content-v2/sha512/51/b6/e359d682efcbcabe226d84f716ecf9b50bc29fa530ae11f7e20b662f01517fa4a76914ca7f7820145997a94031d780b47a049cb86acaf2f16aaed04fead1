{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\Desktop\\\\voting-at-mcgill\\\\client\\\\src\\\\pages\\\\loginUser.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Header } from '../components/header';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport { Form, Loader } from \"semantic-ui-react\";\nimport getWeb3 from \"../getWeb3\";\nimport Router from \"next/router\";\nimport 'semantic-ui-css/semantic.min.css';\nconst adminTitle = {\n  color: \"red\",\n  marginBottom: \"5%\",\n  fontSize: \"3em\",\n  textAlign: \"center\"\n};\nconst adminFields = {\n  margin: \"auto 5% auto 5%\"\n};\n/**\r\n * Login User Page - a Page where user can see all existing group and/or join a new group\r\n * DISCLAMER - majority of the code is based on vote.js written by Simon Wang\r\n * \r\n * @author Brandon Wong\r\n * @author Simon Wang\r\n */\n\nconst LoginUser = () => {\n  var web3Instance;\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: Load,\n    1: setLoad\n  } = useState(true);\n  const {\n    0: userLogin,\n    1: setUserLogin\n  } = useState(false);\n  const {\n    0: studentID,\n    1: setStudentID\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState(''); // Initialize Web3\n\n  useEffect(() => {\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, [Load]); // Login implementation\n\n  var onSubmit = async event => {\n    event.preventDefault();\n    var factoryContract;\n    var user; // Initializes VoteFactory Contract\n\n    var setupVoteFactory = async () => {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        [user] = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        factoryContract = instance; // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }; // Calls VoteFactory Contract to create a new instance of Group\n\n\n    var logInUser = async () => {\n      var isLogin = await factoryContract.methods.isUserLoggedIn(user).call();\n      setUserLogin(isLogin);\n      var error = ``;\n\n      if (factoryContract == '') {\n        return;\n      }\n\n      if (studentID.length != 9) {\n        error += `Wrong student ID format. Make sure that the student ID has a length of 9 digits`;\n      }\n\n      if (error.length != 0) {\n        alert(error);\n      }\n\n      try {\n        if (!userLogin) {\n          await factoryContract.methods.loginUser(studentID, password).send({\n            from: user\n          });\n        }\n      } catch (error) {\n        alert(error);\n      }\n\n      setLoad(!Load);\n    }; // Verify the values of the newly created instance of Group\n\n\n    var displayUser = async () => {\n      const summary = await factoryContract.methods.getUser(user).call();\n      console.log(summary);\n    };\n\n    await setupVoteFactory();\n    await logInUser();\n    await displayUser();\n    Router.push(\"/\");\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }), __jsx(\"h1\", {\n    style: adminTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, \"Log In\"), __jsx(Form, {\n    onSubmit: onSubmit,\n    style: adminFields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    required: true,\n    label: \"StudentID\",\n    value: studentID,\n    onChange: event => setStudentID(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    required: true,\n    label: \"Password\",\n    type: \"password\",\n    value: password,\n    onChange: event => setPassword(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }), __jsx(Loader, {\n    active: userLogin,\n    inline: \"centered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 21\n    }\n  }, \"Cancel\"), __jsx(Form.Button, {\n    type: \"submit\",\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }, \"Login\"))));\n};\n\nexport default LoginUser;","map":{"version":3,"sources":["C:/Users/foubroker/Desktop/voting-at-mcgill/client/src/pages/loginUser.js"],"names":["React","useState","useEffect","Header","VoteFactoryContract","Form","Loader","getWeb3","Router","adminTitle","color","marginBottom","fontSize","textAlign","adminFields","margin","LoginUser","web3Instance","web3","setWeb3","Load","setLoad","userLogin","setUserLogin","studentID","setStudentID","password","setPassword","initWeb3","onSubmit","event","preventDefault","factoryContract","user","setupVoteFactory","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","console","logInUser","isLogin","methods","isUserLoggedIn","call","length","loginUser","send","from","displayUser","summary","getUser","log","push","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Header } from '../components/header';\r\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\r\nimport { Form, Loader  } from \"semantic-ui-react\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport Router from \"next/router\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nconst adminTitle = {\r\n    color: \"red\",\r\n    marginBottom: \"5%\",\r\n    fontSize: \"3em\",\r\n    textAlign: \"center\"\r\n};\r\n\r\nconst adminFields = {\r\n    margin: \"auto 5% auto 5%\"\r\n};\r\n\r\n/**\r\n * Login User Page - a Page where user can see all existing group and/or join a new group\r\n * DISCLAMER - majority of the code is based on vote.js written by Simon Wang\r\n * \r\n * @author Brandon Wong\r\n * @author Simon Wang\r\n */\r\nconst LoginUser = () => {\r\n \r\n    var web3Instance;\r\n    const [web3, setWeb3] = useState('');\r\n    const [Load, setLoad] = useState(true);\r\n    const [userLogin, setUserLogin] = useState(false);\r\n    const [studentID, setStudentID] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    // Initialize Web3\r\n    useEffect(() => {\r\n        async function initWeb3() {\r\n            web3Instance = await getWeb3();\r\n            setWeb3(web3Instance);\r\n        }\r\n        initWeb3();\r\n    },[Load]);\r\n\r\n    // Login implementation\r\n    var onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        var factoryContract;\r\n        var user;\r\n\r\n        // Initializes VoteFactory Contract\r\n        var setupVoteFactory = async () => {\r\n            if(web3 == '') {\r\n                return;\r\n            }\r\n            try {\r\n                [user] = (await web3.eth.getAccounts());\r\n                // Get the contract instance.\r\n                const networkId = await web3.eth.net.getId();\r\n                const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n                const instance = new web3.eth.Contract(\r\n                    VoteFactoryContract.abi,\r\n                    deployedNetwork && deployedNetwork.address,\r\n                );\r\n                factoryContract = instance;\r\n\r\n                // Set web3, accounts, and contract to the state, and then proceed with an\r\n            } catch (error) {\r\n                // Catch any errors for any of the above operations.\r\n                alert(\r\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\r\n                );\r\n                console.error(error);\r\n            }\r\n        };\r\n\r\n        // Calls VoteFactory Contract to create a new instance of Group\r\n        var logInUser = async () => {\r\n            var isLogin = await factoryContract.methods.isUserLoggedIn(user).call();\r\n            setUserLogin(isLogin);\r\n            var error = ``;\r\n            if(factoryContract == ''){\r\n                return;\r\n            }\r\n\r\n            if (studentID.length != 9) {\r\n                error += `Wrong student ID format. Make sure that the student ID has a length of 9 digits`;\r\n            }\r\n\r\n            if (error.length != 0) {\r\n                alert(error);\r\n            }\r\n\r\n            try {\r\n                if (!userLogin) {\r\n                    await factoryContract.methods.loginUser(studentID, password).send({\r\n                        from: user\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                alert(error);\r\n            }\r\n            setLoad(!Load);\r\n        };\r\n\r\n        // Verify the values of the newly created instance of Group\r\n        var displayUser = async () => {\r\n            const summary = await factoryContract.methods.getUser(user).call();\r\n            console.log(summary);\r\n        };\r\n\r\n        await setupVoteFactory();\r\n        await logInUser();\r\n        await displayUser();\r\n        Router.push(\"/\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <h1 style={adminTitle}>Log In</h1>\r\n\r\n            <Form onSubmit={onSubmit} style={adminFields}>\r\n                <div>\r\n                    <Form.Input required label=\"StudentID\"\r\n                                 value={studentID}\r\n                                 onChange={event => setStudentID(event.target.value)}\r\n                    >\r\n\r\n                    </Form.Input>\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <Form.Input required label=\"Password\"\r\n                                 type=\"password\"\r\n                                 value={password}\r\n                                 onChange={event => setPassword(event.target.value)}\r\n                    >\r\n\r\n                    </Form.Input>\r\n                </div>\r\n                <br></br>\r\n                <Loader\r\n                        active={userLogin}\r\n                        inline='centered'\r\n                />\r\n                <br></br>\r\n                <div>\r\n                    <Form.Button>Cancel</Form.Button>\r\n                    <Form.Button type=\"submit\" onSubmit={onSubmit}>Login</Form.Button>\r\n                </div>\r\n            </Form>\r\n        </>\r\n    )\r\n};\r\nexport default LoginUser;\r\n"]},"metadata":{},"sourceType":"module"}