{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes';\nimport 'semantic-ui-css/semantic.min.css';\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar useStyles = makeStyles({\n  card: {\n    width: '80%'\n  }\n});\n\nvar JoinGroup = function JoinGroup() {\n  _s();\n\n  var web3Instance;\n  var factoryContract;\n\n  var _useState = useState(''),\n      web3 = _useState[0],\n      setWeb3 = _useState[1];\n\n  var _useState2 = useState(''),\n      contract = _useState2[0],\n      setContract = _useState2[1];\n\n  var _useState3 = useState([]),\n      groupList = _useState3[0],\n      setGroups = _useState3[1];\n\n  var _useState4 = useState([]),\n      members = _useState4[0],\n      getMembers = _useState4[1];\n\n  var _useState5 = useState([]),\n      renderedGroups = _useState5[0],\n      renderGroups = _useState5[1]; // Initialize Web3\n\n\n  useEffect(function () {\n    function initWeb3() {\n      return _initWeb.apply(this, arguments);\n    }\n\n    function _initWeb() {\n      _initWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getWeb3();\n\n              case 2:\n                web3Instance = _context.sent;\n                setWeb3(web3Instance);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _initWeb.apply(this, arguments);\n    }\n\n    initWeb3();\n  }, []); // Initialize VoteFactory Contract\n\n  useEffect(function () {\n    function setupVoteFactory() {\n      return _setupVoteFactory.apply(this, arguments);\n    }\n\n    function _setupVoteFactory() {\n      _setupVoteFactory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var networkId, deployedNetwork, instance;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(web3 == '')) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                console.log('unable to get factory');\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                _context2.prev = 3;\n                _context2.next = 6;\n                return web3.eth.net.getId();\n\n              case 6:\n                networkId = _context2.sent;\n                deployedNetwork = VoteFactoryContract.networks[networkId];\n                instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n                factoryContract = instance;\n                setContract(instance);\n                _context2.next = 17;\n                break;\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](3);\n                alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n                console.error(_context2.t0);\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[3, 13]]);\n      }));\n      return _setupVoteFactory.apply(this, arguments);\n    }\n\n    setupVoteFactory();\n  }, [web3]);\n  return __jsx(React.Fragment, null);\n  /*\n   // Display all Groups\n  useEffect(() => {\n      var displayGroups = async () => {\n          if (contract == '') {\n              return;\n          }\n          const response = await contract.methods.getExistingGroups().call();\n          setGroups(response);\n      };\n       displayGroups();\n  }, [contract]);\n   // Display the information of a Group\n  useEffect(() => {\n      var displayInfo = async (groupID) => {\n          if (groupList == '') {\n              return;\n          }\n           try {\n              const instance = new web3.eth.Contract(\n                  VoteFactoryContract.abi, \n                  groupID\n              );\n               return (await instance.methods.getGroup(groupID).call());\n          } catch (error) {\n              console.error(error);\n          }\n      };\n       var renderGs = async () => {\n          if (groupList == '') {\n              return;\n          }\n           await groupList.forEach(groupID => {\n              displayInfo(groupID).then(newGroup => {\n                  renderGroups([...renderedGroups, newGroup]);\n              });\n          });\n      }\n      renderGs();\n  }, [groupList]);\n   useEffect(() => {\n      if (renderedGroups != []) {\n          console.log(renderedGroups);\n      }\n  }, [renderedGroups]);\n   //return <a>Hello World</a>;\n  return groupList ? groupList.map((group) => \n      //<Link className=\"ui button\" route ={`/elections/vote/${vote}`} key={index}>\n      <div className=\"ui link card\" style={{width:\"80%\", color: '#f00000'}}>\n      <div className=\"card\">\n      <div className=\"content\">\n          <div className=\"header\">Group</div>\n          <div className=\"meta\">\n              <a>{group.groupName}</a>\n          </div>\n          <div className=\"description\">\n              {group.description}\n          </div>\n      </div>\n          <div className=\"extra content\">\n              <span>\n                  <i className=\"user icon\"></i>\n                  {group.getMembers.size()}\n              </span>\n          </div>\n      </div>\n      </div>\n  ) : <></> */\n};\n\n_s(JoinGroup, \"TxS15x4Wpt4/ZgHehFXGjqcv7Ew=\");\n\n_c = JoinGroup;\nexport default JoinGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"JoinGroup\");","map":{"version":3,"sources":["/home/wen_wong/voting-at-mcgill/client/src/pages/joinGroup.js"],"names":["React","useState","useEffect","makeStyles","VoteFactoryContract","VoteContract","getWeb3","Header","Link","require","useStyles","card","width","JoinGroup","web3Instance","factoryContract","web3","setWeb3","contract","setContract","groupList","setGroups","members","getMembers","renderedGroups","renderGroups","initWeb3","setupVoteFactory","console","log","eth","net","getId","networkId","deployedNetwork","networks","instance","Contract","abi","address","alert","error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes'\nimport 'semantic-ui-css/semantic.min.css';\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width:'80%'\n  }\n});\n\nconst JoinGroup = () => {\n    var web3Instance;\n    var factoryContract;\n\n    const [web3, setWeb3] = useState('');\n    const [contract, setContract] = useState('');\n    const [groupList, setGroups] = useState([]);\n    const [members, getMembers] = useState([]);\n    const [renderedGroups, renderGroups] = useState([]);\n\n    // Initialize Web3\n    useEffect(() => {\n\n        async function initWeb3() {\n            web3Instance = await getWeb3();\n            setWeb3(web3Instance);\n        }\n        initWeb3();\n    }, []);\n\n    // Initialize VoteFactory Contract\n    useEffect(() => {\n        async function setupVoteFactory() {\n            if (web3 == '') {\n                console.log('unable to get factory');\n                return;\n            }\n\n            try {\n                const networkId = await web3.eth.net.getId();\n                const deployedNetwork = VoteFactoryContract.networks[networkId];\n                const instance = new web3.eth.Contract(\n                    VoteFactoryContract.abi,\n                    deployedNetwork && deployedNetwork.address\n                );\n                factoryContract = instance;\n                setContract(instance);\n            } catch (error) {\n                alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n                console.error(error);\n            }\n        }\n\n        setupVoteFactory();\n    }, [web3]);\n    return <></>;\n    /*\n\n    // Display all Groups\n    useEffect(() => {\n        var displayGroups = async () => {\n            if (contract == '') {\n                return;\n            }\n            const response = await contract.methods.getExistingGroups().call();\n            setGroups(response);\n        };\n\n        displayGroups();\n    }, [contract]);\n\n    // Display the information of a Group\n    useEffect(() => {\n        var displayInfo = async (groupID) => {\n            if (groupList == '') {\n                return;\n            }\n\n            try {\n                const instance = new web3.eth.Contract(\n                    VoteFactoryContract.abi, \n                    groupID\n                );\n\n                return (await instance.methods.getGroup(groupID).call());\n            } catch (error) {\n                console.error(error);\n            }\n        };\n\n        var renderGs = async () => {\n            if (groupList == '') {\n                return;\n            }\n\n            await groupList.forEach(groupID => {\n                displayInfo(groupID).then(newGroup => {\n                    renderGroups([...renderedGroups, newGroup]);\n                });\n            });\n        }\n        renderGs();\n    }, [groupList]);\n\n    useEffect(() => {\n        if (renderedGroups != []) {\n            console.log(renderedGroups);\n        }\n    }, [renderedGroups]);\n\n    //return <a>Hello World</a>;\n    return groupList ? groupList.map((group) => \n        //<Link className=\"ui button\" route ={`/elections/vote/${vote}`} key={index}>\n        <div className=\"ui link card\" style={{width:\"80%\", color: '#f00000'}}>\n        <div className=\"card\">\n        <div className=\"content\">\n            <div className=\"header\">Group</div>\n            <div className=\"meta\">\n                <a>{group.groupName}</a>\n            </div>\n            <div className=\"description\">\n                {group.description}\n            </div>\n        </div>\n            <div className=\"extra content\">\n                <span>\n                    <i className=\"user icon\"></i>\n                    {group.getMembers.size()}\n                </span>\n            </div>\n        </div>\n        </div>\n  ) : <></> */\n};\n\nexport default JoinGroup;"]},"metadata":{},"sourceType":"module"}