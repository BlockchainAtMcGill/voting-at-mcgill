{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\Desktop\\\\voting-at-mcgill\\\\client\\\\src\\\\pages\\\\registerUser.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Header } from '../components/header';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport { Form, Loader } from \"semantic-ui-react\";\nimport getWeb3 from \"../getWeb3\";\nimport 'semantic-ui-css/semantic.min.css';\nimport Router from \"next/router\";\nconst adminTitle = {\n  color: \"red\",\n  marginBottom: \"5%\",\n  fontSize: \"3em\",\n  textAlign: \"center\"\n};\nconst adminFields = {\n  margin: \"auto 5% auto 5%\"\n};\n/**\r\n * Register User Page - a Page where user can see all existing group and/or join a new group\r\n * DISCLAMER - majority of the code is based on vote.js written by Simon Wang\r\n * \r\n * @author Brandon Wong\r\n * @author Simon Wang\r\n */\n\nconst RegisterUser = () => {\n  var web3Instance;\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: Load,\n    1: setLoad\n  } = useState(true);\n  const {\n    0: registeringUser,\n    1: setRegisteringUser\n  } = useState(false);\n  const {\n    0: errorRegister,\n    1: setErrorRegister\n  } = useState(false);\n  const {\n    0: username,\n    1: setUsername\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: studentID,\n    1: setStudentID\n  } = useState('');\n  useEffect(() => {\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, [Load]);\n\n  var onSubmit = async event => {\n    event.preventDefault();\n    var factoryContract;\n    var user; // Initializes VoteFactory Contract\n\n    var setupVoteFactory = async () => {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        factoryContract = instance;\n        [user] = await web3.eth.getAccounts(); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }; // Calls VoteFactory Contract to create a new instance of Group\n\n\n    var registerUser = async () => {\n      setRegisteringUser(true);\n      var error = ``;\n\n      if (factoryContract == '') {\n        return;\n      } // Calls the method createGroup from VoteFactory.sol\n      // TO FIX Verify that is a valid email\n\n\n      var temp = email.split(\"@\");\n\n      if (!(temp[1] === \"mcgill.ca\") && !(temp[1] === \"mail.mcgill.ca\")) {\n        error += `Wrong email format. Make sure to use a McGill email e.g., @mcgill.ca or @mail.mcgill.ca \\n`;\n      }\n\n      if (studentID.length != 9) {\n        error += `Wrong student ID format. Make sure that the student ID has a length of 9 digits`;\n      }\n\n      if (error.length != 0) {\n        alert(error);\n        setErrorRegister(true);\n      }\n\n      try {\n        await factoryContract.methods.registerUser(username, email, studentID, password).send({\n          from: user\n        });\n      } catch (error) {\n        alert(error);\n      }\n\n      setRegisteringUser(false);\n      setLoad(!Load);\n    }; // Verify the values of the newly created instance of Group\n\n\n    var displayUser = async () => {\n      if (!errorRegister) {\n        const summary = await factoryContract.methods.getUser(user).call();\n        console.log(summary);\n      }\n    };\n\n    var displayDefaultGroup = async () => {\n      if (!errorRegister) {\n        const summary = await factoryContract.methods.getGroup(0).call();\n        console.log(summary);\n      }\n    };\n\n    var displayGroups = async () => {\n      if (!errorRegister) {\n        const summary = await factoryContract.methods.getUserAllGroups(user).call();\n        console.log(summary);\n      }\n    };\n\n    await setupVoteFactory();\n    await registerUser();\n    await displayUser();\n    await displayDefaultGroup();\n    await displayGroups();\n    Router.push(\"/loginUser\");\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }), __jsx(\"h1\", {\n    style: adminTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, \"Register\"), __jsx(Form, {\n    onSubmit: onSubmit,\n    style: adminFields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    required: true,\n    label: \"Username\",\n    value: username,\n    onChange: event => setUsername(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    required: true,\n    label: \"Email\",\n    value: email,\n    onChange: event => setEmail(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    required: true,\n    label: \"StudentID\",\n    value: studentID,\n    onChange: event => setStudentID(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    required: true,\n    label: \"Password\",\n    type: \"password\",\n    value: password,\n    onChange: event => setPassword(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }), __jsx(Loader, {\n    active: registeringUser,\n    inline: \"centered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 21\n    }\n  }, \"Cancel\"), __jsx(Form.Button, {\n    type: \"submit\",\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 21\n    }\n  }, \"Register\"))));\n};\n\nexport default RegisterUser;","map":{"version":3,"sources":["C:/Users/foubroker/Desktop/voting-at-mcgill/client/src/pages/registerUser.js"],"names":["React","useState","useEffect","Header","VoteFactoryContract","Form","Loader","getWeb3","Router","adminTitle","color","marginBottom","fontSize","textAlign","adminFields","margin","RegisterUser","web3Instance","web3","setWeb3","Load","setLoad","registeringUser","setRegisteringUser","errorRegister","setErrorRegister","username","setUsername","email","setEmail","password","setPassword","studentID","setStudentID","initWeb3","onSubmit","event","preventDefault","factoryContract","user","setupVoteFactory","networkId","eth","net","getId","deployedNetwork","networks","instance","Contract","abi","address","getAccounts","error","alert","console","registerUser","temp","split","length","methods","send","from","displayUser","summary","getUser","call","log","displayDefaultGroup","getGroup","displayGroups","getUserAllGroups","push","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Header } from '../components/header';\r\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\r\nimport { Form, Loader  } from \"semantic-ui-react\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport Router from \"next/router\";\r\n\r\nconst adminTitle = {\r\n    color: \"red\",\r\n    marginBottom: \"5%\",\r\n    fontSize: \"3em\",\r\n    textAlign: \"center\"\r\n};\r\n\r\nconst adminFields = {\r\n    margin: \"auto 5% auto 5%\"\r\n};\r\n\r\n/**\r\n * Register User Page - a Page where user can see all existing group and/or join a new group\r\n * DISCLAMER - majority of the code is based on vote.js written by Simon Wang\r\n * \r\n * @author Brandon Wong\r\n * @author Simon Wang\r\n */\r\nconst RegisterUser = () => {\r\n\r\n    var web3Instance;\r\n    const [web3, setWeb3] = useState('');\r\n    const [Load, setLoad] = useState(true);\r\n    const [registeringUser, setRegisteringUser] = useState(false);\r\n    const [errorRegister, setErrorRegister] = useState(false);\r\n    const [username, setUsername] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [studentID, setStudentID] = useState('');\r\n\r\n    useEffect(() => {\r\n        async function initWeb3() {\r\n            web3Instance = await getWeb3();\r\n            setWeb3(web3Instance);\r\n        }\r\n        initWeb3();\r\n    },[Load]);\r\n\r\n    var onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        var factoryContract;\r\n        var user;\r\n\r\n        // Initializes VoteFactory Contract\r\n        var setupVoteFactory = async () => {\r\n            if(web3 == '') {\r\n                return;\r\n            }\r\n            try {\r\n                // Get the contract instance.\r\n                const networkId = await web3.eth.net.getId();\r\n                const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n                const instance = new web3.eth.Contract(\r\n                    VoteFactoryContract.abi,\r\n                    deployedNetwork && deployedNetwork.address,\r\n                );\r\n                factoryContract = instance;\r\n\r\n                [user] = (await web3.eth.getAccounts());\r\n\r\n                // Set web3, accounts, and contract to the state, and then proceed with an\r\n            } catch (error) {\r\n                // Catch any errors for any of the above operations.\r\n                alert(\r\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\r\n                );\r\n                console.error(error);\r\n            }\r\n        };\r\n        // Calls VoteFactory Contract to create a new instance of Group\r\n        var registerUser = async () => {\r\n            setRegisteringUser(true);\r\n            var error = ``;\r\n\r\n            if(factoryContract == ''){\r\n                return;\r\n            }\r\n            // Calls the method createGroup from VoteFactory.sol\r\n            // TO FIX Verify that is a valid email\r\n            var temp = email.split(\"@\");\r\n            if (!(temp[1] === \"mcgill.ca\") && !(temp[1] === \"mail.mcgill.ca\")) {\r\n                error += `Wrong email format. Make sure to use a McGill email e.g., @mcgill.ca or @mail.mcgill.ca \\n`;\r\n            }\r\n\r\n            if (studentID.length != 9) {\r\n                error += `Wrong student ID format. Make sure that the student ID has a length of 9 digits`;\r\n            }\r\n\r\n            if (error.length != 0) {\r\n                alert(error);\r\n                setErrorRegister(true);\r\n            }\r\n\r\n            try {\r\n                await factoryContract.methods.registerUser(username, email, studentID, password).send({\r\n                    from: user\r\n                });\r\n            } catch (error) {\r\n                alert(error);\r\n            }\r\n\r\n            setRegisteringUser(false);\r\n            setLoad(!Load);\r\n        };\r\n\r\n        // Verify the values of the newly created instance of Group\r\n        var displayUser = async () => {\r\n            if (!errorRegister) {\r\n                const summary = await factoryContract.methods.getUser(user).call();\r\n                console.log(summary);\r\n            }\r\n        };\r\n\r\n        var displayDefaultGroup = async () => {\r\n            if (!errorRegister) {\r\n                const summary = await factoryContract.methods.getGroup(0).call();\r\n                console.log(summary);\r\n            }\r\n        };\r\n\r\n        var  displayGroups = async () => {\r\n            if (!errorRegister) {\r\n                const summary = await factoryContract.methods.getUserAllGroups(user).call();\r\n                console.log(summary);\r\n            }\r\n        };\r\n\r\n        await setupVoteFactory();\r\n        await registerUser();\r\n        await displayUser();\r\n        await displayDefaultGroup();\r\n        await displayGroups();\r\n        Router.push(\"/loginUser\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <h1 style={adminTitle}>Register</h1>\r\n\r\n            <Form onSubmit={onSubmit} style={adminFields}>\r\n                <div>\r\n                    <Form.Input required label=\"Username\"\r\n                                 value={username}\r\n                                 onChange={event => setUsername(event.target.value)}\r\n                    >\r\n\r\n                    </Form.Input>\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <Form.Input required label=\"Email\"\r\n                                 value={email}\r\n                                 onChange={event => setEmail(event.target.value)}\r\n                    />\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <Form.Input required label=\"StudentID\"\r\n                                 value={studentID}\r\n                                 onChange={event => setStudentID(event.target.value)}\r\n                    />\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <Form.Input required label=\"Password\"\r\n                                 type=\"password\"\r\n                                 value={password}\r\n                                 onChange={event => setPassword(event.target.value)}\r\n                    >\r\n\r\n                    </Form.Input>\r\n                </div>\r\n                <br></br>\r\n                <Loader\r\n                        active={registeringUser}\r\n                        inline='centered'\r\n                />\r\n                <br></br>\r\n                <div>\r\n                    <Form.Button>Cancel</Form.Button>\r\n                    <Form.Button type=\"submit\" onSubmit={onSubmit}>Register</Form.Button>\r\n                </div>\r\n            </Form>\r\n        </>\r\n    )\r\n};\r\nexport default RegisterUser;\r\n"]},"metadata":{},"sourceType":"module"}