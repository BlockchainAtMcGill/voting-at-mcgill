{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\PROJECT_VOTE\\\\voting-at-mcgill\\\\client\\\\src\\\\pages\\\\newElection.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Header } from '../components/header';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport * as m from \"@material-ui/core\";\nimport getWeb3 from \"../getWeb3\";\n\nvar NewElection = function NewElection() {\n  _s();\n\n  var _useState = useState(''),\n      web3 = _useState[0],\n      setWeb3 = _useState[1];\n\n  var _useState2 = useState(''),\n      voteContract = _useState2[0],\n      setVoteContract = _useState2[1];\n\n  var _useState3 = useState(''),\n      contract = _useState3[0],\n      setContract = _useState3[1];\n\n  var electionTypes = [{\n    value: 'majority',\n    label: 'simple majority'\n  }, {\n    value: 'twoThirds',\n    label: 'two thirds'\n  }];\n  var web3Instance;\n  useEffect(function () {\n    function initWeb3() {\n      return _initWeb.apply(this, arguments);\n    }\n\n    function _initWeb() {\n      _initWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getWeb3();\n\n              case 2:\n                web3Instance = _context.sent;\n                setWeb3(web3Instance);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _initWeb.apply(this, arguments);\n    }\n\n    initWeb3();\n  }, []); //please follow the course for a better implementation @Jing\n\n  var _useState4 = useState(''),\n      title = _useState4[0],\n      setTitle = _useState4[1];\n\n  var changeTitle = function changeTitle(event) {\n    setTitle(event.target.value);\n  };\n\n  var _useState5 = useState(0),\n      startDate = _useState5[0],\n      setStartDate = _useState5[1];\n\n  var changeStartDate = function changeStartDate(event) {\n    setStartDate(event.target.value);\n  };\n\n  var _useState6 = useState(0),\n      endDate = _useState6[0],\n      setEndDate = _useState6[1];\n\n  var changeEndDate = function changeEndDate(event) {\n    setEndDate(event.target.value);\n  };\n\n  var _useState7 = useState('majority'),\n      electionType = _useState7[0],\n      setElectionType = _useState7[1];\n\n  var changeElectionType = function changeElectionType(event) {\n    setElectionType(event.target.value);\n  };\n\n  var _useState8 = useState(''),\n      description = _useState8[0],\n      setDescription = _useState8[1];\n\n  var changeDescription = function changeDescription(event) {\n    setDescription(event.target.value);\n  }; // useEffect(() => {// get Factory contract\n  //     async function setup() {\n  //         if(web3 == '') {\n  //             return;\n  //         }\n  //         try {\n  //             setAccounts(await web3.eth.getAccounts());\n  //             // Get the contract instance.\n  //             const networkId = await web3.eth.net.getId();\n  //             const deployedNetwork = VoteFactoryContract.networks[networkId];\n  //             const instance = new web3.eth.Contract(\n  //                 VoteFactoryContract.abi,\n  //                 deployedNetwork && deployedNetwork.address,\n  //             );\n  //             setContract(instance);\n  //             // Set web3, accounts, and contract to the state, and then proceed with an\n  //         } catch (error) {\n  //             // Catch any errors for any of the above operations.\n  //             alert(\n  //                 `Failed to load web3, accounts, or contract. Check console for details.`,\n  //             );\n  //             console.error(error);\n  //         }\n  //     }\n  //     setup();\n  // },[web3]);\n\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(event) {\n      var manager, factoryContract, vote, addressOfVote, setupVoteFactory, createVote, getElectionAddress, initializeElection, setUpElection, displayVote;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              event.preventDefault();\n\n              setupVoteFactory = /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                  var networkId, deployedNetwork, instance;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          if (!(web3 == '')) {\n                            _context2.next = 2;\n                            break;\n                          }\n\n                          return _context2.abrupt(\"return\");\n\n                        case 2:\n                          _context2.prev = 2;\n                          _context2.next = 5;\n                          return web3.eth.getAccounts();\n\n                        case 5:\n                          manager = _context2.sent;\n                          _context2.next = 8;\n                          return web3.eth.net.getId();\n\n                        case 8:\n                          networkId = _context2.sent;\n                          deployedNetwork = VoteFactoryContract.networks[networkId];\n                          instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n                          factoryContract = instance; // Set web3, accounts, and contract to the state, and then proceed with an\n\n                          _context2.next = 18;\n                          break;\n\n                        case 14:\n                          _context2.prev = 14;\n                          _context2.t0 = _context2[\"catch\"](2);\n                          // Catch any errors for any of the above operations.\n                          alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n                          console.error(_context2.t0);\n\n                        case 18:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2, null, [[2, 14]]);\n                }));\n\n                return function setupVoteFactory() {\n                  return _ref2.apply(this, arguments);\n                };\n              }();\n\n              createVote = /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          if (!(factoryContract == '')) {\n                            _context3.next = 2;\n                            break;\n                          }\n\n                          return _context3.abrupt(\"return\");\n\n                        case 2:\n                          _context3.next = 4;\n                          return factoryContract.methods.createVote(0).send({\n                            from: manager[0]\n                          });\n\n                        case 4:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function createVote() {\n                  return _ref3.apply(this, arguments);\n                };\n              }();\n\n              getElectionAddress = /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                  var response;\n                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          _context4.next = 2;\n                          return factoryContract.methods.getDeployedVotes().call();\n\n                        case 2:\n                          response = _context4.sent;\n                          addressOfVote = response[response.length - 1];\n\n                        case 4:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                }));\n\n                return function getElectionAddress() {\n                  return _ref4.apply(this, arguments);\n                };\n              }();\n\n              initializeElection = /*#__PURE__*/function () {\n                var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n                  var instance;\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.prev = 0;\n                          _context5.next = 3;\n                          return new web3.eth.Contract(VoteContract.abi, addressOfVote);\n\n                        case 3:\n                          instance = _context5.sent;\n                          setVoteContract(instance);\n                          vote = instance;\n                          _context5.next = 12;\n                          break;\n\n                        case 8:\n                          _context5.prev = 8;\n                          _context5.t0 = _context5[\"catch\"](0);\n                          // Catch any errors for any of the above operations.\n                          alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n                          console.error(_context5.t0);\n\n                        case 12:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5, null, [[0, 8]]);\n                }));\n\n                return function initializeElection() {\n                  return _ref5.apply(this, arguments);\n                };\n              }();\n\n              setUpElection = /*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n                  return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          if (!(vote == '')) {\n                            _context6.next = 3;\n                            break;\n                          }\n\n                          console.log(\"voteContract dne\");\n                          return _context6.abrupt(\"return\");\n\n                        case 3:\n                          _context6.next = 5;\n                          return vote.methods.editElection(title, new Date(startDate).getTime(), new Date(endDate).getTime(), description, [0]);\n\n                        case 5:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                  }, _callee6);\n                }));\n\n                return function setUpElection() {\n                  return _ref6.apply(this, arguments);\n                };\n              }();\n\n              displayVote = /*#__PURE__*/function () {\n                var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n                  var summary;\n                  return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          _context7.next = 2;\n                          return vote.methods.currentElection().call();\n\n                        case 2:\n                          summary = _context7.sent;\n                          console.log(summary);\n\n                        case 4:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }));\n\n                return function displayVote() {\n                  return _ref7.apply(this, arguments);\n                };\n              }();\n\n              _context8.next = 9;\n              return setupVoteFactory();\n\n            case 9:\n              _context8.next = 11;\n              return createVote();\n\n            case 11:\n              _context8.next = 13;\n              return getElectionAddress();\n\n            case 13:\n              _context8.next = 15;\n              return initializeElection();\n\n            case 15:\n              _context8.next = 17;\n              return setUpElection();\n\n            case 17:\n              _context8.next = 19;\n              return displayVote();\n\n            case 19:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var display = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n      var summary;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              // testing purposes\n              console.log(voteContract);\n              _context9.next = 3;\n              return voteContract.methods.currentElection().call();\n\n            case 3:\n              summary = _context9.sent;\n              console.log(summary);\n\n            case 5:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function display() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }), __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, \"New Election\"), __jsx(\"button\", {\n    onClick: display,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }), __jsx(\"form\", {\n    onSubmit: onSubmit,\n    noValidate: true,\n    autoComplete: \"off\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    required: true,\n    fullWidth: true,\n    label: \"Election title\",\n    variant: \"outlined\",\n    value: title,\n    onChange: changeTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    label: \"Start date\",\n    type: \"date\",\n    variant: \"outlined\",\n    InputLabelProps: {\n      shrink: true\n    },\n    value: startDate,\n    onChange: changeStartDate,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    required: true,\n    label: \"End date\",\n    type: \"date\",\n    variant: \"outlined\",\n    InputLabelProps: {\n      shrink: true\n    },\n    value: endDate,\n    onChange: changeEndDate,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    required: true,\n    select: true,\n    label: \"Type of election\",\n    variant: \"outlined\",\n    value: electionType,\n    onChange: changeElectionType,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 21\n    }\n  }, electionTypes.map(function (option) {\n    return __jsx(m.MenuItem, {\n      key: option.value,\n      value: option.value,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 29\n      }\n    }, option.label);\n  }))), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }\n  }), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    required: true,\n    multiline: true,\n    fullWidth: true,\n    label: \"Description\",\n    rows: 4,\n    variant: \"outlined\",\n    value: description,\n    onChange: changeDescription,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 17\n    }\n  }, __jsx(m.Button, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 21\n    }\n  }, \"Cancel\"), __jsx(m.Button, {\n    type: \"submit\",\n    onSubmit: onSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 21\n    }\n  }, \"Publish Election\"))));\n};\n\n_s(NewElection, \"l2qbIQPP/Z0BNEVOfTxIKLsmeUE=\");\n\n_c = NewElection;\nexport default NewElection;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewElection\");","map":{"version":3,"sources":["C:/Users/foubroker/PROJECT_VOTE/voting-at-mcgill/client/src/pages/newElection.js"],"names":["React","useState","useEffect","Header","VoteFactoryContract","VoteContract","m","getWeb3","NewElection","web3","setWeb3","voteContract","setVoteContract","contract","setContract","electionTypes","value","label","web3Instance","initWeb3","title","setTitle","changeTitle","event","target","startDate","setStartDate","changeStartDate","endDate","setEndDate","changeEndDate","electionType","setElectionType","changeElectionType","description","setDescription","changeDescription","onSubmit","preventDefault","setupVoteFactory","eth","getAccounts","manager","net","getId","networkId","deployedNetwork","networks","instance","Contract","abi","address","factoryContract","alert","console","error","createVote","methods","send","from","getElectionAddress","getDeployedVotes","call","response","addressOfVote","length","initializeElection","vote","setUpElection","log","editElection","Date","getTime","displayVote","currentElection","summary","display","shrink","map","option"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Header } from '../components/header';\r\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\r\nimport VoteContract from \"../contracts/Vote.json\";\r\nimport * as m from \"@material-ui/core\";\r\nimport getWeb3 from \"../getWeb3\";\r\n\r\n\r\n\r\nconst NewElection = () => {\r\n\r\n    const [web3, setWeb3] = useState('');\r\n    const [voteContract, setVoteContract] = useState('');\r\n    const [contract, setContract] = useState('');\r\n    const electionTypes = [\r\n        {\r\n            value: 'majority',\r\n            label: 'simple majority'\r\n        },\r\n        {\r\n            value: 'twoThirds',\r\n            label: 'two thirds'\r\n        }\r\n    ];\r\n\r\n    var web3Instance;\r\n    useEffect(() => {\r\n        async function initWeb3() {\r\n            web3Instance = await getWeb3();\r\n            setWeb3(web3Instance);\r\n        }\r\n        initWeb3();\r\n    },[]);\r\n\r\n    //please follow the course for a better implementation @Jing\r\n    const [title, setTitle] = useState('');\r\n    const changeTitle = (event) => {\r\n        setTitle(event.target.value);\r\n    };\r\n    const [startDate, setStartDate] = useState(0);\r\n    const changeStartDate = (event) => {\r\n        setStartDate(event.target.value);\r\n    };\r\n    const [endDate, setEndDate] = useState(0);\r\n    const changeEndDate = (event) => {\r\n        setEndDate(event.target.value);\r\n    };\r\n    const [electionType, setElectionType] = useState('majority');\r\n    const changeElectionType = (event) => {\r\n        setElectionType(event.target.value);\r\n    };\r\n    const [description, setDescription] = useState('');\r\n    const changeDescription = (event) => {\r\n        setDescription(event.target.value);\r\n    };\r\n\r\n    // useEffect(() => {// get Factory contract\r\n    //     async function setup() {\r\n    //         if(web3 == '') {\r\n    //             return;\r\n    //         }\r\n    //         try {\r\n    //             setAccounts(await web3.eth.getAccounts());\r\n    //             // Get the contract instance.\r\n    //             const networkId = await web3.eth.net.getId();\r\n    //             const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n    //             const instance = new web3.eth.Contract(\r\n    //                 VoteFactoryContract.abi,\r\n    //                 deployedNetwork && deployedNetwork.address,\r\n    //             );\r\n    //             setContract(instance);\r\n\r\n    //             // Set web3, accounts, and contract to the state, and then proceed with an\r\n    //         } catch (error) {\r\n    //             // Catch any errors for any of the above operations.\r\n    //             alert(\r\n    //                 `Failed to load web3, accounts, or contract. Check console for details.`,\r\n    //             );\r\n    //             console.error(error);\r\n    //         }\r\n    //     }\r\n    //     setup();\r\n    // },[web3]);\r\n\r\n    var onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        var manager\r\n        var factoryContract\r\n        var vote;\r\n        var addressOfVote\r\n        var setupVoteFactory = async () => { //initializes voteFactory\r\n            if(web3 == '') {\r\n                return;\r\n            }\r\n            try {\r\n                manager = (await web3.eth.getAccounts());\r\n                // Get the contract instance.\r\n                const networkId = await web3.eth.net.getId();\r\n                const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n                const instance = new web3.eth.Contract(\r\n                    VoteFactoryContract.abi,\r\n                    deployedNetwork && deployedNetwork.address,\r\n                );\r\n                factoryContract = instance;\r\n\r\n                // Set web3, accounts, and contract to the state, and then proceed with an\r\n            } catch (error) {\r\n                // Catch any errors for any of the above operations.\r\n                alert(\r\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\r\n                );\r\n                console.error(error);\r\n            }\r\n        }\r\n        var createVote = async () => {//uses voteFactory to create Vote\r\n            if(factoryContract == ''){\r\n                return;\r\n            }\r\n            // Get the value from the contract to prove it worked.\r\n            await factoryContract.methods.createVote(0).send({\r\n                from: manager[0]\r\n            });\r\n        };\r\n        var getElectionAddress = async () => {//calls voteFactory method to get new Vote address\r\n            const response = await factoryContract.methods.getDeployedVotes().call();\r\n            addressOfVote = response[response.length - 1];\r\n        };\r\n        var initializeElection = async () => {//initializes vote contract\r\n            try {\r\n                // Get the contract instance.\r\n                const instance = await new web3.eth.Contract(\r\n                    VoteContract.abi,\r\n                    addressOfVote,\r\n                );\r\n                setVoteContract(instance);\r\n                vote = instance;\r\n            } catch (error) {\r\n                // Catch any errors for any of the above operations.\r\n                alert(\r\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\r\n                );\r\n                console.error(error);\r\n            }\r\n        }\r\n        var setUpElection = async() => {//call to vote contract to edit election\r\n            if (vote == '') {\r\n                console.log(\"voteContract dne\");\r\n                return;\r\n            }\r\n            await vote.methods.editElection(title, new Date(startDate).getTime(), new Date(endDate).getTime(), description, [0]);\r\n        };\r\n        var displayVote = async () => { // testing purposes\r\n            const summary = await vote.methods.currentElection().call();\r\n            console.log(summary);\r\n        };\r\n        await setupVoteFactory();\r\n        await createVote();\r\n        await getElectionAddress();\r\n        await initializeElection();\r\n        await setUpElection();\r\n        await displayVote();\r\n    };\r\n    var display = async () => { // testing purposes\r\n        console.log(voteContract)\r\n        const summary = await voteContract.methods.currentElection().call();\r\n        console.log(summary);\r\n    };\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <h1>New Election</h1>\r\n            <button onClick={display}></button>\r\n            <form onSubmit={onSubmit} noValidate autoComplete=\"off\">\r\n                <div>\r\n                    <m.TextField required fullWidth label=\"Election title\"\r\n                                 variant=\"outlined\"\r\n                                 value={title}\r\n                                 onChange={changeTitle}\r\n                    >\r\n\r\n                    </m.TextField>\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <m.TextField label=\"Start date\" type=\"date\"\r\n                                 variant=\"outlined\"\r\n                                 InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                 value={startDate}\r\n                                 onChange={changeStartDate}\r\n                    >\r\n\r\n                    </m.TextField>\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <m.TextField required label=\"End date\" type=\"date\"\r\n                                 variant=\"outlined\"\r\n                                 InputLabelProps={{\r\n                        shrink: true,\r\n                        }}\r\n                                 value={endDate}\r\n                                 onChange={changeEndDate}\r\n                    />\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <m.TextField required select label=\"Type of election\"\r\n                                 variant=\"outlined\"\r\n                                 value={electionType}\r\n                                 onChange={changeElectionType}>\r\n                        {electionTypes.map((option) => (\r\n                            <m.MenuItem key={option.value} value={option.value}>\r\n                                {option.label}\r\n                            </m.MenuItem>\r\n                        ))}\r\n                    </m.TextField>\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    {/*<m.TextField label=\"Select groups (someone help with the search and select multiple plz)\" variant=\"outlined\" /> */}\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <m.TextField required multiline fullWidth\r\n                                 label=\"Description\"\r\n                                 rows={4}\r\n                                 variant=\"outlined\"\r\n                                 value={description}\r\n                                 onChange={changeDescription}\r\n                    />\r\n                </div>\r\n\r\n                <br></br>\r\n                <div>\r\n                    <m.Button>Cancel</m.Button>\r\n                    <m.Button type=\"submit\" onSubmit={onSubmit}>Publish Election</m.Button>\r\n                </div>\r\n\r\n\r\n            </form>\r\n        </>\r\n    )\r\n}\r\nexport default NewElection;\r\n"]},"metadata":{},"sourceType":"module"}