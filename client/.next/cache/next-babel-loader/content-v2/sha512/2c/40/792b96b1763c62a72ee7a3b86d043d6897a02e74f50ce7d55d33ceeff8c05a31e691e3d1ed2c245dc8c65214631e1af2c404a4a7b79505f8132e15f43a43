{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\PROJECT_VOTE\\\\voting-at-mcgill\\\\client\\\\src\\\\pages\\\\newElection.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Header } from '../components/header';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport * as m from \"@material-ui/core\";\nimport getWeb3 from \"../getWeb3\";\n\nconst NewElection = () => {\n  // const [web3, setWeb3] = useState('');\n  // const [voteContract, setVoteContract] = useState('');\n  const electionTypes = [{\n    value: 'majority',\n    label: 'simple majority'\n  }, {\n    value: 'twoThirds',\n    label: 'two thirds'\n  }]; // var web3Instance;\n  // useEffect(() => {\n  //     async function initWeb3() {\n  //         web3Instance = await getWeb3();\n  //         setWeb3(web3Instance);\n  //     }\n  //     initWeb3();\n  // },[]);\n  //please follow the course for a better implementation @Jing\n\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n\n  const changeTitle = event => {\n    setTitle(event.target.value);\n  };\n\n  const {\n    0: startDate,\n    1: setStartDate\n  } = useState(0);\n\n  const changeStartDate = event => {\n    setStartDate(event.target.value);\n  };\n\n  const {\n    0: endDate,\n    1: setEndDate\n  } = useState(0);\n\n  const changeEndDate = event => {\n    setEndDate(event.target.value);\n  };\n\n  const {\n    0: electionType,\n    1: setElectionType\n  } = useState('majority');\n\n  const changeElectionType = event => {\n    setElectionType(event.target.value);\n  };\n\n  const {\n    0: description,\n    1: setDescription\n  } = useState('');\n\n  const changeDescription = event => {\n    setDescription(event.target.value);\n  };\n\n  var onSubmit = async event => {\n    event.preventDefault();\n    var web3;\n    var manager;\n    var factoryContract;\n    var voteContract;\n    var addressOfVote;\n\n    var initWeb3 = async () => {\n      //initializes web3\n      console.log('initializing web3');\n      web3 = await getWeb3();\n    };\n\n    var setupVoteFactory = async () => {\n      //initializes voteFactory\n      if (web3 == '') {\n        console.log('cringe');\n        return;\n      }\n\n      try {\n        console.log('setting up factory')[manager] = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        factoryContract = instance; // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    var createVote = async () => {\n      //uses voteFactory to create Vote\n      if (factoryContract == '') {\n        return;\n      } // Get the value from the contract to prove it worked.\n\n\n      await factoryContract.methods.createVote(0).send({\n        from: manager\n      });\n    };\n\n    var getElectionAddress = async () => {\n      //calls voteFactory method to get new Vote address\n      const response = await factoryContract.methods.getDeployedVotes().call();\n      addressOfVote = response[response.length - 1];\n    };\n\n    var initializeElection = async () => {\n      //initializes vote contract\n      try {\n        // Get the contract instance.\n        const instance = await new web3.eth.Contract(VoteContract.abi, addressOfVote);\n        setVoteContract(instance); // voteContract = instance;\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    var setUpElection = async () => {\n      //call to vote contract to edit election\n      if (!voteContract) {\n        console.log(\"voteContract dne\");\n        return;\n      }\n\n      await voteContract.methods.editElection(title, new Date(startDate).getTime(), new Date(endDate).getTime(), description, [0]).send({\n        from: manager\n      });\n    };\n\n    var displayVote = async () => {\n      // testing purposes\n      const summary = await voteContract.methods.currentElection().call();\n      console.log(summary);\n    };\n\n    await initWeb3();\n    await setupVoteFactory();\n    await createVote();\n    await getElectionAddress();\n    await initializeElection();\n    await setUpElection();\n    await displayVote();\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, \"New Election\"), __jsx(\"form\", {\n    onSubmit: onSubmit,\n    noValidate: true,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    required: true,\n    fullWidth: true,\n    label: \"Election title\",\n    variant: \"outlined\",\n    value: title,\n    onChange: changeTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    label: \"Start date\",\n    type: \"date\",\n    variant: \"outlined\",\n    InputLabelProps: {\n      shrink: true\n    },\n    value: startDate,\n    onChange: changeStartDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    required: true,\n    label: \"End date\",\n    type: \"date\",\n    variant: \"outlined\",\n    InputLabelProps: {\n      shrink: true\n    },\n    value: endDate,\n    onChange: changeEndDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    required: true,\n    select: true,\n    label: \"Type of election\",\n    variant: \"outlined\",\n    value: electionType,\n    onChange: changeElectionType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 21\n    }\n  }, electionTypes.map(option => __jsx(m.MenuItem, {\n    key: option.value,\n    value: option.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 29\n    }\n  }, option.label)))), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 17\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    required: true,\n    multiline: true,\n    fullWidth: true,\n    label: \"Description\",\n    rows: 4,\n    variant: \"outlined\",\n    value: description,\n    onChange: changeDescription,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }\n  }, __jsx(m.Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 21\n    }\n  }, \"Cancel\"), __jsx(m.Button, {\n    type: \"submit\",\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 21\n    }\n  }, \"Publish Election\"))));\n};\n\nexport default NewElection;","map":{"version":3,"sources":["C:/Users/foubroker/PROJECT_VOTE/voting-at-mcgill/client/src/pages/newElection.js"],"names":["React","useState","useEffect","Header","VoteFactoryContract","VoteContract","m","getWeb3","NewElection","electionTypes","value","label","title","setTitle","changeTitle","event","target","startDate","setStartDate","changeStartDate","endDate","setEndDate","changeEndDate","electionType","setElectionType","changeElectionType","description","setDescription","changeDescription","onSubmit","preventDefault","web3","manager","factoryContract","voteContract","addressOfVote","initWeb3","console","log","setupVoteFactory","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","createVote","methods","send","from","getElectionAddress","response","getDeployedVotes","call","length","initializeElection","setVoteContract","setUpElection","editElection","Date","getTime","displayVote","summary","currentElection","shrink","map","option"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Header } from '../components/header';\r\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\r\nimport VoteContract from \"../contracts/Vote.json\";\r\nimport * as m from \"@material-ui/core\";\r\nimport getWeb3 from \"../getWeb3\";\r\n\r\n\r\n\r\nconst NewElection = () => {\r\n\r\n    // const [web3, setWeb3] = useState('');\r\n    // const [voteContract, setVoteContract] = useState('');\r\n    const electionTypes = [\r\n        {\r\n            value: 'majority',\r\n            label: 'simple majority'\r\n        },\r\n        {\r\n            value: 'twoThirds',\r\n            label: 'two thirds'\r\n        }\r\n    ];\r\n\r\n    // var web3Instance;\r\n    // useEffect(() => {\r\n    //     async function initWeb3() {\r\n    //         web3Instance = await getWeb3();\r\n    //         setWeb3(web3Instance);\r\n    //     }\r\n    //     initWeb3();\r\n    // },[]);\r\n\r\n    //please follow the course for a better implementation @Jing\r\n    const [title, setTitle] = useState('');\r\n    const changeTitle = (event) => {\r\n        setTitle(event.target.value);\r\n    };\r\n    const [startDate, setStartDate] = useState(0);\r\n    const changeStartDate = (event) => {\r\n        setStartDate(event.target.value);\r\n    };\r\n    const [endDate, setEndDate] = useState(0);\r\n    const changeEndDate = (event) => {\r\n        setEndDate(event.target.value);\r\n    };\r\n    const [electionType, setElectionType] = useState('majority');\r\n    const changeElectionType = (event) => {\r\n        setElectionType(event.target.value);\r\n    };\r\n    const [description, setDescription] = useState('');\r\n    const changeDescription = (event) => {\r\n        setDescription(event.target.value);\r\n    };\r\n\r\n    var onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        var web3\r\n        var manager\r\n        var factoryContract\r\n        var voteContract;\r\n        var addressOfVote\r\n\r\n        var initWeb3 = async () => { //initializes web3\r\n            console.log('initializing web3')\r\n            web3 = await getWeb3();\r\n        }\r\n        var setupVoteFactory = async () => { //initializes voteFactory\r\n            if(web3 == '') {\r\n                console.log('cringe')\r\n                return;\r\n            }\r\n            try {\r\n                console.log('setting up factory')\r\n                [manager] = (await web3.eth.getAccounts());\r\n                // Get the contract instance.\r\n                const networkId = await web3.eth.net.getId();\r\n                const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n                const instance = new web3.eth.Contract(\r\n                    VoteFactoryContract.abi,\r\n                    deployedNetwork && deployedNetwork.address,\r\n                );\r\n                factoryContract = instance;\r\n\r\n                // Set web3, accounts, and contract to the state, and then proceed with an\r\n            } catch (error) {\r\n                // Catch any errors for any of the above operations.\r\n                alert(\r\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\r\n                );\r\n                console.error(error);\r\n            }\r\n        }\r\n        var createVote = async () => {//uses voteFactory to create Vote\r\n            if(factoryContract == ''){\r\n                return;\r\n            }\r\n            // Get the value from the contract to prove it worked.\r\n            await factoryContract.methods.createVote(0).send({\r\n                from: manager\r\n            });\r\n        };\r\n        var getElectionAddress = async () => {//calls voteFactory method to get new Vote address\r\n            const response = await factoryContract.methods.getDeployedVotes().call();\r\n            addressOfVote = response[response.length - 1];\r\n        };\r\n        var initializeElection = async () => {//initializes vote contract\r\n            try {\r\n                // Get the contract instance.\r\n                const instance = await new web3.eth.Contract(\r\n                    VoteContract.abi,\r\n                    addressOfVote,\r\n                );\r\n                setVoteContract(instance);\r\n                // voteContract = instance;\r\n            } catch (error) {\r\n                // Catch any errors for any of the above operations.\r\n                alert(\r\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\r\n                );\r\n                console.error(error);\r\n            }\r\n        }\r\n        var setUpElection = async() => {//call to vote contract to edit election\r\n            if (!voteContract) {\r\n                console.log(\"voteContract dne\");\r\n                return;\r\n            }\r\n            await voteContract.methods\r\n                .editElection(title, new Date(startDate).getTime(), new Date(endDate).getTime(), description, [0])\r\n                .send({\r\n                    from: manager\r\n                })\r\n        };\r\n\r\n        var displayVote = async () => { // testing purposes\r\n            const summary = await voteContract.methods.currentElection().call();\r\n            console.log(summary);\r\n        };\r\n        await initWeb3();\r\n        await setupVoteFactory();\r\n        await createVote();\r\n        await getElectionAddress();\r\n        await initializeElection();\r\n        await setUpElection();\r\n        await displayVote();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <h1>New Election</h1>\r\n            \r\n            <form onSubmit={onSubmit} noValidate autoComplete=\"off\">\r\n                <div>\r\n                    <m.TextField required fullWidth label=\"Election title\"\r\n                                 variant=\"outlined\"\r\n                                 value={title}\r\n                                 onChange={changeTitle}\r\n                    >\r\n\r\n                    </m.TextField>\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <m.TextField label=\"Start date\" type=\"date\"\r\n                                 variant=\"outlined\"\r\n                                 InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                 value={startDate}\r\n                                 onChange={changeStartDate}\r\n                    >\r\n\r\n                    </m.TextField>\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <m.TextField required label=\"End date\" type=\"date\"\r\n                                 variant=\"outlined\"\r\n                                 InputLabelProps={{\r\n                        shrink: true,\r\n                        }}\r\n                                 value={endDate}\r\n                                 onChange={changeEndDate}\r\n                    />\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <m.TextField required select label=\"Type of election\"\r\n                                 variant=\"outlined\"\r\n                                 value={electionType}\r\n                                 onChange={changeElectionType}>\r\n                        {electionTypes.map((option) => (\r\n                            <m.MenuItem key={option.value} value={option.value}>\r\n                                {option.label}\r\n                            </m.MenuItem>\r\n                        ))}\r\n                    </m.TextField>\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    {/*<m.TextField label=\"Select groups (someone help with the search and select multiple plz)\" variant=\"outlined\" /> */}\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <m.TextField required multiline fullWidth\r\n                                 label=\"Description\"\r\n                                 rows={4}\r\n                                 variant=\"outlined\"\r\n                                 value={description}\r\n                                 onChange={changeDescription}\r\n                    />\r\n                </div>\r\n\r\n                <br></br>\r\n                <div>\r\n                    <m.Button>Cancel</m.Button>\r\n                    <m.Button type=\"submit\" onSubmit={onSubmit}>Publish Election</m.Button>\r\n                </div>\r\n\r\n\r\n            </form>\r\n        </>\r\n    )\r\n}\r\nexport default NewElection;\r\n"]},"metadata":{},"sourceType":"module"}