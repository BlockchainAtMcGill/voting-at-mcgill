{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes';\nimport 'semantic-ui-css/semantic.min.css';\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width: '80%'\n  }\n});\n\nconst JoinGroup = () => {\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: votesAddresses,\n    1: setVotesAddresses\n  } = useState('');\n  const {\n    0: contract,\n    1: setContract\n  } = useState('');\n  const {\n    0: renderedAddresses,\n    1: renderAddresses\n  } = useState([]);\n  useEffect(() => {\n    // get web3\n    async function initWeb3() {\n      console.log('initializing web3');\n      const web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, []);\n  useEffect(() => {\n    // get Factory contract\n    async function setup() {\n      if (web3 == \"\") {\n        console.log('unable to get factory');\n        return;\n      }\n\n      try {\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        setContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setup(); // console.log('ok')\n  }, [web3]);\n  useEffect(() => {\n    //display available votes addresses\n    var displayVotes = async () => {\n      if (contract == '') {\n        return;\n      }\n\n      const response = await contract.methods.getDeployedVotes().call(); // Update state with the result.\n\n      setVotesAddresses(response);\n    };\n\n    displayVotes();\n  }, [contract]);\n\n  var displayInfo = async address => {\n    if (votesAddresses == '') {\n      return;\n    }\n\n    try {\n      // Get the contract instance.\n      const instance = new web3.eth.Contract(VoteContract.abi, address);\n      return await instance.methods.currentElection().call();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    //render votes\n    var renderVotes = async () => {\n      if (!votesAddresses) {\n        return;\n      }\n\n      await votesAddresses.forEach(address => {\n        displayInfo(address).then(newAddress => {\n          renderAddresses([...renderedAddresses, newAddress]);\n        });\n      });\n    };\n\n    renderVotes();\n  }, [votesAddresses]);\n  useEffect(() => {\n    if (renderedAddresses != []) {\n      console.log(renderedAddresses);\n    }\n  }, [renderedAddresses]); // var web3Instance;\n  // var factoryContract;\n  // const [web3, setWeb3] = useState('');\n  // const [groupsID, setGroupsID] = useState([]);\n  // const [contract, setContract] = useState('');\n  // const [renderedGroups, renderGroups] = useState([]);\n  // // Initialize Web3\n  // useEffect(() => {\n  //     async function initWeb3() {\n  //         web3Instance = await getWeb3();\n  //         setWeb3(web3Instance);\n  //     }\n  //     initWeb3();\n  // }, []);\n  // // Initialize VoteFactory Contract\n  // useEffect(() => {\n  //     async function setupVoteFactory() {\n  //         if (web3 == '') {\n  //             return;\n  //         }\n  //         try {\n  //             const networkId = await web3.eth.net.getId();\n  //             const deployedNetwork = VoteFactoryContract.networks[networkId];\n  //             const instance = new web3.eth.Contract(\n  //                 VoteFactoryContract.abi,\n  //                 deployedNetwork && deployedNetwork.address\n  //             );\n  //             setContract(instance);\n  //         } catch (error) {\n  //             alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n  //             console.error(error);\n  //         }\n  //     }\n  //     setupVoteFactory();\n  // }, [web3]);\n  // // Display all Groups\n  // useEffect(() => {\n  //     var displayGroups = async () => {\n  //         if (contract == '') {\n  //             return;\n  //         }\n  //         const response = await contract.methods.getDeployedVotes().call();\n  //         setGroupsID(response);\n  //     };\n  //     displayGroups();\n  // }, [contract]);\n  // var displayInfo = async (ident) => {\n  //     if (groupsID == '') {\n  //         return;\n  //     }\n  //     try {\n  //         const instance = new web3.eth.Contract(\n  //             VoteFactoryContract.abi, \n  //             ident\n  //         );\n  //         return (await instance.methods.currentElection().call());\n  //     } catch (error) {\n  //         console.error(error);\n  //     }\n  // };\n  // // Display the information of a Group\n  // useEffect(() => {\n  //     var renderGs = async () => {\n  //         if (!groupsID) {\n  //             return;\n  //         }\n  //         await groupsID.forEach(ident => {\n  //             displayInfo(ident).then(newGroup => {\n  //                 renderGroups([...renderedGroups, newGroup]);\n  //             });\n  //         });\n  //     }\n  //     renderGs();\n  // }, [groupsID]);\n  // useEffect(() => {\n  //     if (renderedGroups != []) {\n  //         console.log(renderedGroups);\n  //     }\n  // }, [renderedGroups]);\n\n  return __jsx(React.Fragment, null);\n  /*\n     //return <a>Hello World</a>;\n     return groupList ? groupList.map((group) => \n         //<Link className=\"ui button\" route ={`/elections/vote/${vote}`} key={index}>\n         <div className=\"ui link card\" style={{width:\"80%\", color: '#f00000'}}>\n         <div className=\"card\">\n         <div className=\"content\">\n             <div className=\"header\">Group</div>\n             <div className=\"meta\">\n                 <a>{group.groupName}</a>\n             </div>\n             <div className=\"description\">\n                 {group.description}\n             </div>\n         </div>\n             <div className=\"extra content\">\n                 <span>\n                     <i className=\"user icon\"></i>\n                     {group.getMembers.size()}\n                 </span>\n             </div>\n         </div>\n         </div>\n   ) : <></> */\n};\n\nexport default JoinGroup;","map":{"version":3,"sources":["/home/wen_wong/voting-at-mcgill/client/src/pages/joinGroup.js"],"names":["React","useState","useEffect","makeStyles","VoteFactoryContract","VoteContract","getWeb3","Header","Link","require","useStyles","card","width","JoinGroup","web3","setWeb3","votesAddresses","setVotesAddresses","contract","setContract","renderedAddresses","renderAddresses","initWeb3","console","log","web3Instance","setup","networkId","eth","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","displayVotes","response","methods","getDeployedVotes","call","displayInfo","currentElection","renderVotes","forEach","then","newAddress"],"mappings":"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AAI;AACtC5B,UAAAA,eAAe,CAAC,CAAC,GAAGD,iBAAJ,EAAuB6B,UAAvB,CAAD,CAAf;AACH,SAFC;AAGH,OAJK,CAAN;AAKD,KATH;;AAUAH,IAAAA,WAAW;AACZ,GAZQ,EAYP,CAAC9B,cAAD,CAZO,CAAT;AAcAd,EAAAA,SAAS,CAAC,MAAK;AACb,QAAGkB,iBAAiB,IAAI,EAAxB,EAA4B;AAC1BG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,iBAAZ;AACD;AACF,GAJQ,EAIP,CAACA,iBAAD,CAJO,CAAT,CApFsB,CAyFpB;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAAO,2BAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,CAhND;;AAkNA,eAAeP,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes'\nimport 'semantic-ui-css/semantic.min.css';\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width:'80%'\n  }\n});\n\nconst JoinGroup = () => {\n    const [web3, setWeb3] = useState('');\n  const [votesAddresses, setVotesAddresses] = useState('');\n  const [contract, setContract] = useState('');\n  const [renderedAddresses, renderAddresses] = useState([]);\n\n  useEffect(() => {// get web3\n    async function initWeb3() {\n      console.log('initializing web3');\n      const web3Instance = await getWeb3();\n      setWeb3(web3Instance)\n    }\n    initWeb3();\n  },[]);\n\n  useEffect(() => {// get Factory contract\n    async function setup() {\n      if(web3 == \"\") {\n        console.log('unable to get factory')\n        return;\n      }\n      try {\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n          VoteFactoryContract.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n        setContract(instance);\n    \n        // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }\n    }\n      setup();\n      // console.log('ok')\n  },[web3]);\n\n  useEffect(()=> {//display available votes addresses\n    var displayVotes = async () => {\n      if(contract == ''){\n        return;\n      }\n      const response = await contract.methods.getDeployedVotes().call();\n      // Update state with the result.\n      setVotesAddresses(response);\n    };\n    displayVotes();\n  },[contract]);\n\n  var displayInfo = async (address) => { \n    if(votesAddresses == '') {\n      return;\n    }\n    try {// Get the contract instance.\n      const instance = new web3.eth.Contract(\n        VoteContract.abi,\n        address\n      );\n      return (await instance.methods.currentElection().call());\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  useEffect(()=> {//render votes\n    var renderVotes = async () => {\n        if (!votesAddresses){\n          return;\n        }\n        await votesAddresses.forEach(address => {\n            displayInfo(address).then(newAddress => {\n              renderAddresses([...renderedAddresses, newAddress])\n          })\n        })\n      }\n    renderVotes();\n  },[votesAddresses]);\n\n  useEffect(()=> {\n    if(renderedAddresses != []) {\n      console.log(renderedAddresses)\n    }\n  },[renderedAddresses])\n    // var web3Instance;\n    // var factoryContract;\n\n    // const [web3, setWeb3] = useState('');\n    // const [groupsID, setGroupsID] = useState([]);\n    // const [contract, setContract] = useState('');\n    // const [renderedGroups, renderGroups] = useState([]);\n\n    // // Initialize Web3\n    // useEffect(() => {\n\n    //     async function initWeb3() {\n    //         web3Instance = await getWeb3();\n    //         setWeb3(web3Instance);\n    //     }\n    //     initWeb3();\n    // }, []);\n\n    // // Initialize VoteFactory Contract\n    // useEffect(() => {\n    //     async function setupVoteFactory() {\n    //         if (web3 == '') {\n    //             return;\n    //         }\n\n    //         try {\n    //             const networkId = await web3.eth.net.getId();\n    //             const deployedNetwork = VoteFactoryContract.networks[networkId];\n    //             const instance = new web3.eth.Contract(\n    //                 VoteFactoryContract.abi,\n    //                 deployedNetwork && deployedNetwork.address\n    //             );\n    //             setContract(instance);\n    //         } catch (error) {\n    //             alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n    //             console.error(error);\n    //         }\n    //     }\n\n    //     setupVoteFactory();\n    // }, [web3]);\n\n    // // Display all Groups\n    // useEffect(() => {\n    //     var displayGroups = async () => {\n    //         if (contract == '') {\n    //             return;\n    //         }\n    //         const response = await contract.methods.getDeployedVotes().call();\n    //         setGroupsID(response);\n    //     };\n\n    //     displayGroups();\n    // }, [contract]);\n\n    // var displayInfo = async (ident) => {\n    //     if (groupsID == '') {\n    //         return;\n    //     }\n\n    //     try {\n    //         const instance = new web3.eth.Contract(\n    //             VoteFactoryContract.abi, \n    //             ident\n    //         );\n\n    //         return (await instance.methods.currentElection().call());\n    //     } catch (error) {\n    //         console.error(error);\n    //     }\n    // };\n\n    // // Display the information of a Group\n    // useEffect(() => {\n    //     var renderGs = async () => {\n    //         if (!groupsID) {\n    //             return;\n    //         }\n\n    //         await groupsID.forEach(ident => {\n    //             displayInfo(ident).then(newGroup => {\n    //                 renderGroups([...renderedGroups, newGroup]);\n    //             });\n    //         });\n    //     }\n    //     renderGs();\n    // }, [groupsID]);\n\n    // useEffect(() => {\n    //     if (renderedGroups != []) {\n    //         console.log(renderedGroups);\n    //     }\n    // }, [renderedGroups]);\n\n    return <></>;\n /*\n    //return <a>Hello World</a>;\n    return groupList ? groupList.map((group) => \n        //<Link className=\"ui button\" route ={`/elections/vote/${vote}`} key={index}>\n        <div className=\"ui link card\" style={{width:\"80%\", color: '#f00000'}}>\n        <div className=\"card\">\n        <div className=\"content\">\n            <div className=\"header\">Group</div>\n            <div className=\"meta\">\n                <a>{group.groupName}</a>\n            </div>\n            <div className=\"description\">\n                {group.description}\n            </div>\n        </div>\n            <div className=\"extra content\">\n                <span>\n                    <i className=\"user icon\"></i>\n                    {group.getMembers.size()}\n                </span>\n            </div>\n        </div>\n        </div>\n  ) : <></> */\n};\n\nexport default JoinGroup;"]},"metadata":{},"sourceType":"module"}