{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from \"web3\";\n\nvar getWeb3 = function getWeb3() {\n  return new Promise(function (resolve, reject) {\n    var foo = null;\n\n    if (true) {\n      foo = window.localStorage.getItem(\"foo\");\n    } // Wait for loading completion to avoid race conditions with web3 injection timing.\n\n\n    window.addEventListener(\"load\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var web3, _web, provider, _web2;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context.next = 13;\n                break;\n              }\n\n              web3 = new Web3(window.ethereum);\n              _context.prev = 2;\n              _context.next = 5;\n              return window.ethereum.enable();\n\n            case 5:\n              // Acccounts now exposed\n              resolve(web3);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](2);\n              reject(_context.t0);\n\n            case 11:\n              _context.next = 14;\n              break;\n\n            case 13:\n              // Legacy dapp browsers...\n              if (window.web3) {\n                // Use Mist/MetaMask's provider.\n                _web = window.web3;\n                console.log(\"Injected web3 detected.\");\n                resolve(_web);\n              } // Fallback to localhost; use dev console port by default...\n              else {\n                  provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n                  _web2 = new Web3(provider);\n                  console.log(\"No web3 instance injected, using Local web3.\");\n                  resolve(_web2);\n                }\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 8]]);\n    })));\n  });\n};\n\nexport default getWeb3;","map":{"version":3,"sources":["C:/Users/foubroker/PROJECT_VOTE/voting-at-mcgill/client/src/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","foo","window","localStorage","getItem","addEventListener","ethereum","web3","enable","console","log","provider","providers","HttpProvider"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,SACd,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B,QAAIC,GAAG,GAAG,IAAV;;AACA,cAAmC;AACjCA,MAAAA,GAAG,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,KAA5B,CAAN;AACD,KAJ8B,CAK/B;;;AACAF,IAAAA,MAAM,CAACG,gBAAP,CAAwB,MAAxB,wEAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE1BH,MAAM,CAACI,QAFmB;AAAA;AAAA;AAAA;;AAGtBC,cAAAA,IAHsB,GAGf,IAAIX,IAAJ,CAASM,MAAM,CAACI,QAAhB,CAHe;AAAA;AAAA;AAAA,qBAMpBJ,MAAM,CAACI,QAAP,CAAgBE,MAAhB,EANoB;;AAAA;AAO1B;AACAT,cAAAA,OAAO,CAACQ,IAAD,CAAP;AAR0B;AAAA;;AAAA;AAAA;AAAA;AAU1BP,cAAAA,MAAM,aAAN;;AAV0B;AAAA;AAAA;;AAAA;AAa9B;AACK,kBAAIE,MAAM,CAACK,IAAX,EAAiB;AACpB;AACMA,gBAAAA,IAFc,GAEPL,MAAM,CAACK,IAFA;AAGpBE,gBAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAX,gBAAAA,OAAO,CAACQ,IAAD,CAAP;AACD,eALI,CAML;AANK,mBAOA;AACGI,kBAAAA,QADH,GACc,IAAIf,IAAI,CAACgB,SAAL,CAAeC,YAAnB,CACf,uBADe,CADd;AAIGN,kBAAAA,KAJH,GAIU,IAAIX,IAAJ,CAASe,QAAT,CAJV;AAKHF,kBAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAX,kBAAAA,OAAO,CAACQ,KAAD,CAAP;AACD;;AA5B6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;AA8BD,GApCD,CADc;AAAA,CAAhB;;AAuCA,eAAeV,OAAf","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    let foo = null;\r\n    if (typeof window !== \"undefined\") {\r\n      foo = window.localStorage.getItem(\"foo\");\r\n    }\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n"]},"metadata":{},"sourceType":"module"}