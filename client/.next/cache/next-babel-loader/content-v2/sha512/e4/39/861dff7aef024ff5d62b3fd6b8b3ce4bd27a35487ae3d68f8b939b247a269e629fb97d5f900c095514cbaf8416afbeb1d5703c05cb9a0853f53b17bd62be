{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\PROJECT_VOTE\\\\voting-at-mcgill\\\\client\\\\src\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid'; // CommonJS\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width: '80%'\n  }\n});\n\nfunction App() {\n  _s();\n\n  const classes = useStyles();\n  const {\n    0: votesAddresses,\n    1: setVotesAddresses\n  } = useState('');\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: accounts,\n    1: setAccounts\n  } = useState('');\n  const {\n    0: contract,\n    1: setContract\n  } = useState('');\n  const {\n    0: voteContract,\n    1: setVoteContract\n  } = useState('');\n  var web3Instance;\n  useEffect(() => {\n    // get web3\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, []);\n  useEffect(() => {\n    // get Factory contract\n    async function setup() {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        setAccounts(await web3.eth.getAccounts()); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        setAccounts(await web3.eth.getAccounts());\n        setContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setup();\n  }, [web3]);\n  useEffect(() => {\n    //just get Vote contract\n    async function setup() {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        // Get the contract instance.\n        const instance = new web3.eth.Contract(VoteContract.abi, votesAddresses[0]);\n        setVoteContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setup();\n  }, [contract, votesAddresses]);\n  useEffect(() => {\n    //testing code for factory contract\n    var createVote = async () => {\n      if (contract == '') {\n        return;\n      } // Get the value from the contract to prove it worked.\n      // uncomment to create votes, note that second await call wont run if first is run.\n\n\n      await contract.methods.createVote(0).send({\n        from: accounts[0]\n      });\n    };\n\n    var displayVotes = async () => {\n      if (contract == '') {\n        return;\n      }\n\n      const response = await contract.methods.getDeployedVotes().call(); // Update state with the result.\n\n      console.log(\"first vote is \" + response[0]);\n      setVotesAddresses(response);\n    }; // createVote();\n\n\n    displayVotes();\n  }, [contract]);\n\n  async function handleClick(e) {\n    e.preventDefault();\n    console.log('The link was clicked.');\n    await voteContract.methods.editElection(\"title\", 1, 2, \"description\", [1, 2, 3]).send({\n      from: accounts[0]\n    });\n    const summary = await voteContract.methods.currentElection().call();\n    console.log(summary);\n    console.log(\"method was sent\");\n  }\n\n  function displayVoteList() {\n    if (votesAddresses == \"\") {\n      return \"waiting for votes to display\";\n    }\n\n    return votesAddresses.map(address => __jsx(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, __jsx(Card, {\n      variant: \"outlined\",\n      key: address,\n      className: classes.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, __jsx(CardContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }, __jsx(Grid, {\n      xs: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 25\n      }\n    }, address)), __jsx(Grid, {\n      xs: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }, __jsx(Button, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 25\n      }\n    }, \"Access\"))))));\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, displayVoteList())));\n}\n\n_s(App, \"OLa/w32w2xBblAnJFP4CdzASwCs=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/foubroker/PROJECT_VOTE/voting-at-mcgill/client/src/pages/index.js"],"names":["React","useState","useEffect","makeStyles","VoteFactoryContract","VoteContract","getWeb3","Header","Card","CardContent","Button","Grid","require","useStyles","card","width","App","classes","votesAddresses","setVotesAddresses","web3","setWeb3","accounts","setAccounts","contract","setContract","voteContract","setVoteContract","web3Instance","initWeb3","setup","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","console","createVote","methods","send","from","displayVotes","response","getDeployedVotes","call","log","handleClick","e","preventDefault","editElection","summary","currentElection","displayVoteList","map"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,mBAAP,MAAgC,+BAAhC;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB,C,CACA;;AACAC,OAAO,CAAC,6BAAD,CAAP;;AAEA,MAAMC,SAAS,GAAGV,UAAU,CAAC;AAC3BW,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAC;AADF;AADqB,CAAD,CAA5B;;AAMA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,OAAO,GAAGJ,SAAS,EAAzB;AACA,QAAM;AAAA,OAACK,cAAD;AAAA,OAAiBC;AAAjB,MAAsClB,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM;AAAA,OAACmB,IAAD;AAAA,OAAOC;AAAP,MAAkBpB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAA,OAACqB,QAAD;AAAA,OAAWC;AAAX,MAA0BtB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACuB,QAAD;AAAA,OAAWC;AAAX,MAA0BxB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACyB,YAAD;AAAA,OAAeC;AAAf,MAAkC1B,QAAQ,CAAC,EAAD,CAAhD;AACA,MAAI2B,YAAJ;AACA1B,EAAAA,SAAS,CAAC,MAAM;AAAC;AACf,mBAAe2B,QAAf,GAA0B;AACxBD,MAAAA,YAAY,GAAG,MAAMtB,OAAO,EAA5B;AACAe,MAAAA,OAAO,CAACO,YAAD,CAAP;AACD;;AACDC,IAAAA,QAAQ;AACT,GANQ,EAMP,EANO,CAAT;AAQA3B,EAAAA,SAAS,CAAC,MAAM;AAAC;AACf,mBAAe4B,KAAf,GAAuB;AACrB,UAAGV,IAAI,IAAI,EAAX,EAAe;AACb;AACD;;AACD,UAAI;AACFG,QAAAA,WAAW,CAAC,MAAMH,IAAI,CAACW,GAAL,CAASC,WAAT,EAAP,CAAX,CADE,CAEF;;AACA,cAAMC,SAAS,GAAG,MAAMb,IAAI,CAACW,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,cAAMC,eAAe,GAAGhC,mBAAmB,CAACiC,QAApB,CAA6BJ,SAA7B,CAAxB;AACA,cAAMK,QAAQ,GAAG,IAAIlB,IAAI,CAACW,GAAL,CAASQ,QAAb,CACfnC,mBAAmB,CAACoC,GADL,EAEfJ,eAAe,IAAIA,eAAe,CAACK,OAFpB,CAAjB;AAIAlB,QAAAA,WAAW,CAAC,MAAMH,IAAI,CAACW,GAAL,CAASC,WAAT,EAAP,CAAX;AACAP,QAAAA,WAAW,CAACa,QAAD,CAAX,CAVE,CAYF;AACD,OAbD,CAaE,OAAOI,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,CACF,wEADE,CAAL;AAGAC,QAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF;;AACCZ,IAAAA,KAAK;AACR,GA3BQ,EA2BP,CAACV,IAAD,CA3BO,CAAT;AA6BAlB,EAAAA,SAAS,CAAC,MAAM;AAAC;AACf,mBAAe4B,KAAf,GAAuB;AACrB,UAAGV,IAAI,IAAI,EAAX,EAAe;AACb;AACD;;AACD,UAAI;AACF;AACA,cAAMkB,QAAQ,GAAG,IAAIlB,IAAI,CAACW,GAAL,CAASQ,QAAb,CACflC,YAAY,CAACmC,GADE,EAEftB,cAAc,CAAC,CAAD,CAFC,CAAjB;AAIAS,QAAAA,eAAe,CAACW,QAAD,CAAf,CANE,CAOF;AACD,OARD,CAQE,OAAOI,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,CACF,wEADE,CAAL;AAGAC,QAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF;;AACCZ,IAAAA,KAAK;AACR,GAtBQ,EAsBP,CAACN,QAAD,EAAUN,cAAV,CAtBO,CAAT;AAwBAhB,EAAAA,SAAS,CAAC,MAAK;AAAC;AACd,QAAI2C,UAAU,GAAG,YAAY;AAC3B,UAAGrB,QAAQ,IAAI,EAAf,EAAkB;AAChB;AACD,OAH0B,CAI3B;AACA;;;AACA,YAAMA,QAAQ,CAACsB,OAAT,CAAiBD,UAAjB,CAA4B,CAA5B,EAA+BE,IAA/B,CAAoC;AACxCC,QAAAA,IAAI,EAAE1B,QAAQ,CAAC,CAAD;AAD0B,OAApC,CAAN;AAGD,KATD;;AAUA,QAAI2B,YAAY,GAAG,YAAY;AAC7B,UAAGzB,QAAQ,IAAI,EAAf,EAAkB;AAChB;AACD;;AACD,YAAM0B,QAAQ,GAAG,MAAM1B,QAAQ,CAACsB,OAAT,CAAiBK,gBAAjB,GAAoCC,IAApC,EAAvB,CAJ6B,CAK7B;;AACAR,MAAAA,OAAO,CAACS,GAAR,CAAY,mBAAmBH,QAAQ,CAAC,CAAD,CAAvC;AACA/B,MAAAA,iBAAiB,CAAC+B,QAAD,CAAjB;AACD,KARD,CAXa,CAoBb;;;AACAD,IAAAA,YAAY;AACb,GAtBQ,EAsBP,CAACzB,QAAD,CAtBO,CAAT;;AAwBA,iBAAe8B,WAAf,CAA2BC,CAA3B,EAA8B;AAC5BA,IAAAA,CAAC,CAACC,cAAF;AACAZ,IAAAA,OAAO,CAACS,GAAR,CAAY,uBAAZ;AACA,UAAM3B,YAAY,CAACoB,OAAb,CAAqBW,YAArB,CAAkC,OAAlC,EAA2C,CAA3C,EAA8C,CAA9C,EAAiD,aAAjD,EAAgE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAhE,EAAyEV,IAAzE,CAA8E;AAClFC,MAAAA,IAAI,EAAE1B,QAAQ,CAAC,CAAD;AADoE,KAA9E,CAAN;AAGA,UAAMoC,OAAO,GAAG,MAAMhC,YAAY,CAACoB,OAAb,CAAqBa,eAArB,GAAuCP,IAAvC,EAAtB;AACAR,IAAAA,OAAO,CAACS,GAAR,CAAYK,OAAZ;AACAd,IAAAA,OAAO,CAACS,GAAR,CAAY,iBAAZ;AACD;;AAED,WAASO,eAAT,GAA2B;AACzB,QAAG1C,cAAc,IAAI,EAArB,EAAwB;AACtB,aAAO,8BAAP;AACD;;AACD,WAAOA,cAAc,CAAC2C,GAAf,CAAmBpB,OAAO,IAC/B,MAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,OAAO,EAAC,UAAd;AAAyB,MAAA,GAAG,EAAEA,OAA9B;AAAuC,MAAA,SAAS,EAAGxB,OAAO,CAACH,IAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,MAAC,IAAD;AAAM,MAAA,EAAE,EAAG,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO2B,OAAP,CAAd,CADA,EAEA,MAAC,IAAD;AAAM,MAAA,EAAE,EAAG,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAc,MAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAd,CAFA,CADF,CADF,CADK,CAAP;AAWD;;AAED,SACE,4BACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAME;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,OAAO,EAAEa,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOM,eAAe,EAAtB,CAFF,CANF,CADF;AAcD;;GAvIQ5C,G;UACSH,S;;;KADTG,G;AAyIT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\r\nimport VoteContract from \"../contracts/Vote.json\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport { Header } from '../components/header';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\n// CommonJS\r\nrequire(\"regenerator-runtime/runtime\");\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    width:'80%'\r\n  }\r\n});\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [votesAddresses, setVotesAddresses] = useState('');\r\n  const [web3, setWeb3] = useState('');\r\n  const [accounts, setAccounts] = useState('');\r\n  const [contract, setContract] = useState('');\r\n  const [voteContract, setVoteContract] = useState('');\r\n  var web3Instance;\r\n  useEffect(() => {// get web3\r\n    async function initWeb3() {\r\n      web3Instance = await getWeb3()\r\n      setWeb3(web3Instance);\r\n    }\r\n    initWeb3();\r\n  },[]);\r\n\r\n  useEffect(() => {// get Factory contract\r\n    async function setup() {\r\n      if(web3 == '') {\r\n        return;\r\n      }\r\n      try {\r\n        setAccounts(await web3.eth.getAccounts());\r\n        // Get the contract instance.\r\n        const networkId = await web3.eth.net.getId();\r\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n        const instance = new web3.eth.Contract(\r\n          VoteFactoryContract.abi,\r\n          deployedNetwork && deployedNetwork.address,\r\n        );\r\n        setAccounts(await web3.eth.getAccounts());\r\n        setContract(instance);\r\n    \r\n        // Set web3, accounts, and contract to the state, and then proceed with an\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    }\r\n      setup();\r\n  },[web3]);\r\n\r\n  useEffect(() => {//just get Vote contract\r\n    async function setup() {\r\n      if(web3 == '') {\r\n        return;\r\n      }\r\n      try {\r\n        // Get the contract instance.\r\n        const instance = new web3.eth.Contract(\r\n          VoteContract.abi,\r\n          votesAddresses[0],\r\n        );\r\n        setVoteContract(instance);\r\n        // Set web3, accounts, and contract to the state, and then proceed with an\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    }\r\n      setup();\r\n  },[contract,votesAddresses]);\r\n\r\n  useEffect(()=> {//testing code for factory contract\r\n    var createVote = async () => {\r\n      if(contract == ''){\r\n        return;\r\n      }\r\n      // Get the value from the contract to prove it worked.\r\n      // uncomment to create votes, note that second await call wont run if first is run.\r\n      await contract.methods.createVote(0).send({\r\n        from: accounts[0]\r\n      });\r\n    };\r\n    var displayVotes = async () => {\r\n      if(contract == ''){\r\n        return;\r\n      }\r\n      const response = await contract.methods.getDeployedVotes().call();\r\n      // Update state with the result.\r\n      console.log(\"first vote is \" + response[0]);\r\n      setVotesAddresses(response);\r\n    };\r\n    // createVote();\r\n    displayVotes();\r\n  },[contract]);\r\n\r\n  async function handleClick(e) {\r\n    e.preventDefault();\r\n    console.log('The link was clicked.');\r\n    await voteContract.methods.editElection(\"title\", 1, 2, \"description\", [1,2,3]).send({\r\n      from: accounts[0]\r\n    });\r\n    const summary = await voteContract.methods.currentElection().call();\r\n    console.log(summary);\r\n    console.log(\"method was sent\")\r\n  }\r\n\r\n  function displayVoteList() {\r\n    if(votesAddresses == \"\"){\r\n      return \"waiting for votes to display\"\r\n    }\r\n    return votesAddresses.map(address => \r\n      <Grid container>\r\n        <Card variant=\"outlined\" key={address} className ={classes.card}> \r\n          <CardContent>\r\n          <Grid xs ={8}><span>{address}</span></Grid>\r\n          <Grid xs ={4}><Button size=\"small\">Access</Button></Grid>\r\n          </CardContent>\r\n          \r\n        </Card>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  return( \r\n    <>\r\n      <Header></Header>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <div className=\"App\">\r\n        <button onClick={handleClick}></button>\r\n        <div>{ displayVoteList() }</div>\r\n        \r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}