{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\Desktop\\\\voting-at-mcgill\\\\client\\\\src\\\\pages\\\\loginUser.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Header } from '../components/header';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport { Form, Loader } from \"semantic-ui-react\";\nimport getWeb3 from \"../getWeb3\";\nimport Router from \"next/router\";\nimport 'semantic-ui-css/semantic.min.css';\nvar adminTitle = {\n  color: \"red\",\n  marginBottom: \"5%\",\n  fontSize: \"3em\",\n  textAlign: \"center\"\n};\nvar adminFields = {\n  margin: \"auto 5% auto 5%\"\n};\n/**\r\n * Login User Page - a Page where user can see all existing group and/or join a new group\r\n * DISCLAMER - majority of the code is based on vote.js written by Simon Wang\r\n * \r\n * @author Brandon Wong\r\n * @author Simon Wang\r\n */\n\nvar LoginUser = function LoginUser() {\n  _s();\n\n  var web3Instance;\n\n  var _useState = useState(''),\n      web3 = _useState[0],\n      setWeb3 = _useState[1];\n\n  var _useState2 = useState(true),\n      Load = _useState2[0],\n      setLoad = _useState2[1];\n\n  var _useState3 = useState(false),\n      userLogin = _useState3[0],\n      setUserLogin = _useState3[1];\n\n  var _useState4 = useState(''),\n      studentID = _useState4[0],\n      setStudentID = _useState4[1];\n\n  var _useState5 = useState(''),\n      password = _useState5[0],\n      setPassword = _useState5[1]; // Initialize Web3\n\n\n  useEffect(function () {\n    function initWeb3() {\n      return _initWeb.apply(this, arguments);\n    }\n\n    function _initWeb() {\n      _initWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getWeb3();\n\n              case 2:\n                web3Instance = _context.sent;\n                setWeb3(web3Instance);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _initWeb.apply(this, arguments);\n    }\n\n    initWeb3();\n  }, [Load]); // Login implementation\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(event) {\n      var factoryContract, user, setupVoteFactory, logInUser, displayUser;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              event.preventDefault();\n\n              // Initializes VoteFactory Contract\n              setupVoteFactory = /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                  var _yield$web3$eth$getAc, _yield$web3$eth$getAc2, networkId, deployedNetwork, instance;\n\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          if (!(web3 == '')) {\n                            _context2.next = 2;\n                            break;\n                          }\n\n                          return _context2.abrupt(\"return\");\n\n                        case 2:\n                          _context2.prev = 2;\n                          _context2.next = 5;\n                          return web3.eth.getAccounts();\n\n                        case 5:\n                          _yield$web3$eth$getAc = _context2.sent;\n                          _yield$web3$eth$getAc2 = _slicedToArray(_yield$web3$eth$getAc, 1);\n                          user = _yield$web3$eth$getAc2[0];\n                          _context2.next = 10;\n                          return web3.eth.net.getId();\n\n                        case 10:\n                          networkId = _context2.sent;\n                          deployedNetwork = VoteFactoryContract.networks[networkId];\n                          instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n                          factoryContract = instance; // Set web3, accounts, and contract to the state, and then proceed with an\n\n                          _context2.next = 20;\n                          break;\n\n                        case 16:\n                          _context2.prev = 16;\n                          _context2.t0 = _context2[\"catch\"](2);\n                          // Catch any errors for any of the above operations.\n                          alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n                          console.error(_context2.t0);\n\n                        case 20:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2, null, [[2, 16]]);\n                }));\n\n                return function setupVoteFactory() {\n                  return _ref2.apply(this, arguments);\n                };\n              }(); // Calls VoteFactory Contract to create a new instance of Group\n\n\n              logInUser = /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                  var isLogin, error;\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return factoryContract.methods.isUserLoggedIn(user).call();\n\n                        case 2:\n                          isLogin = _context3.sent;\n                          setUserLogin(isLogin);\n                          error = \"\";\n\n                          if (!(factoryContract == '')) {\n                            _context3.next = 7;\n                            break;\n                          }\n\n                          return _context3.abrupt(\"return\");\n\n                        case 7:\n                          if (studentID.length != 9) {\n                            error += \"Wrong student ID format. Make sure that the student ID has a length of 9 digits\";\n                          }\n\n                          if (error.length != 0) {\n                            alert(error);\n                          }\n\n                          _context3.prev = 9;\n\n                          if (userLogin) {\n                            _context3.next = 13;\n                            break;\n                          }\n\n                          _context3.next = 13;\n                          return factoryContract.methods.loginUser(studentID, password).send({\n                            from: user\n                          });\n\n                        case 13:\n                          _context3.next = 18;\n                          break;\n\n                        case 15:\n                          _context3.prev = 15;\n                          _context3.t0 = _context3[\"catch\"](9);\n                          alert(_context3.t0);\n\n                        case 18:\n                          setLoad(!Load);\n\n                        case 19:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3, null, [[9, 15]]);\n                }));\n\n                return function logInUser() {\n                  return _ref3.apply(this, arguments);\n                };\n              }(); // Verify the values of the newly created instance of Group\n\n\n              displayUser = /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                  var summary;\n                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          _context4.next = 2;\n                          return factoryContract.methods.getUser(user).call();\n\n                        case 2:\n                          summary = _context4.sent;\n                          console.log(summary);\n\n                        case 4:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                }));\n\n                return function displayUser() {\n                  return _ref4.apply(this, arguments);\n                };\n              }();\n\n              _context5.next = 6;\n              return setupVoteFactory();\n\n            case 6:\n              _context5.next = 8;\n              return logInUser();\n\n            case 8:\n              _context5.next = 10;\n              return displayUser();\n\n            case 10:\n              Router.push(\"/\");\n\n            case 11:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }), __jsx(\"h1\", {\n    style: adminTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, \"Log In\"), __jsx(Form, {\n    onSubmit: onSubmit,\n    style: adminFields,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    required: true,\n    label: \"StudentID\",\n    value: studentID,\n    onChange: function onChange(event) {\n      return setStudentID(event.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    required: true,\n    label: \"Password\",\n    type: \"password\",\n    value: password,\n    onChange: function onChange(event) {\n      return setPassword(event.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }), __jsx(Loader, {\n    active: userLogin,\n    inline: \"centered\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Button, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 21\n    }\n  }, \"Cancel\"), __jsx(Form.Button, {\n    type: \"submit\",\n    onSubmit: onSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }, \"Login\"))));\n};\n\n_s(LoginUser, \"44XAoHHnqoJrCipxqVoGc/TcCBs=\");\n\n_c = LoginUser;\nexport default LoginUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginUser\");","map":{"version":3,"sources":["C:/Users/foubroker/Desktop/voting-at-mcgill/client/src/pages/loginUser.js"],"names":["React","useState","useEffect","Header","VoteFactoryContract","Form","Loader","getWeb3","Router","adminTitle","color","marginBottom","fontSize","textAlign","adminFields","margin","LoginUser","web3Instance","web3","setWeb3","Load","setLoad","userLogin","setUserLogin","studentID","setStudentID","password","setPassword","initWeb3","onSubmit","event","preventDefault","setupVoteFactory","eth","getAccounts","user","net","getId","networkId","deployedNetwork","networks","instance","Contract","abi","address","factoryContract","alert","console","error","logInUser","methods","isUserLoggedIn","call","isLogin","length","loginUser","send","from","displayUser","getUser","summary","log","push","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Header } from '../components/header';\r\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\r\nimport { Form, Loader  } from \"semantic-ui-react\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport Router from \"next/router\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nconst adminTitle = {\r\n    color: \"red\",\r\n    marginBottom: \"5%\",\r\n    fontSize: \"3em\",\r\n    textAlign: \"center\"\r\n};\r\n\r\nconst adminFields = {\r\n    margin: \"auto 5% auto 5%\"\r\n};\r\n\r\n/**\r\n * Login User Page - a Page where user can see all existing group and/or join a new group\r\n * DISCLAMER - majority of the code is based on vote.js written by Simon Wang\r\n * \r\n * @author Brandon Wong\r\n * @author Simon Wang\r\n */\r\nconst LoginUser = () => {\r\n \r\n    var web3Instance;\r\n    const [web3, setWeb3] = useState('');\r\n    const [Load, setLoad] = useState(true);\r\n    const [userLogin, setUserLogin] = useState(false);\r\n    const [studentID, setStudentID] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    // Initialize Web3\r\n    useEffect(() => {\r\n        async function initWeb3() {\r\n            web3Instance = await getWeb3();\r\n            setWeb3(web3Instance);\r\n        }\r\n        initWeb3();\r\n    },[Load]);\r\n\r\n    // Login implementation\r\n    var onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        var factoryContract;\r\n        var user;\r\n\r\n        // Initializes VoteFactory Contract\r\n        var setupVoteFactory = async () => {\r\n            if(web3 == '') {\r\n                return;\r\n            }\r\n            try {\r\n                [user] = (await web3.eth.getAccounts());\r\n                // Get the contract instance.\r\n                const networkId = await web3.eth.net.getId();\r\n                const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n                const instance = new web3.eth.Contract(\r\n                    VoteFactoryContract.abi,\r\n                    deployedNetwork && deployedNetwork.address,\r\n                );\r\n                factoryContract = instance;\r\n\r\n                // Set web3, accounts, and contract to the state, and then proceed with an\r\n            } catch (error) {\r\n                // Catch any errors for any of the above operations.\r\n                alert(\r\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\r\n                );\r\n                console.error(error);\r\n            }\r\n        };\r\n\r\n        // Calls VoteFactory Contract to create a new instance of Group\r\n        var logInUser = async () => {\r\n            var isLogin = await factoryContract.methods.isUserLoggedIn(user).call();\r\n            setUserLogin(isLogin);\r\n            var error = ``;\r\n            if(factoryContract == ''){\r\n                return;\r\n            }\r\n\r\n            if (studentID.length != 9) {\r\n                error += `Wrong student ID format. Make sure that the student ID has a length of 9 digits`;\r\n            }\r\n\r\n            if (error.length != 0) {\r\n                alert(error);\r\n            }\r\n\r\n            try {\r\n                if (!userLogin) {\r\n                    await factoryContract.methods.loginUser(studentID, password).send({\r\n                        from: user\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                alert(error);\r\n            }\r\n            setLoad(!Load);\r\n        };\r\n\r\n        // Verify the values of the newly created instance of Group\r\n        var displayUser = async () => {\r\n            const summary = await factoryContract.methods.getUser(user).call();\r\n            console.log(summary);\r\n        };\r\n\r\n        await setupVoteFactory();\r\n        await logInUser();\r\n        await displayUser();\r\n        Router.push(\"/\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <h1 style={adminTitle}>Log In</h1>\r\n\r\n            <Form onSubmit={onSubmit} style={adminFields}>\r\n                <div>\r\n                    <Form.Input required label=\"StudentID\"\r\n                                 value={studentID}\r\n                                 onChange={event => setStudentID(event.target.value)}\r\n                    >\r\n\r\n                    </Form.Input>\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <Form.Input required label=\"Password\"\r\n                                 type=\"password\"\r\n                                 value={password}\r\n                                 onChange={event => setPassword(event.target.value)}\r\n                    >\r\n\r\n                    </Form.Input>\r\n                </div>\r\n                <br></br>\r\n                <Loader\r\n                        active={userLogin}\r\n                        inline='centered'\r\n                />\r\n                <br></br>\r\n                <div>\r\n                    <Form.Button>Cancel</Form.Button>\r\n                    <Form.Button type=\"submit\" onSubmit={onSubmit}>Login</Form.Button>\r\n                </div>\r\n            </Form>\r\n        </>\r\n    )\r\n};\r\nexport default LoginUser;\r\n"]},"metadata":{},"sourceType":"module"}