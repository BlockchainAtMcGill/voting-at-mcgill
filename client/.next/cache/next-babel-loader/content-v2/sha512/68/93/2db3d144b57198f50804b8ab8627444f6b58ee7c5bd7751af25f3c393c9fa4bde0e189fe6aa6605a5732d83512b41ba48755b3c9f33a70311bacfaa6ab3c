{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\PROJECT_VOTE\\\\voting-at-mcgill\\\\client\\\\src\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid'; // CommonJS\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar useStyles = makeStyles({\n  card: {\n    width: '80%'\n  }\n});\n\nfunction App() {\n  _s();\n\n  var classes = useStyles();\n\n  var _useState = useState(''),\n      votesAddresses = _useState[0],\n      setVotesAddresses = _useState[1];\n\n  var _useState2 = useState(''),\n      accounts = _useState2[0],\n      setAccounts = _useState2[1];\n\n  var _useState3 = useState(''),\n      contract = _useState3[0],\n      setContract = _useState3[1];\n\n  var _useState4 = useState(''),\n      voteContract = _useState4[0],\n      setVoteContract = _useState4[1];\n\n  var _useState5 = useState([]),\n      renderedAddresses = _useState5[0],\n      renderAddresses = _useState5[1];\n\n  var web3;\n  useEffect(function () {\n    // get web3\n    function initWeb3() {\n      return _initWeb.apply(this, arguments);\n    }\n\n    function _initWeb() {\n      _initWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var web3Instance;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log('initializing web3');\n                _context.next = 3;\n                return getWeb3();\n\n              case 3:\n                web3Instance = _context.sent;\n                web3 = web3Instance;\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _initWeb.apply(this, arguments);\n    }\n\n    initWeb3(); // setup();\n  }, []); // useEffect(() => {// get Factory contract\n  //   async function setup() {\n  //     if(web3 == \"\") {\n  //       console.log('unable to get fact')\n  //       return;\n  //     }\n  //     try {\n  //       setAccounts(await web3.eth.getAccounts());\n  //       // Get the contract instance.\n  //       const networkId = await web3.eth.net.getId();\n  //       const deployedNetwork = VoteFactoryContract.networks[networkId];\n  //       const instance = new web3.eth.Contract(\n  //         VoteFactoryContract.abi,\n  //         deployedNetwork && deployedNetwork.address,\n  //       );\n  //       setAccounts(await web3.eth.getAccounts());\n  //       setContract(instance);\n  //       // Set web3, accounts, and contract to the state, and then proceed with an\n  //     } catch (error) {\n  //       // Catch any errors for any of the above operations.\n  //       alert(\n  //         `Failed to load web3, accounts, or contract. Check console for details.`,\n  //       );\n  //       console.error(error);\n  //     }\n  //   }\n  //     setup();\n  // },[web3]);\n\n  useEffect(function () {\n    //just get Vote contract\n    function setup() {\n      return _setup.apply(this, arguments);\n    }\n\n    function _setup() {\n      _setup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var instance;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(web3 == '')) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                try {\n                  // Get the contract instance.\n                  instance = new web3.eth.Contract(VoteContract.abi, votesAddresses[votesAddresses.length - 1]);\n                  setVoteContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n                } catch (error) {\n                  // Catch any errors for any of the above operations.\n                  alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n                  console.error(error);\n                }\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return _setup.apply(this, arguments);\n    }\n\n    setup();\n  }, [contract, votesAddresses]);\n  useEffect(function () {\n    //display available votes\n    var displayVotes = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(contract == '')) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 2:\n                _context3.next = 4;\n                return contract.methods.getDeployedVotes().call();\n\n              case 4:\n                response = _context3.sent;\n                // Update state with the result.\n                setVotesAddresses(response);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function displayVotes() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    displayVotes();\n  }, [contract]);\n  useEffect(function () {\n    //render votes\n    var displayInfo = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(address) {\n        var instance;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(votesAddresses == '')) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 2:\n                _context4.prev = 2;\n                // Get the contract instance.\n                instance = new web3.eth.Contract(VoteContract.abi, address);\n                _context4.next = 6;\n                return instance.methods.currentElection().call();\n\n              case 6:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 9:\n                _context4.prev = 9;\n                _context4.t0 = _context4[\"catch\"](2);\n                // Catch any errors for any of the above operations.\n                alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n                console.error(_context4.t0);\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[2, 9]]);\n      }));\n\n      return function displayInfo(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    var renderVotes = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var temp;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (votesAddresses) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 2:\n                temp = [];\n                votesAddresses.forEach(function (address) {\n                  displayInfo(address).then(function (newAddress) {\n                    return temp.push(newAddress);\n                  });\n                });\n                renderAddresses(temp);\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function renderVotes() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    renderVotes();\n  }, [votesAddresses]);\n\n  function displayVoteList() {\n    var _this = this;\n\n    if (web3 == \"\") {\n      return \"waiting for votes to display...\";\n    } else if (votesAddresses == \"\") {\n      return \"no votes to display\";\n    }\n\n    console.log(JSON.stringify(renderedAddresses));\n    return renderedAddresses ? renderedAddresses.map(function (vote, index) {\n      return __jsx(Card, {\n        key: index,\n        variant: \"outlined\",\n        className: classes.card,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 9\n        }\n      }, __jsx(CardContent, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }\n      }, __jsx(Grid, {\n        container: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }\n      }, __jsx(Grid, {\n        item: true,\n        xs: 10,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }\n      }, __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 35\n        }\n      }, vote.title)), __jsx(Grid, {\n        item: true,\n        xs: 2,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 15\n        }\n      }, __jsx(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }\n      }, \"Apply as Candidate\"), __jsx(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }\n      }, \"Vote\")))));\n    }) : __jsx(React.Fragment, null);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, tryWeb3()), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, displayVoteList())));\n}\n\n_s(App, \"sTHi3TtVjXdE4aQeQIHxzQXBdOE=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/foubroker/PROJECT_VOTE/voting-at-mcgill/client/src/pages/index.js"],"names":["React","useState","useEffect","makeStyles","VoteFactoryContract","VoteContract","getWeb3","Header","Link","Card","CardContent","Grid","require","useStyles","card","width","App","classes","votesAddresses","setVotesAddresses","accounts","setAccounts","contract","setContract","voteContract","setVoteContract","renderedAddresses","renderAddresses","web3","initWeb3","console","log","web3Instance","setup","instance","eth","Contract","abi","length","error","alert","displayVotes","methods","getDeployedVotes","call","response","displayInfo","address","currentElection","renderVotes","temp","forEach","then","newAddress","push","displayVoteList","JSON","stringify","map","vote","index","title","tryWeb3"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\r\nimport VoteContract from \"../contracts/Vote.json\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport { Header } from '../components/header';\r\nimport { Link } from '../../routes'\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\n// CommonJS\r\nrequire(\"regenerator-runtime/runtime\");\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    width:'80%'\r\n  }\r\n});\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [votesAddresses, setVotesAddresses] = useState('');\r\n  const [accounts, setAccounts] = useState('');\r\n  const [contract, setContract] = useState('');\r\n  const [voteContract, setVoteContract] = useState('');\r\n  const [renderedAddresses, renderAddresses] = useState([]);\r\n  var web3;\r\n\r\n  useEffect(() => {// get web3\r\n    async function initWeb3() {\r\n      console.log('initializing web3')\r\n      const web3Instance = await getWeb3()\r\n      web3 = web3Instance;\r\n    }\r\n    initWeb3();\r\n    // setup();\r\n  },[]);\r\n\r\n  // useEffect(() => {// get Factory contract\r\n  //   async function setup() {\r\n  //     if(web3 == \"\") {\r\n  //       console.log('unable to get fact')\r\n  //       return;\r\n  //     }\r\n  //     try {\r\n  //       setAccounts(await web3.eth.getAccounts());\r\n  //       // Get the contract instance.\r\n  //       const networkId = await web3.eth.net.getId();\r\n  //       const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n  //       const instance = new web3.eth.Contract(\r\n  //         VoteFactoryContract.abi,\r\n  //         deployedNetwork && deployedNetwork.address,\r\n  //       );\r\n  //       setAccounts(await web3.eth.getAccounts());\r\n  //       setContract(instance);\r\n    \r\n  //       // Set web3, accounts, and contract to the state, and then proceed with an\r\n  //     } catch (error) {\r\n  //       // Catch any errors for any of the above operations.\r\n  //       alert(\r\n  //         `Failed to load web3, accounts, or contract. Check console for details.`,\r\n  //       );\r\n  //       console.error(error);\r\n  //     }\r\n  //   }\r\n  //     setup();\r\n  // },[web3]);\r\n\r\n  useEffect(() => {//just get Vote contract\r\n    async function setup() {\r\n      if(web3 == '') {\r\n        return;\r\n      }\r\n      try {\r\n        // Get the contract instance.\r\n        const instance = new web3.eth.Contract(\r\n          VoteContract.abi,\r\n          votesAddresses[votesAddresses.length-1],\r\n        );\r\n        setVoteContract(instance);\r\n        // Set web3, accounts, and contract to the state, and then proceed with an\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    }\r\n      setup();\r\n  },[contract,votesAddresses]);\r\n\r\n  useEffect(()=> {//display available votes\r\n    var displayVotes = async () => {\r\n      if(contract == ''){\r\n        return;\r\n      }\r\n      const response = await contract.methods.getDeployedVotes().call();\r\n      // Update state with the result.\r\n      setVotesAddresses(response);\r\n    };\r\n    displayVotes();\r\n  },[contract]);\r\n\r\n  useEffect(()=> {//render votes\r\n    var displayInfo = async (address) => { \r\n      if(votesAddresses == '') {\r\n        return;\r\n      }\r\n      try {\r\n        // Get the contract instance.\r\n        const instance = new web3.eth.Contract(\r\n          VoteContract.abi,\r\n          address\r\n        );\r\n        return (await instance.methods.currentElection().call());\r\n        // Set web3, accounts, and contract to the state, and then proceed with an\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    };\r\n    var renderVotes = async () => {\r\n        if (!votesAddresses){\r\n          return;\r\n        }\r\n        var temp = []\r\n        votesAddresses.forEach(address => {\r\n            displayInfo(address).then(newAddress =>\r\n            temp.push(newAddress)\r\n          )\r\n        })\r\n        renderAddresses(temp);\r\n      }\r\n      renderVotes();\r\n    },[votesAddresses]);\r\n\r\n\r\n  function displayVoteList() {\r\n    if(web3 == \"\"){\r\n      return \"waiting for votes to display...\"\r\n    }\r\n    else if(votesAddresses == \"\"){\r\n      return \"no votes to display\"\r\n    }\r\n    console.log(JSON.stringify(renderedAddresses));\r\n\r\n    return renderedAddresses ? renderedAddresses.map((vote, index) => \r\n        <Card key={index} variant=\"outlined\" className ={classes.card}>\r\n          <CardContent >\r\n            <Grid container>\r\n              <Grid item xs ={10}><span>{vote.title}</span></Grid>\r\n              <Grid item xs ={2}>\r\n                <div>            \r\n                  {/* <Link route ={`/elections/apply/${vote}`}>  */}\r\n                    Apply as Candidate\r\n                  {/* </Link> */}\r\n                </div>\r\n                <div>  \r\n                  {/* <Link route ={`/elections/vote/${vote}`}>  */}\r\n                    Vote\r\n                  {/* </Link> */}\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      ) : <></>\r\n  }\r\n\r\n  \r\n  return( \r\n    <>\r\n      <Header></Header>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <div className=\"App\">\r\n        <div>{ tryWeb3() }</div>\r\n        <div>{ displayVoteList() }</div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}