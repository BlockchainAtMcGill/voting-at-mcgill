{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from \"web3\";\n\nvar getWeb3 = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var web3;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!window.ethereum) {\n              _context.next = 11;\n              break;\n            }\n\n            web3 = new Web3(window.ethereum);\n            _context.prev = 2;\n            _context.next = 5;\n            return window.eth_requestAccounts;\n\n          case 5:\n            return _context.abrupt(\"return\", web3);\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](2);\n            return _context.abrupt(\"return\", _context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 8]]);\n  }));\n\n  return function getWeb3() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default getWeb3;","map":{"version":3,"sources":["C:/Users/foubroker/PROJECT_VOTE/voting-at-mcgill/client/src/getWeb3.js"],"names":["Web3","getWeb3","window","ethereum","web3","eth_requestAccounts"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,IAAMC,OAAO;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACVC,MAAM,CAACC,QADG;AAAA;AAAA;AAAA;;AAERC,YAAAA,IAFQ,GAED,IAAIJ,IAAJ,CAASE,MAAM,CAACC,QAAhB,CAFC;AAAA;AAAA;AAAA,mBAIND,MAAM,CAACG,mBAJD;;AAAA;AAAA,6CAKJD,IALI;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPH,OAAO;AAAA;AAAA;AAAA,GAAb;;AA6CA,eAAeA,OAAf","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = async() =>{\r\n  if (window.ethereum) {\r\n  const web3 = new Web3(window.ethereum);\r\n  try {\r\n    await window.eth_requestAccounts;\r\n    return (web3);\r\n  } catch (error) {\r\n    return error\r\n  }\r\n\r\n}\r\n  // new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    // window.addEventListener(\"load\", async () => {\r\n    //   // Modern dapp browsers...\r\n    //   if (window.ethereum) {\r\n    //     const web3 = new Web3(window.ethereum);\r\n    //     try {\r\n    //       // Request account access if needed\r\n    //       await window.eth_requestAccounts;\r\n    //       // Acccounts now exposed\r\n    //       resolve(web3);\r\n    //     } catch (error) {\r\n    //       reject(error);\r\n    //     }\r\n    //   }\r\n    //   // Legacy dapp browsers...\r\n    //   else if (window.web3) {\r\n    //     // Use Mist/MetaMask's provider.\r\n    //     const web3 = window.web3;\r\n    //     console.log(\"Injected web3 detected.\");\r\n    //     resolve(web3);\r\n    //   }\r\n    //   // Fallback to localhost; use dev console port by default...\r\n    //   else {\r\n    //     const provider = new Web3.providers.HttpProvider(\r\n    //       \"http://127.0.0.1:8545\"\r\n    //     );\r\n    //     const web3 = new Web3(provider);\r\n    //     console.log(\"No web3 instance injected, using Local web3.\");\r\n    //     resolve(web3);\r\n    //   }\r\n    // });\r\n  // });\r\n}\r\nexport default getWeb3;\r\n"]},"metadata":{},"sourceType":"module"}