{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\Desktop\\\\BAM\\\\voting-at-mcgill-2\\\\client\\\\src\\\\pages\\\\elections\\\\vote\\\\vote.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Header } from '../../../components/header';\nimport getWeb3 from \"../../../getWeb3\";\nimport VoteContract from \"../../../contracts/Vote.json\";\nimport 'semantic-ui-css/semantic.min.css';\nimport { Link } from '../../../../routes';\nimport { Modal, Dimmer, Loader, Image, Segment } from 'semantic-ui-react';\nimport { PieChart, Pie, Tooltip, BarChart, XAxis, YAxis, Legend, CartesianGrid, Bar, ResponsiveContainer } from \"recharts\";\n\nconst Vote = () => {\n  var web3Instance;\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: voteAddress,\n    1: setVoteAddress\n  } = useState('');\n  const {\n    0: currentVote,\n    1: setCurrentVote\n  } = useState('');\n  const {\n    0: voteInstance,\n    1: setVoteInstance\n  } = useState('');\n  const {\n    0: candidates,\n    1: setCandidates\n  } = useState('');\n  const {\n    0: currentUser,\n    1: setCurrentUser\n  } = useState('');\n  const {\n    0: voting,\n    1: setVoting\n  } = useState(false);\n  const {\n    0: hasVoted,\n    1: setHasVoted\n  } = useState(false);\n  const {\n    0: load,\n    1: setLoad\n  } = useState(true);\n  const {\n    0: cAddresses,\n    1: setCAddresses\n  } = useState([]);\n  useEffect(() => {\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    var getElectionAddress = async () => {\n      const url = window.location.href;\n      const pos = url.indexOf('vote') + 5;\n      setVoteAddress(url.slice(pos));\n    };\n\n    initWeb3();\n    getElectionAddress();\n  }, [load]);\n  useEffect(() => {\n    async function setupVote() {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        // Get the contract instance.\n        const instance = await new web3.eth.Contract(VoteContract.abi, voteAddress);\n        setVoteInstance(instance);\n        setCurrentVote(await instance.methods.currentElection().call());\n        var current;\n        [current] = await web3.eth.getAccounts();\n        setCurrentUser(current);\n        setHasVoted(await instance.methods.getVoted(current).call());\n        const candidatesAddresses = await instance.methods.getCandidatesAddresses().call();\n        setCAddresses(candidatesAddresses);\n        const candidatesCount = await instance.methods.candidatesCount().call();\n        var array = [];\n\n        for (var i = 0; i < candidatesCount; i++) {\n          console.log(candidatesAddresses[i]);\n          array.push(await instance.methods.get_candidate(candidatesAddresses[i]).call());\n        }\n\n        setCandidates(array);\n        console.log(array); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setupVote();\n  }, [web3]);\n  const long = {\n    width: '90%',\n    texAlign: 'center',\n    margin: 'auto',\n    color: '#f00000'\n  };\n\n  function VoteModal(name, address) {\n    var voteFor = async () => {\n      if (voteInstance) {\n        setVoting(true);\n        await voteInstance.methods.voteFor(address).send({\n          from: currentUser\n        });\n        setVoting(false);\n        setLoad(!load);\n      }\n    };\n\n    if (!hasVoted) {\n      return __jsx(Modal, {\n        trigger: __jsx(\"button\", {\n          className: \"ui right floated inverted red button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 30\n          }\n        }, \"Vote\"),\n        header: \"Vote!\",\n        content: \"are you sure you want to vote for \" + name + \" ?\",\n        actions: [__jsx(\"button\", {\n          key: 1,\n          className: \"ui inverted green button\",\n          onClick: voteFor,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 21\n          }\n        }, \"yes\"), __jsx(\"button\", {\n          key: 2,\n          className: \"ui inverted red button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 21\n          }\n        }, \"no\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }\n      });\n    } else return __jsx(React.Fragment, null);\n  }\n\n  function leaveElection() {\n    var startDate = new Date(currentVote.startDate * 1);\n    var currDate = new Date();\n\n    var leavethis = async () => {\n      if (voteInstance) {\n        setVoting(true);\n        await voteInstance.methods.leaveElection().send({\n          from: currentUser\n        });\n        setVoting(false);\n        setLoad(!load);\n      }\n    };\n\n    if (currDate < startDate) {\n      return __jsx(Modal, {\n        trigger: __jsx(\"button\", {\n          className: \"ui right floated inverted red button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 28\n          }\n        }, \"Leave Election\"),\n        header: \"Leave Election\",\n        content: \"are you sure you want to no longer be a candidate\",\n        actions: [__jsx(\"button\", {\n          key: 1,\n          className: \"ui inverted green button\",\n          onClick: leavethis,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 19\n          }\n        }, \"yes\"), __jsx(\"button\", {\n          key: 2,\n          className: \"ui inverted red button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 19\n          }\n        }, \"no\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }\n      });\n    }\n  }\n\n  function applyELection() {\n    var startDate = new Date(currentVote.startDate * 1);\n    var currDate = new Date(); //   if(currDate<startDate){\n\n    return __jsx(Link, {\n      route: `/elections/apply/${voteAddress}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }, __jsx(\"button\", {\n      className: \"extra content ui inverted red button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 19\n      }\n    }, __jsx(\"i\", {\n      className: \"plus icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 24\n      }\n    }), \" Apply as Candidate\"))); //   }\n  }\n\n  const data = [];\n  /*\r\n  <div className=\"content ui container\">\r\n      <div className=\"header clearing segment\">\r\n          {candidate.name} {VoteModal(candidate.name, candidate.candidateAddr)}:        {candidate.numVotes/currentVote.numVotes*100}%\r\n        </div>\r\n  </div>\r\n  */\n\n  function displayPer() {\n    var newrow = {};\n    var fewrow = {};\n\n    if (candidates == \"\") {\n      return __jsx(\"div\", {\n        className: \"card\",\n        style: long,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 22\n        }\n      }, __jsx(\"div\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 27\n        }\n      }, __jsx(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 31\n        }\n      }, \"no candidates yet\")));\n    }\n\n    candidates.map(candidate => {\n      data.push({\n        name: candidate[0],\n        value: parseInt(candidate[2])\n      });\n    });\n  }\n\n  console.log(data);\n\n  function chart() {\n    return __jsx(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }\n    }, __jsx(PieChart, {\n      height: 300,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    }, __jsx(Pie, {\n      data: data,\n      cx: \"50%\",\n      cy: \"50%\",\n      outerRadius: 100,\n      fill: \"#FF0000\",\n      dataKey: \"value\",\n      label: ({\n        cx,\n        cy,\n        midAngle,\n        innerRadius,\n        outerRadius,\n        value,\n        index\n      }) => {\n        console.log(\"handling label?\");\n        const RADIAN = Math.PI / 180; // eslint-disable-next-line\n\n        const radius = 25 + innerRadius + (outerRadius - innerRadius); // eslint-disable-next-line\n\n        const x = cx + radius * Math.cos(-midAngle * RADIAN); // eslint-disable-next-line\n\n        const y = cy + radius * Math.sin(-midAngle * RADIAN);\n        return __jsx(\"text\", {\n          x: x,\n          y: y,\n          fill: \"FF0000\",\n          textAnchor: x > cx ? \"start\" : \"end\",\n          dominantBaseline: \"central\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 21\n          }\n        }, data[index].name, \" (\", value, \")\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 15\n      }\n    })));\n  }\n\n  function displayCandidates() {\n    if (candidates == \"\") {\n      return __jsx(\"div\", {\n        className: \"card\",\n        style: long,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 20\n        }\n      }, __jsx(\"div\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 25\n        }\n      }, __jsx(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 29\n        }\n      }, \"no candidates yet\")));\n    }\n\n    return candidates.map((candidate, index) => __jsx(\"div\", {\n      className: \"card\",\n      style: long,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"content ui container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"header clearing segment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }\n    }, candidate[0], \" \", VoteModal(candidate[0], cAddresses[index])), __jsx(\"div\", {\n      className: \"header clearing segment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }\n    }, leaveElection()), __jsx(\"div\", {\n      className: \"meta\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }\n    }, cAddresses[index]), __jsx(\"div\", {\n      className: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }\n    }, candidate[1]))));\n  }\n\n  var voted;\n\n  if (hasVoted) {\n    voted = __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }\n    }, __jsx(\"i\", {\n      className: \"floated check icon right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 23\n      }\n    }), \" You have already Voted\");\n  } else {\n    voted = __jsx(React.Fragment, null);\n  }\n\n  function formatVote() {\n    if (currentVote) {\n      var startDate = new Date(currentVote.startDate * 1);\n      var endDate = new Date(currentVote.endDate * 1);\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"ui card\",\n        style: long,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 17\n        }\n      }, __jsx(\"div\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 21\n        }\n      }, __jsx(\"div\", {\n        className: \"header container\",\n        style: {\n          color: '#f00000'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 25\n        }\n      }, currentVote.title, __jsx(\"span\", {\n        className: \"floated right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 29\n        }\n      }, voted)), __jsx(\"div\", {\n        className: \"meta\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 25\n        }\n      }, startDate.toUTCString().slice(0, 17), \" to \", endDate.toUTCString().slice(0, 17)), __jsx(\"div\", {\n        className: \"ui card\",\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 25\n        }\n      }, __jsx(\"div\", {\n        className: \"description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 29\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 29\n        }\n      }, currentVote.description)))), __jsx(\"div\", {\n        style: {\n          textAlign: 'center',\n          margin: '50px',\n          color: '#f00000'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 21\n        }\n      }, __jsx(\"div\", {\n        className: \"ui cards\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 21\n        }\n      }, displayCandidates()), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 21\n        }\n      }), __jsx(Loader, {\n        active: voting,\n        inline: \"centered\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 21\n        }\n      })), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 21\n        }\n      }), __jsx(\"div\", {\n        className: \"extra content\",\n        style: {\n          color: '#f00000'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 21\n        }\n      }, __jsx(\"i\", {\n        className: \"check icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 25\n        }\n      }), currentVote.numVotes, \" Votes\"), applyELection(), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 21\n        }\n      }), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 21\n        }\n      }), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 21\n        }\n      }), displayPer(), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 21\n        }\n      }), __jsx(\"h2\", {\n        style: long,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 21\n        }\n      }, \"Results\"), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 21\n        }\n      }), chart(), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 21\n        }\n      }), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 21\n        }\n      })));\n    } else {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 20\n        }\n      }, \" loading vote ...\");\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 13\n    }\n  }), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }\n  }, formatVote()), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Vote;","map":{"version":3,"sources":["C:/Users/foubroker/Desktop/BAM/voting-at-mcgill-2/client/src/pages/elections/vote/vote.js"],"names":["React","useEffect","useState","Header","getWeb3","VoteContract","Link","Modal","Dimmer","Loader","Image","Segment","PieChart","Pie","Tooltip","BarChart","XAxis","YAxis","Legend","CartesianGrid","Bar","ResponsiveContainer","Vote","web3Instance","web3","setWeb3","voteAddress","setVoteAddress","currentVote","setCurrentVote","voteInstance","setVoteInstance","candidates","setCandidates","currentUser","setCurrentUser","voting","setVoting","hasVoted","setHasVoted","load","setLoad","cAddresses","setCAddresses","initWeb3","getElectionAddress","url","window","location","href","pos","indexOf","slice","setupVote","instance","eth","Contract","abi","methods","currentElection","call","current","getAccounts","getVoted","candidatesAddresses","getCandidatesAddresses","candidatesCount","array","i","console","log","push","get_candidate","error","alert","long","width","texAlign","margin","color","VoteModal","name","address","voteFor","send","from","leaveElection","startDate","Date","currDate","leavethis","applyELection","data","displayPer","newrow","fewrow","map","candidate","value","parseInt","chart","cx","cy","midAngle","innerRadius","outerRadius","index","RADIAN","Math","PI","radius","x","cos","y","sin","displayCandidates","voted","formatVote","endDate","title","toUTCString","description","textAlign","numVotes"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { Header } from '../../../components/header'\r\nimport getWeb3 from \"../../../getWeb3\";\r\nimport VoteContract from \"../../../contracts/Vote.json\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Link } from '../../../../routes';\r\nimport { Modal, Dimmer, Loader, Image, Segment } from 'semantic-ui-react'\r\nimport {\r\n  PieChart,\r\n  Pie,\r\n  Tooltip,\r\n  BarChart,\r\n  XAxis,\r\n  YAxis,\r\n  Legend,\r\n  CartesianGrid,\r\n  Bar, ResponsiveContainer\r\n} from \"recharts\";\r\n\r\nconst Vote = () => {\r\n\r\n    var web3Instance;\r\n    const [web3, setWeb3] = useState('');\r\n    const [voteAddress, setVoteAddress] = useState('')\r\n    const [currentVote, setCurrentVote] = useState('')\r\n    const [voteInstance, setVoteInstance] = useState('')\r\n    const [candidates, setCandidates ] = useState('');\r\n    const [currentUser, setCurrentUser ] = useState('');\r\n    const [voting, setVoting ] = useState(false)\r\n    const [hasVoted, setHasVoted] = useState(false)\r\n    const [load, setLoad] = useState(true)\r\n    const [cAddresses, setCAddresses] = useState([])\r\n\r\n    useEffect(() => {\r\n        async function initWeb3() {\r\n            web3Instance = await getWeb3();\r\n            setWeb3(web3Instance);\r\n        }\r\n        var getElectionAddress = async() =>{\r\n            const url=window.location.href;\r\n            const pos=url.indexOf('vote')+5;\r\n            setVoteAddress(url.slice(pos));\r\n          };\r\n        initWeb3();\r\n        getElectionAddress();\r\n    },[load]);\r\n\r\n    useEffect(() => {\r\n        async function setupVote() {\r\n            if(web3 == '') {\r\n                return;\r\n            }\r\n            try {\r\n                // Get the contract instance.\r\n                const instance = await new web3.eth.Contract(\r\n                    VoteContract.abi,\r\n                    voteAddress\r\n                );\r\n                setVoteInstance(instance);\r\n                setCurrentVote(await instance.methods.currentElection().call());\r\n                var current\r\n                [current] = await web3.eth.getAccounts()\r\n                setCurrentUser(current)\r\n                setHasVoted(await instance.methods.getVoted(current).call())\r\n\r\n                const candidatesAddresses = await instance.methods.getCandidatesAddresses().call();\r\n                setCAddresses(candidatesAddresses);\r\n                const candidatesCount = await instance.methods.candidatesCount().call();\r\n                var array = []\r\n\r\n                for (var i = 0; i < candidatesCount; i++){\r\n                    console.log(candidatesAddresses[i]);\r\n                    array.push(await instance.methods.get_candidate(candidatesAddresses[i]).call());\r\n                }\r\n                setCandidates(array);\r\n                console.log(array)\r\n                // Set web3, accounts, and contract to the state, and then proceed with an\r\n            } catch (error) {\r\n            // Catch any errors for any of the above operations.\r\n            alert(\r\n                `Failed to load web3, accounts, or contract. Check console for details.`,\r\n            );\r\n            console.error(error);\r\n            }\r\n        }\r\n        setupVote();\r\n    },[web3])\r\n\r\n    const long = {\r\n        width: '90%',\r\n        texAlign:'center',\r\n        margin: 'auto',\r\n        color: '#f00000',\r\n    }\r\n\r\n    function VoteModal(name,address) {\r\n        var voteFor = async () => {\r\n            if(voteInstance){\r\n                setVoting(true)\r\n                await voteInstance.methods.voteFor(address).send({\r\n                    from: currentUser\r\n                })\r\n                setVoting(false)\r\n                setLoad(!load)\r\n            }\r\n        }\r\n        if(!hasVoted){\r\n            return (\r\n                <Modal\r\n                    trigger={<button className=\"ui right floated inverted red button\">Vote</button>}\r\n                    header=\"Vote!\"\r\n                    content={\"are you sure you want to vote for \"+ name+\" ?\"}\r\n                    actions={[\r\n                    <button key={1} className=\"ui inverted green button\" onClick={voteFor}>yes</button>,\r\n                    <button key={2} className=\"ui inverted red button\" >no</button>]}\r\n                />\r\n            )\r\n        }\r\n        else return (<></>)\r\n    }\r\n    function  leaveElection(){\r\n          var startDate = new Date(currentVote.startDate * 1)\r\n          var currDate= new Date()\r\n          var leavethis = async () => {\r\n              if(voteInstance){\r\n                setVoting(true)\r\n                await voteInstance.methods.leaveElection().send({\r\n                    from: currentUser\r\n                })\r\n                setVoting(false)\r\n                setLoad(!load)\r\n              }\r\n          }\r\n          if(currDate<startDate){\r\n            return (\r\n              <Modal\r\n                  trigger={<button className=\"ui right floated inverted red button\">Leave Election</button>}\r\n                  header=\"Leave Election\"\r\n                  content={\"are you sure you want to no longer be a candidate\"}\r\n                  actions={[\r\n                  <button key={1} className=\"ui inverted green button\"onClick={leavethis}>yes</button>,\r\n                  <button key={2} className=\"ui inverted red button\" >no</button>]}\r\n              />\r\n            )\r\n          }\r\n    }\r\n    function applyELection(){\r\n      var startDate = new Date(currentVote.startDate * 1)\r\n      var currDate= new Date()\r\n    //   if(currDate<startDate){\r\n        return(\r\n          <Link route ={`/elections/apply/${voteAddress}`}>\r\n              <button className=\"extra content ui inverted red button\" >\r\n                  <div><i className=\"plus icon\"></i> Apply as Candidate</div>\r\n              </button>\r\n          </Link>\r\n        )\r\n    //   }\r\n    }\r\n    const data=[];\r\n    /*\r\n    <div className=\"content ui container\">\r\n        <div className=\"header clearing segment\">\r\n\r\n          {candidate.name} {VoteModal(candidate.name, candidate.candidateAddr)}:        {candidate.numVotes/currentVote.numVotes*100}%\r\n\r\n        </div>\r\n    </div>\r\n    */\r\n    function displayPer() {\r\n          var newrow={};\r\n          var fewrow={};\r\n          if (candidates == \"\"){\r\n              return <div  className=\"card\" style={long}>\r\n                          <div className=\"content\">\r\n                              <div className=\"header\">\r\n                                  no candidates yet\r\n                              </div>\r\n                          </div>\r\n                      </div>\r\n\r\n          }\r\n\r\n          candidates.map((candidate) =>{data.push({ name: candidate[0], value:parseInt(candidate[2]) });}\r\n\r\n        )\r\n    }\r\n\r\n    console.log(data);\r\n\r\n    function chart(){\r\n      return(\r\n        <ResponsiveContainer width=\"100%\" height={300}>\r\n            <PieChart height={300}>\r\n              <Pie\r\n                data={data}\r\n                cx=\"50%\"\r\n                cy=\"50%\"\r\n                outerRadius={100}\r\n                fill=\"#FF0000\"\r\n                dataKey=\"value\"\r\n                label={({\r\n                  cx,\r\n                  cy,\r\n                  midAngle,\r\n                  innerRadius,\r\n                  outerRadius,\r\n                  value,\r\n                  index\r\n                }) => {\r\n                  console.log(\"handling label?\");\r\n                  const RADIAN = Math.PI / 180;\r\n                  // eslint-disable-next-line\r\n                  const radius = 25 + innerRadius + (outerRadius - innerRadius);\r\n                  // eslint-disable-next-line\r\n                  const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n                  // eslint-disable-next-line\r\n                  const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n                  return (\r\n                    <text\r\n                      x={x}\r\n                      y={y}\r\n                      fill=\"FF0000\"\r\n                      textAnchor={x > cx ? \"start\" : \"end\"}\r\n                      dominantBaseline=\"central\"\r\n                    >\r\n                      {data[index].name} ({value})\r\n                    </text>\r\n                  );\r\n                }}\r\n              />\r\n            </PieChart>\r\n        </ResponsiveContainer>\r\n      )\r\n    }\r\n    function displayCandidates() {\r\n        if (candidates == \"\"){\r\n            return <div  className=\"card\" style={long}>\r\n                        <div className=\"content\">\r\n                            <div className=\"header\">\r\n                                no candidates yet\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        }\r\n\r\n        return candidates.map((candidate,index) =>\r\n        <div className=\"card\"  style={long} key={index}>\r\n            <div className=\"content ui container\">\r\n                <div className=\"header clearing segment\">\r\n                    {candidate[0]} {VoteModal(candidate[0], cAddresses[index])}\r\n                </div>\r\n                <div className=\"header clearing segment\">\r\n                    {leaveElection()}\r\n                </div>\r\n                <div className=\"meta\">\r\n                    {cAddresses[index]}\r\n                </div>\r\n                <div className=\"description\">\r\n                    {candidate[1]}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        )\r\n    }\r\n    var voted;\r\n    if(hasVoted) {\r\n        voted = <span><i className=\"floated check icon right\"></i> You have already Voted</span>;\r\n    } else {\r\n        voted = <></>\r\n    }\r\n\r\n    function formatVote() {\r\n        if (currentVote){\r\n            var startDate = new Date(currentVote.startDate * 1)\r\n            var endDate = new Date(currentVote.endDate * 1)\r\n            return <>\r\n                <div className=\"ui card\" style={long}>\r\n                    <div className=\"content\">\r\n                        <div className=\"header container\" style= {{color: '#f00000'}}>\r\n                            {currentVote.title}\r\n                            <span className=\"floated right\">{voted}</span>\r\n                        </div>\r\n                        <div className=\"meta\">{startDate.toUTCString().slice(0,17)} to {endDate.toUTCString().slice(0,17)}</div>\r\n                        <div className=\"ui card\" style= {{width: '100%'}}>\r\n                            <div className=\"description\" >\r\n                            <p>{currentVote.description}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{textAlign:'center', margin:'50px', color: '#f00000'}}>\r\n                    <div className =\"ui cards\">{displayCandidates()}</div>\r\n                    <br></br>\r\n                    <Loader\r\n                        active={voting}\r\n                        inline='centered'\r\n                    />\r\n                    </div>\r\n                    <div>\r\n                </div>\r\n\r\n                    <div className=\"extra content\" style= {{color: '#f00000'}}>\r\n                        <i className=\"check icon\"></i>\r\n                        {currentVote.numVotes} Votes\r\n                    </div>\r\n                    {applyELection()}\r\n                    <br></br>\r\n                    <br></br>\r\n                    <br></br>\r\n                    {displayPer()}\r\n                    <br></br>\r\n                    <h2 style={long}>Results</h2>\r\n                    <br></br>\r\n                    {chart()}\r\n                    <br></br>\r\n                    <br></br>\r\n                </div>\r\n            </>\r\n        }\r\n        else{\r\n            return <div> loading vote ...</div>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <h1 >{formatVote()}</h1>\r\n            <br></br>\r\n            <br></br>\r\n\r\n\r\n        </>\r\n    )\r\n\r\n}\r\nexport default Vote;\r\n"]},"metadata":{},"sourceType":"module"}