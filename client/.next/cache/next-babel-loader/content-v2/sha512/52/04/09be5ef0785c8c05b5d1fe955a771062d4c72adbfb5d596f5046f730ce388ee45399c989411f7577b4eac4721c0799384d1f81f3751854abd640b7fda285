{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes';\nimport 'semantic-ui-css/semantic.min.css';\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width: '80%'\n  }\n});\n\nconst JoinGroup = () => {\n  var web3Instance;\n  var factoryContract;\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: contract,\n    1: setContract\n  } = useState('');\n  const {\n    0: groupList,\n    1: setGroups\n  } = useState([]);\n  const {\n    0: members,\n    1: getMembers\n  } = useState([]);\n  const {\n    0: renderedGroups,\n    1: renderGroups\n  } = useState([]); // Initialize Web3\n\n  useEffect(() => {\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, []); // Initialize VoteFactory Contract\n\n  useEffect(() => {\n    async function setupVoteFactory() {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        factoryContract = instance;\n        setContract(instance);\n      } catch (error) {\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setupVoteFactory();\n  }, [web3]);\n  return __jsx(React.Fragment, null); // Display all Groups\n\n  useEffect(() => {\n    var displayGroups = async () => {\n      if (contract == '') {\n        return;\n      }\n\n      const response = await contract.methods.getExistingGroups().call();\n      setGroups(response);\n    };\n\n    displayGroups();\n  }, [contract]);\n  return __jsx(React.Fragment, null);\n  /*\n  // Display the information of a Group\n  useEffect(() => {\n      var displayInfo = async (groupID) => {\n          if (groupList == '') {\n              return;\n          }\n           try {\n              const instance = new web3.eth.Contract(\n                  VoteFactoryContract.abi, \n                  groupID\n              );\n               return (await instance.methods.getGroup(groupID).call());\n          } catch (error) {\n              console.error(error);\n          }\n      };\n       var renderGs = async () => {\n          if (groupList == '') {\n              return;\n          }\n           await groupList.forEach(groupID => {\n              displayInfo(groupID).then(newGroup => {\n                  renderGroups([...renderedGroups, newGroup]);\n              });\n          });\n      }\n      renderGs();\n  }, [groupList]);\n   useEffect(() => {\n      if (renderedGroups != []) {\n          console.log(renderedGroups);\n      }\n  }, [renderedGroups]);\n   //return <a>Hello World</a>;\n  return groupList ? groupList.map((group) => \n      //<Link className=\"ui button\" route ={`/elections/vote/${vote}`} key={index}>\n      <div className=\"ui link card\" style={{width:\"80%\", color: '#f00000'}}>\n      <div className=\"card\">\n      <div className=\"content\">\n          <div className=\"header\">Group</div>\n          <div className=\"meta\">\n              <a>{group.groupName}</a>\n          </div>\n          <div className=\"description\">\n              {group.description}\n          </div>\n      </div>\n          <div className=\"extra content\">\n              <span>\n                  <i className=\"user icon\"></i>\n                  {group.getMembers.size()}\n              </span>\n          </div>\n      </div>\n      </div>\n  ) : <></> */\n};\n\nexport default JoinGroup;","map":{"version":3,"sources":["/home/wen_wong/voting-at-mcgill/client/src/pages/joinGroup.js"],"names":["React","useState","useEffect","makeStyles","VoteFactoryContract","VoteContract","getWeb3","Header","Link","require","useStyles","card","width","JoinGroup","web3Instance","factoryContract","web3","setWeb3","contract","setContract","groupList","setGroups","members","getMembers","renderedGroups","renderGroups","initWeb3","setupVoteFactory","networkId","eth","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","console","displayGroups","response","methods","getExistingGroups","call"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes'\nimport 'semantic-ui-css/semantic.min.css';\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width:'80%'\n  }\n});\n\nconst JoinGroup = () => {\n    var web3Instance;\n    var factoryContract;\n\n    const [web3, setWeb3] = useState('');\n    const [contract, setContract] = useState('');\n    const [groupList, setGroups] = useState([]);\n    const [members, getMembers] = useState([]);\n    const [renderedGroups, renderGroups] = useState([]);\n\n    // Initialize Web3\n    useEffect(() => {\n\n        async function initWeb3() {\n            web3Instance = await getWeb3();\n            setWeb3(web3Instance);\n        }\n        initWeb3();\n    }, []);\n\n    // Initialize VoteFactory Contract\n    useEffect(() => {\n        async function setupVoteFactory() {\n            if (web3 == '') {\n                return;\n            }\n\n            try {\n                const networkId = await web3.eth.net.getId();\n                const deployedNetwork = VoteFactoryContract.networks[networkId];\n                const instance = new web3.eth.Contract(\n                    VoteFactoryContract.abi,\n                    deployedNetwork && deployedNetwork.address\n                );\n                factoryContract = instance;\n                setContract(instance);\n            } catch (error) {\n                alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n                console.error(error);\n            }\n        }\n\n        setupVoteFactory();\n    }, [web3]);\n    return <></>;\n\n    // Display all Groups\n    useEffect(() => {\n        var displayGroups = async () => {\n            if (contract == '') {\n                return;\n            }\n            const response = await contract.methods.getExistingGroups().call();\n            setGroups(response);\n        };\n\n        displayGroups();\n    }, [contract]);\n\n    return <></>;\n    /*\n    // Display the information of a Group\n    useEffect(() => {\n        var displayInfo = async (groupID) => {\n            if (groupList == '') {\n                return;\n            }\n\n            try {\n                const instance = new web3.eth.Contract(\n                    VoteFactoryContract.abi, \n                    groupID\n                );\n\n                return (await instance.methods.getGroup(groupID).call());\n            } catch (error) {\n                console.error(error);\n            }\n        };\n\n        var renderGs = async () => {\n            if (groupList == '') {\n                return;\n            }\n\n            await groupList.forEach(groupID => {\n                displayInfo(groupID).then(newGroup => {\n                    renderGroups([...renderedGroups, newGroup]);\n                });\n            });\n        }\n        renderGs();\n    }, [groupList]);\n\n    useEffect(() => {\n        if (renderedGroups != []) {\n            console.log(renderedGroups);\n        }\n    }, [renderedGroups]);\n\n    //return <a>Hello World</a>;\n    return groupList ? groupList.map((group) => \n        //<Link className=\"ui button\" route ={`/elections/vote/${vote}`} key={index}>\n        <div className=\"ui link card\" style={{width:\"80%\", color: '#f00000'}}>\n        <div className=\"card\">\n        <div className=\"content\">\n            <div className=\"header\">Group</div>\n            <div className=\"meta\">\n                <a>{group.groupName}</a>\n            </div>\n            <div className=\"description\">\n                {group.description}\n            </div>\n        </div>\n            <div className=\"extra content\">\n                <span>\n                    <i className=\"user icon\"></i>\n                    {group.getMembers.size()}\n                </span>\n            </div>\n        </div>\n        </div>\n  ) : <></> */\n};\n\nexport default JoinGroup;"]},"metadata":{},"sourceType":"module"}