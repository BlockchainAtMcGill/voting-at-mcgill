{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\Desktop\\\\BAM\\\\voting-at-mcgill-2\\\\client\\\\src\\\\pages\\\\elections\\\\vote\\\\vote.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Header } from '../../../components/header';\nimport getWeb3 from \"../../../getWeb3\";\nimport VoteContract from \"../../../contracts/Vote.json\";\nimport 'semantic-ui-css/semantic.min.css';\nimport { Link } from '../../../../routes';\nimport { Modal, Dimmer, Loader, Image, Segment } from 'semantic-ui-react';\nimport { PieChart, Pie, Tooltip, BarChart, XAxis, YAxis, Legend, CartesianGrid, Bar } from \"recharts\";\n\nconst Vote = () => {\n  var web3Instance;\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: voteAddress,\n    1: setVoteAddress\n  } = useState('');\n  const {\n    0: currentVote,\n    1: setCurrentVote\n  } = useState('');\n  const {\n    0: voteInstance,\n    1: setVoteInstance\n  } = useState('');\n  const {\n    0: candidates,\n    1: setCandidates\n  } = useState('');\n  const {\n    0: currentUser,\n    1: setCurrentUser\n  } = useState('');\n  const {\n    0: voting,\n    1: setVoting\n  } = useState(false);\n  const {\n    0: hasVoted,\n    1: setHasVoted\n  } = useState(false);\n  const {\n    0: load,\n    1: setLoad\n  } = useState(true);\n  useEffect(() => {\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    var getElectionAddress = async () => {\n      const url = window.location.href;\n      const pos = url.indexOf('vote') + 5;\n      setVoteAddress(url.slice(pos));\n      console.log(voteAddress);\n    };\n\n    initWeb3();\n    getElectionAddress();\n  }, [load]);\n  useEffect(() => {\n    async function setupVote() {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        // Get the contract instance.\n        const instance = await new web3.eth.Contract(VoteContract.abi, voteAddress);\n        setVoteInstance(instance);\n        setCurrentVote(await instance.methods.currentElection().call());\n        var current;\n        [current] = await web3.eth.getAccounts();\n        setCurrentUser(current);\n        setHasVoted(await instance.methods.getElectionVoter(current).call());\n        const candidatesAddresses = await instance.methods.getCandidatesAddresses().call();\n        console.log(candidatesAddresses); // const candidatesCount = await instance.methods.candidatesCount().call();\n\n        var array = []; // for (var i = 0; i < candidatesAddresses.length; i++){\n        // array.push(await instance.methods.get_candidates(candidatesAddresses[i]));\n        // }\n\n        setCandidates(array); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setupVote();\n  }, [web3]);\n  const long = {\n    width: '90%',\n    texAlign: 'center',\n    margin: 'auto',\n    color: '#f00000'\n  };\n\n  function VoteModal(name, address) {\n    var voteFor = async () => {\n      if (voteInstance) {\n        setVoting(true);\n        await voteInstance.methods.voteFor(address).send({\n          from: currentUser\n        });\n        setVoting(false);\n        setLoad(!load);\n      }\n    };\n\n    if (!hasVoted) {\n      return __jsx(Modal, {\n        trigger: __jsx(\"button\", {\n          className: \"ui right floated inverted red button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 30\n          }\n        }, \"Vote\"),\n        header: \"Vote!\",\n        content: \"are you sure you want to vote for \" + name + \" ?\",\n        actions: [__jsx(\"button\", {\n          key: 1,\n          className: \"ui inverted green button\",\n          onClick: voteFor,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 21\n          }\n        }, \"yes\"), __jsx(\"button\", {\n          key: 2,\n          className: \"ui inverted red button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }\n        }, \"no\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }\n      });\n    } else return __jsx(React.Fragment, null);\n  }\n\n  function leaveElection() {\n    var startDate = new Date(currentVote.startDate * 1);\n    var currDate = new Date();\n\n    var leavethis = async () => {\n      if (voteInstance) {\n        setVoting(true);\n        await voteInstance.methods.leaveElection().send({\n          from: currentUser\n        });\n        setVoting(false);\n        setLoad(!load);\n      }\n    };\n\n    if (currDate < startDate) {\n      return __jsx(Modal, {\n        trigger: __jsx(\"button\", {\n          className: \"ui right floated inverted red button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 28\n          }\n        }, \"Leave Election\"),\n        header: \"Leave Election\",\n        content: \"are you sure you want to no longer be a candidate\",\n        actions: [__jsx(\"button\", {\n          key: 1,\n          className: \"ui inverted green button\",\n          onClick: leavethis,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 19\n          }\n        }, \"yes\"), __jsx(\"button\", {\n          key: 2,\n          className: \"ui inverted red button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 19\n          }\n        }, \"no\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }\n      });\n    }\n  }\n\n  function applyELection() {\n    var startDate = new Date(currentVote.startDate * 1);\n    var currDate = new Date(); //   if(currDate<startDate){\n\n    return __jsx(Link, {\n      route: `/elections/apply/${voteAddress}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }, __jsx(\"button\", {\n      className: \"extra content ui inverted red button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 19\n      }\n    }, __jsx(\"i\", {\n      className: \"plus icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 24\n      }\n    }), \" Apply as Candidate\"))); //   }\n  }\n\n  const data = [];\n  /*\r\n  <div className=\"content ui container\">\r\n      <div className=\"header clearing segment\">\r\n          {candidate.name} {VoteModal(candidate.name, candidate.candidateAddr)}:        {candidate.numVotes/currentVote.numVotes*100}%\r\n        </div>\r\n  </div>\r\n  */\n\n  function displayPer() {\n    var newrow = {};\n\n    if (candidates == \"\") {\n      return __jsx(\"div\", {\n        className: \"card\",\n        style: long,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 22\n        }\n      }, __jsx(\"div\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 27\n        }\n      }, __jsx(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 31\n        }\n      }, \"no candidates yet\")));\n    }\n\n    return candidates.map((candidate, index) => __jsx(\"div\", {\n      className: \"card\",\n      style: long,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      style: {\n        color: '#FFFFFF'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 15\n      }\n    }, (newrow = {}, newrow[candidate.name] = candidate.numVotes, data.push(newrow)))));\n  }\n\n  console.log(data);\n\n  function chart() {\n    return __jsx(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }\n    }, __jsx(PieChart, {\n      width: 400,\n      height: 400,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, __jsx(Pie, {\n      dataKey: \"users\",\n      isAnimationActive: false,\n      data: data,\n      cx: 200,\n      cy: 200,\n      outerRadius: 80,\n      fill: \"#8884d8\",\n      label: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 22\n      }\n    }), __jsx(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 22\n      }\n    })));\n  }\n\n  function displayCandidates() {\n    if (candidates == \"\") {\n      return __jsx(\"div\", {\n        className: \"card\",\n        style: long,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 20\n        }\n      }, __jsx(\"div\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 25\n        }\n      }, __jsx(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 29\n        }\n      }, \"no candidates yet\")));\n    }\n\n    return candidates.map((candidate, index) => __jsx(\"div\", {\n      className: \"card\",\n      style: long,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"content ui container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"header clearing segment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }\n    }, candidate.name, \" \", VoteModal(candidate.name, candidate.candidateAddr)), __jsx(\"div\", {\n      className: \"header clearing segment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }\n    }, leaveElection()), __jsx(\"div\", {\n      className: \"meta\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }\n    }, candidate.candidateAddr), __jsx(\"div\", {\n      className: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }\n    }, candidate.description))));\n  }\n\n  var voted;\n\n  if (hasVoted) {\n    voted = __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }\n    }, __jsx(\"i\", {\n      className: \"floated check icon right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 23\n      }\n    }), \" You have already Voted\");\n  } else {\n    voted = __jsx(React.Fragment, null);\n  }\n\n  function formatVote() {\n    if (currentVote) {\n      var startDate = new Date(currentVote.startDate * 1);\n      var endDate = new Date(currentVote.endDate * 1);\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"ui card\",\n        style: long,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 17\n        }\n      }, __jsx(\"div\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }\n      }, __jsx(\"div\", {\n        className: \"header container\",\n        style: {\n          color: '#f00000'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 25\n        }\n      }, currentVote.title, __jsx(\"span\", {\n        className: \"floated right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 29\n        }\n      }, voted)), __jsx(\"div\", {\n        className: \"meta\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 25\n        }\n      }, startDate.toUTCString().slice(0, 17), \" to \", endDate.toUTCString().slice(0, 17)), __jsx(\"div\", {\n        className: \"ui card\",\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 25\n        }\n      }, __jsx(\"div\", {\n        className: \"description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 29\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 29\n        }\n      }, currentVote.description)))), __jsx(\"div\", {\n        style: {\n          textAlign: 'center',\n          margin: '50px',\n          color: '#f00000'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }\n      }, __jsx(\"div\", {\n        className: \"ui cards\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }\n      }, displayCandidates()), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }\n      }), __jsx(Loader, {\n        active: voting,\n        inline: \"centered\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }\n      })), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }\n      }), __jsx(\"div\", {\n        className: \"extra content\",\n        style: {\n          color: '#f00000'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 21\n        }\n      }, __jsx(\"i\", {\n        className: \"check icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 25\n        }\n      }), currentVote.numVotes, \" Votes\"), applyELection(), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 21\n        }\n      }), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }\n      }), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }\n      }), displayPer(), chart()));\n    } else {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 20\n        }\n      }, \" loading vote ...\");\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 13\n    }\n  }), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }\n  }, formatVote()), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Vote;","map":{"version":3,"sources":["C:/Users/foubroker/Desktop/BAM/voting-at-mcgill-2/client/src/pages/elections/vote/vote.js"],"names":["React","useEffect","useState","Header","getWeb3","VoteContract","Link","Modal","Dimmer","Loader","Image","Segment","PieChart","Pie","Tooltip","BarChart","XAxis","YAxis","Legend","CartesianGrid","Bar","Vote","web3Instance","web3","setWeb3","voteAddress","setVoteAddress","currentVote","setCurrentVote","voteInstance","setVoteInstance","candidates","setCandidates","currentUser","setCurrentUser","voting","setVoting","hasVoted","setHasVoted","load","setLoad","initWeb3","getElectionAddress","url","window","location","href","pos","indexOf","slice","console","log","setupVote","instance","eth","Contract","abi","methods","currentElection","call","current","getAccounts","getElectionVoter","candidatesAddresses","getCandidatesAddresses","array","error","alert","long","width","texAlign","margin","color","VoteModal","name","address","voteFor","send","from","leaveElection","startDate","Date","currDate","leavethis","applyELection","data","displayPer","newrow","map","candidate","index","numVotes","push","chart","textAlign","displayCandidates","candidateAddr","description","voted","formatVote","endDate","title","toUTCString"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { Header } from '../../../components/header'\r\nimport getWeb3 from \"../../../getWeb3\";\r\nimport VoteContract from \"../../../contracts/Vote.json\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Link } from '../../../../routes';\r\nimport { Modal, Dimmer, Loader, Image, Segment } from 'semantic-ui-react'\r\nimport {\r\n  PieChart,\r\n  Pie,\r\n  Tooltip,\r\n  BarChart,\r\n  XAxis,\r\n  YAxis,\r\n  Legend,\r\n  CartesianGrid,\r\n  Bar,\r\n} from \"recharts\";\r\n\r\nconst Vote = () => {\r\n\r\n    var web3Instance;\r\n    const [web3, setWeb3] = useState('');\r\n    const [voteAddress, setVoteAddress] = useState('')\r\n    const [currentVote, setCurrentVote] = useState('')\r\n    const [voteInstance, setVoteInstance] = useState('')\r\n    const [candidates, setCandidates ] = useState('');\r\n    const [currentUser, setCurrentUser ] = useState('');\r\n    const [voting, setVoting ] = useState(false)\r\n    const [hasVoted, setHasVoted] = useState(false)\r\n    const [load, setLoad] = useState(true)\r\n\r\n    useEffect(() => {\r\n        async function initWeb3() {\r\n            web3Instance = await getWeb3();\r\n            setWeb3(web3Instance);\r\n        }\r\n        var getElectionAddress = async() =>{\r\n            const url=window.location.href;\r\n            const pos=url.indexOf('vote')+5;\r\n            setVoteAddress(url.slice(pos));\r\n            console.log(voteAddress);\r\n          };\r\n        initWeb3();\r\n        getElectionAddress();\r\n    },[load]);\r\n\r\n    useEffect(() => {\r\n        async function setupVote() {\r\n            if(web3 == '') {\r\n                return;\r\n            }\r\n            try {\r\n                // Get the contract instance.\r\n                const instance = await new web3.eth.Contract(\r\n                    VoteContract.abi,\r\n                    voteAddress\r\n                );\r\n                setVoteInstance(instance);\r\n                setCurrentVote(await instance.methods.currentElection().call());\r\n                var current\r\n                [current] = await web3.eth.getAccounts()\r\n                setCurrentUser(current)\r\n                setHasVoted(await instance.methods.getElectionVoter(current).call())\r\n                const candidatesAddresses = await instance.methods.getCandidatesAddresses().call();\r\n                console.log(candidatesAddresses)\r\n                // const candidatesCount = await instance.methods.candidatesCount().call();\r\n                var array = []\r\n                // for (var i = 0; i < candidatesAddresses.length; i++){\r\n                    // array.push(await instance.methods.get_candidates(candidatesAddresses[i]));\r\n                // }\r\n                setCandidates(array);\r\n                // Set web3, accounts, and contract to the state, and then proceed with an\r\n            } catch (error) {\r\n            // Catch any errors for any of the above operations.\r\n            alert(\r\n                `Failed to load web3, accounts, or contract. Check console for details.`,\r\n            );\r\n            console.error(error);\r\n            }\r\n        }\r\n        setupVote();\r\n    },[web3])\r\n\r\n    const long = {\r\n        width: '90%',\r\n        texAlign:'center',\r\n        margin: 'auto',\r\n        color: '#f00000',\r\n    }\r\n\r\n    function VoteModal(name,address) {\r\n        var voteFor = async () => {\r\n            if(voteInstance){\r\n                setVoting(true)\r\n                await voteInstance.methods.voteFor(address).send({\r\n                    from: currentUser\r\n                })\r\n                setVoting(false)\r\n                setLoad(!load)\r\n            }\r\n        }\r\n        if(!hasVoted){\r\n            return (\r\n                <Modal\r\n                    trigger={<button className=\"ui right floated inverted red button\">Vote</button>}\r\n                    header=\"Vote!\"\r\n                    content={\"are you sure you want to vote for \"+ name+\" ?\"}\r\n                    actions={[\r\n                    <button key={1} className=\"ui inverted green button\" onClick={voteFor}>yes</button>,\r\n                    <button key={2} className=\"ui inverted red button\" >no</button>]}\r\n                />\r\n            )\r\n        }\r\n        else return (<></>)\r\n    }\r\n    function  leaveElection(){\r\n          var startDate = new Date(currentVote.startDate * 1)\r\n          var currDate= new Date()\r\n          var leavethis = async () => {\r\n              if(voteInstance){\r\n                setVoting(true)\r\n                await voteInstance.methods.leaveElection().send({\r\n                    from: currentUser\r\n                })\r\n                setVoting(false)\r\n                setLoad(!load)\r\n              }\r\n          }\r\n          if(currDate<startDate){\r\n            return (\r\n              <Modal\r\n                  trigger={<button className=\"ui right floated inverted red button\">Leave Election</button>}\r\n                  header=\"Leave Election\"\r\n                  content={\"are you sure you want to no longer be a candidate\"}\r\n                  actions={[\r\n                  <button key={1} className=\"ui inverted green button\"onClick={leavethis}>yes</button>,\r\n                  <button key={2} className=\"ui inverted red button\" >no</button>]}\r\n              />\r\n            )\r\n          }\r\n    }\r\n    function applyELection(){\r\n      var startDate = new Date(currentVote.startDate * 1)\r\n      var currDate= new Date()\r\n    //   if(currDate<startDate){\r\n        return(\r\n          <Link route ={`/elections/apply/${voteAddress}`}>\r\n              <button className=\"extra content ui inverted red button\" >\r\n                  <div><i className=\"plus icon\"></i> Apply as Candidate</div>\r\n              </button>\r\n          </Link>\r\n        )\r\n    //   }\r\n    }\r\n    const data=[];\r\n    /*\r\n    <div className=\"content ui container\">\r\n        <div className=\"header clearing segment\">\r\n\r\n          {candidate.name} {VoteModal(candidate.name, candidate.candidateAddr)}:        {candidate.numVotes/currentVote.numVotes*100}%\r\n\r\n        </div>\r\n    </div>\r\n    */\r\n    function displayPer() {\r\n          var newrow={};\r\n          if (candidates == \"\"){\r\n              return <div  className=\"card\" style={long}>\r\n                          <div className=\"content\">\r\n                              <div className=\"header\">\r\n                                  no candidates yet\r\n                              </div>\r\n                          </div>\r\n                      </div>\r\n\r\n          }\r\n\r\n          return candidates.map((candidate,index) =>\r\n\r\n          <div className=\"card\"  style={long} key={index}>\r\n\r\n              <div style= {{color: '#FFFFFF'}}>\r\n              {\r\n              newrow={},\r\n              newrow[candidate.name]=candidate.numVotes,\r\n              data.push(newrow)}\r\n              </div>\r\n          </div>\r\n\r\n        )\r\n    }\r\n    console.log(data);\r\n    function chart(){\r\n      return(\r\n        <div style={{textAlign:\"center\"}}>\r\n            <PieChart width={400} height={400}>\r\n                     <Pie\r\n                       dataKey=\"users\"\r\n                       isAnimationActive={false}\r\n                       data={data}\r\n                       cx={200}\r\n                       cy={200}\r\n                       outerRadius={80}\r\n                       fill=\"#8884d8\"\r\n                       label\r\n                     />\r\n                     <Tooltip />\r\n            </PieChart>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    function displayCandidates() {\r\n        if (candidates == \"\"){\r\n            return <div  className=\"card\" style={long}>\r\n                        <div className=\"content\">\r\n                            <div className=\"header\">\r\n                                no candidates yet\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        }\r\n\r\n        return candidates.map((candidate,index) =>\r\n        <div className=\"card\"  style={long} key={index}>\r\n            <div className=\"content ui container\">\r\n                <div className=\"header clearing segment\">\r\n                    {candidate.name} {VoteModal(candidate.name, candidate.candidateAddr)}\r\n                </div>\r\n                <div className=\"header clearing segment\">\r\n                    {leaveElection()}\r\n                </div>\r\n                <div className=\"meta\">\r\n                    {candidate.candidateAddr}\r\n                </div>\r\n                <div className=\"description\">\r\n                    {candidate.description}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        )\r\n    }\r\n    var voted;\r\n    if(hasVoted) {\r\n        voted = <span><i className=\"floated check icon right\"></i> You have already Voted</span>;\r\n    } else {\r\n        voted = <></>\r\n    }\r\n\r\n    function formatVote() {\r\n        if (currentVote){\r\n            var startDate = new Date(currentVote.startDate * 1)\r\n            var endDate = new Date(currentVote.endDate * 1)\r\n            return <>\r\n                <div className=\"ui card\" style={long}>\r\n                    <div className=\"content\">\r\n                        <div className=\"header container\" style= {{color: '#f00000'}}>\r\n                            {currentVote.title}\r\n                            <span className=\"floated right\">{voted}</span>\r\n                        </div>\r\n                        <div className=\"meta\">{startDate.toUTCString().slice(0,17)} to {endDate.toUTCString().slice(0,17)}</div>\r\n                        <div className=\"ui card\" style= {{width: '100%'}}>\r\n                            <div className=\"description\" >\r\n                            <p>{currentVote.description}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{textAlign:'center', margin:'50px', color: '#f00000'}}>\r\n                    <div className =\"ui cards\">{displayCandidates()}</div>\r\n                    <br></br>\r\n                    <Loader\r\n                        active={voting}\r\n                        inline='centered'\r\n                    />\r\n                    </div>\r\n                    <div>\r\n                </div>\r\n\r\n                    <div className=\"extra content\" style= {{color: '#f00000'}}>\r\n                        <i className=\"check icon\"></i>\r\n                        {currentVote.numVotes} Votes\r\n                    </div>\r\n                    {applyELection()}\r\n                    <br></br>\r\n                    <br></br>\r\n                    <br></br>\r\n                    {displayPer()}\r\n                    {chart()}\r\n                </div>\r\n            </>\r\n        }\r\n        else{\r\n            return <div> loading vote ...</div>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <h1>{formatVote()}</h1>\r\n            <br></br>\r\n            <br></br>\r\n\r\n\r\n        </>\r\n    )\r\n\r\n}\r\nexport default Vote;\r\n"]},"metadata":{},"sourceType":"module"}