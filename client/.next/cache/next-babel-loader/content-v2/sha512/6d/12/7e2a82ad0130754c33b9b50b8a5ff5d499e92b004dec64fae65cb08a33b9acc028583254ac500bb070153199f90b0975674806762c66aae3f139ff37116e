{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\PROJECT_VOTE\\\\voting-at-mcgill\\\\client\\\\src\\\\pages\\\\elections\\\\apply\\\\apply.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Header } from '../../../components/header';\nimport VoteFactoryContract from \"../../../contracts/VoteFactory.json\";\nimport VoteContract from \"../../../contracts/Vote.json\";\nimport * as m from \"@material-ui/core\";\nimport getWeb3 from \"../../../getWeb3\";\n\nconst Apply = () => {\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  var web3Instance;\n  useEffect(() => {\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, []); //please follow the course for a better implementation @Jing\n\n  const {\n    0: candidateName,\n    1: setName\n  } = useState('');\n\n  const changeName = event => {\n    setName(event.target.value);\n  };\n\n  const {\n    0: currentDate,\n    1: setCurrentDate\n  } = useState(0);\n\n  const changeCurrentDate = event => {\n    setCurrentDate(event.target.value);\n  };\n\n  const {\n    0: description,\n    1: setDescription\n  } = useState('');\n\n  const changeDescription = event => {\n    setDescription(event.target.value);\n  };\n\n  var onSubmit = async event => {\n    event.preventDefault();\n    var addressOfVote;\n    var manager;\n    var factoryContract;\n    var voteContract;\n\n    var getElectionAddress = async () => {\n      const url = window.location.href;\n      const pos = url.indexOf('y') + 2;\n      addressOfVote = url.slice(pos);\n      console.log(addressOfVote);\n    };\n\n    var setupVoteFactory = async () => {\n      //initializes voteFactory\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        [manager] = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        factoryContract = instance; // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    var initializeElection = async () => {\n      //initializes vote contract\n      try {\n        // Get the contract instance.\n        const instance = await new web3.eth.Contract(VoteContract.abi, addressOfVote);\n        voteContract = instance;\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    var setCandidate = async () => {\n      await voteContract.methods.enterElection(candidateName, description, new Date(currentDate).getTime()).send({\n        from: manager\n      });\n    };\n\n    var displayCand = async () => {\n      // testing purposes\n      const summary = await voteContract.methods.get_candidates(manager).call();\n      console.log(summary);\n    };\n\n    await setupVoteFactory();\n    await getElectionAddress();\n    await initializeElection();\n    await setCandidate();\n    await displayCand();\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, \"Run for Election\"), __jsx(\"h3\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, \" \"), __jsx(\"form\", {\n    onSubmit: onSubmit,\n    noValidate: true,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    required: true,\n    fullWidth: true,\n    label: \"Name\",\n    variant: \"outlined\",\n    value: candidateName,\n    onChange: changeName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    label: \"Current date\",\n    type: \"date\",\n    variant: \"outlined\",\n    InputLabelProps: {\n      shrink: true\n    },\n    value: currentDate,\n    onChange: changeCurrentDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    required: true,\n    multiline: true,\n    fullWidth: true,\n    label: \"Description\",\n    rows: 4,\n    variant: \"outlined\",\n    value: description,\n    onChange: changeDescription,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, __jsx(m.Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  }, \"Cancel\"), __jsx(m.Button, {\n    type: \"submit\",\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }, \"Run for Election\"))));\n};\n/*Apply.getInitialProps = async (props) => {\r\n    console.log(props.query.address)\r\n    return {VoteContract: props.query.address}\r\n  };\r\n*/\n\n\nexport default Apply;","map":{"version":3,"sources":["C:/Users/foubroker/PROJECT_VOTE/voting-at-mcgill/client/src/pages/elections/apply/apply.js"],"names":["React","useState","useEffect","Header","VoteFactoryContract","VoteContract","m","getWeb3","Apply","web3","setWeb3","web3Instance","initWeb3","candidateName","setName","changeName","event","target","value","currentDate","setCurrentDate","changeCurrentDate","description","setDescription","changeDescription","onSubmit","preventDefault","addressOfVote","manager","factoryContract","voteContract","getElectionAddress","url","window","location","href","pos","indexOf","slice","console","log","setupVoteFactory","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","initializeElection","setCandidate","methods","enterElection","Date","getTime","send","from","displayCand","summary","get_candidates","call","color","shrink"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Header } from '../../../components/header';\r\nimport VoteFactoryContract from \"../../../contracts/VoteFactory.json\";\r\nimport VoteContract from \"../../../contracts/Vote.json\";\r\nimport * as m from \"@material-ui/core\";\r\nimport getWeb3 from \"../../../getWeb3\";\r\n\r\nconst Apply = () => {\r\n\r\n    const [web3, setWeb3] = useState('');\r\n    var web3Instance;\r\n    useEffect(() => {\r\n        async function initWeb3() {\r\n            web3Instance = await getWeb3();\r\n            setWeb3(web3Instance);\r\n        }\r\n        initWeb3();\r\n    },[]);\r\n\r\n    //please follow the course for a better implementation @Jing\r\n    const [candidateName, setName] = useState('');\r\n    const changeName = (event) => {\r\n        setName(event.target.value);\r\n    };\r\n    const [currentDate, setCurrentDate] = useState(0);\r\n    const changeCurrentDate = (event) => {\r\n        setCurrentDate(event.target.value);\r\n    };\r\n\r\n    const [description, setDescription] = useState('');\r\n    const changeDescription = (event) => {\r\n        setDescription(event.target.value);\r\n    };\r\n\r\n\r\n    var onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        var addressOfVote\r\n        var manager\r\n        var factoryContract\r\n        var voteContract;\r\n        var getElectionAddress = async() =>{\r\n          const url=window.location.href;\r\n          const pos=url.indexOf('y')+2;\r\n          addressOfVote= url.slice(pos);\r\n          console.log(addressOfVote);\r\n        };\r\n        var setupVoteFactory = async () => { //initializes voteFactory\r\n            if(web3 == '') {\r\n                return;\r\n            }\r\n            try {\r\n                [manager] = (await web3.eth.getAccounts());\r\n                // Get the contract instance.\r\n                const networkId = await web3.eth.net.getId();\r\n                const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n                const instance = new web3.eth.Contract(\r\n                    VoteFactoryContract.abi,\r\n                    deployedNetwork && deployedNetwork.address,\r\n                );\r\n                factoryContract = instance;\r\n\r\n                // Set web3, accounts, and contract to the state, and then proceed with an\r\n            } catch (error) {\r\n                // Catch any errors for any of the above operations.\r\n                alert(\r\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\r\n                );\r\n                console.error(error);\r\n            }\r\n        }\r\n        var initializeElection = async () => {//initializes vote contract\r\n            try {\r\n                // Get the contract instance.\r\n                const instance = await new web3.eth.Contract(\r\n                    VoteContract.abi,\r\n                    addressOfVote,\r\n                );\r\n                voteContract = instance;\r\n            } catch (error) {\r\n                // Catch any errors for any of the above operations.\r\n                alert(\r\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\r\n                );\r\n                console.error(error);\r\n            }\r\n        }\r\n        var setCandidate = async () => {\r\n          await voteContract.methods.enterElection(candidateName, description ,new Date(currentDate).getTime()).send({from: manager});\r\n        };\r\n        var displayCand = async () => { // testing purposes\r\n            const summary = await voteContract.methods.get_candidates(manager).call();\r\n            console.log(summary);\r\n        };\r\n        await setupVoteFactory();\r\n        await getElectionAddress();\r\n        await initializeElection();\r\n        await setCandidate();\r\n        await displayCand();\r\n    };\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <h1>Run for Election</h1>\r\n            <h3 style={{color: \"red\"}}> </h3>\r\n            <form onSubmit={onSubmit} noValidate autoComplete=\"off\">\r\n                <div>\r\n                    <m.TextField required fullWidth label=\"Name\"\r\n                                 variant=\"outlined\"\r\n                                 value={candidateName}\r\n                                 onChange={changeName}\r\n                    >\r\n\r\n                    </m.TextField>\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <m.TextField label=\"Current date\" type=\"date\"\r\n                                 variant=\"outlined\"\r\n                                 InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                 value={currentDate}\r\n                                 onChange={changeCurrentDate}\r\n                    >\r\n\r\n                    </m.TextField>\r\n                </div>\r\n\r\n                <br></br>\r\n                <div>\r\n                    {/*<m.TextField label=\"Select groups (someone help with the search and select multiple plz)\" variant=\"outlined\" /> */}\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <m.TextField required multiline fullWidth\r\n                                 label=\"Description\"\r\n                                 rows={4}\r\n                                 variant=\"outlined\"\r\n                                 value={description}\r\n                                 onChange={changeDescription}\r\n                    />\r\n                </div>\r\n\r\n                <br></br>\r\n                <div>\r\n                    <m.Button>Cancel</m.Button>\r\n                    <m.Button type=\"submit\" onSubmit={onSubmit}>Run for Election</m.Button>\r\n                </div>\r\n\r\n\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\n/*Apply.getInitialProps = async (props) => {\r\n    console.log(props.query.address)\r\n    return {VoteContract: props.query.address}\r\n  };\r\n*/\r\nexport default Apply;\r\n"]},"metadata":{},"sourceType":"module"}