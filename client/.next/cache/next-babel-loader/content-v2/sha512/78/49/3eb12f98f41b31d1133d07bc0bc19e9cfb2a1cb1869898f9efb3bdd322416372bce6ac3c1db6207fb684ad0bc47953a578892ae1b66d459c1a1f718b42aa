{"ast":null,"code":"import Web3 from \"web3\";\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  let foo = null;\n\n  if (false) {\n    foo = window.localStorage.getItem(\"foo\");\n  } // Wait for loading completion to avoid race conditions with web3 injection timing.\n\n\n  window.addEventListener(\"load\", async () => {\n    // Modern dapp browsers...\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n\n      try {\n        // Request account access if needed\n        await window.ethereum.enable(); // Acccounts now exposed\n\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    } // Legacy dapp browsers...\n    else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      } // Fallback to localhost; use dev console port by default...\n      else {\n          const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n          const web3 = new Web3(provider);\n          console.log(\"No web3 instance injected, using Local web3.\");\n          resolve(web3);\n        }\n  });\n});\n\nexport default getWeb3;","map":{"version":3,"sources":["C:/Users/foubroker/PROJECT_VOTE/voting-at-mcgill/client/src/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","foo","window","localStorage","getItem","addEventListener","ethereum","web3","enable","error","console","log","provider","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,OAAO,GAAG,MACd,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,MAAIC,GAAG,GAAG,IAAV;;AACA,aAAmC;AACjCA,IAAAA,GAAG,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,KAA5B,CAAN;AACD,GAJ8B,CAK/B;;;AACAF,EAAAA,MAAM,CAACG,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C;AACA,QAAIH,MAAM,CAACI,QAAX,EAAqB;AACnB,YAAMC,IAAI,GAAG,IAAIX,IAAJ,CAASM,MAAM,CAACI,QAAhB,CAAb;;AACA,UAAI;AACF;AACA,cAAMJ,MAAM,CAACI,QAAP,CAAgBE,MAAhB,EAAN,CAFE,CAGF;;AACAT,QAAAA,OAAO,CAACQ,IAAD,CAAP;AACD,OALD,CAKE,OAAOE,KAAP,EAAc;AACdT,QAAAA,MAAM,CAACS,KAAD,CAAN;AACD;AACF,KAVD,CAWA;AAXA,SAYK,IAAIP,MAAM,CAACK,IAAX,EAAiB;AACpB;AACA,cAAMA,IAAI,GAAGL,MAAM,CAACK,IAApB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAZ,QAAAA,OAAO,CAACQ,IAAD,CAAP;AACD,OALI,CAML;AANK,WAOA;AACH,gBAAMK,QAAQ,GAAG,IAAIhB,IAAI,CAACiB,SAAL,CAAeC,YAAnB,CACf,uBADe,CAAjB;AAGA,gBAAMP,IAAI,GAAG,IAAIX,IAAJ,CAASgB,QAAT,CAAb;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAZ,UAAAA,OAAO,CAACQ,IAAD,CAAP;AACD;AACF,GA7BD;AA8BD,CApCD,CADF;;AAuCA,eAAeV,OAAf","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    let foo = null;\r\n    if (typeof window !== \"undefined\") {\r\n      foo = window.localStorage.getItem(\"foo\");\r\n    }\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n"]},"metadata":{},"sourceType":"module"}