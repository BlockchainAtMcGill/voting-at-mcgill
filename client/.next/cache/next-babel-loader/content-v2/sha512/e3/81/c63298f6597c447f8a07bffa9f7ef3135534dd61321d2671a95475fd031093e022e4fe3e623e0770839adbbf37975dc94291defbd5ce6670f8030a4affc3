{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\Desktop\\\\BAM\\\\voting-at-mcgill-2\\\\client\\\\src\\\\pages\\\\newElection.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Header } from '../components/header';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport { Form } from \"semantic-ui-react\";\nimport getWeb3 from \"../getWeb3\";\nimport 'semantic-ui-css/semantic.min.css';\nimport Router from 'next/router';\nconst adminTitle = {\n  color: \"red\",\n  marginBottom: \"5%\",\n  fontSize: \"3em\",\n  textAlign: \"center\"\n};\nconst adminFields = {\n  margin: \"auto 5% auto 5%\"\n};\n\nconst NewElection = () => {\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: manager,\n    1: setManager\n  } = useState('');\n  const {\n    0: voteFactory,\n    1: setVoteFactory\n  } = useState('');\n  const {\n    0: groupsID,\n    1: setGroupsID\n  } = useState('');\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n  const {\n    0: startDate,\n    1: setStartDate\n  } = useState(0);\n  const {\n    0: endDate,\n    1: setEndDate\n  } = useState(0);\n  const {\n    0: electionType,\n    1: setElectionType\n  } = useState('majority');\n  const {\n    0: electionGroups,\n    1: setElectionGroups\n  } = useState([]);\n  const {\n    0: description,\n    1: setDescription\n  } = useState(''); // initializing web3\n\n  useEffect(() => {\n    var web3Instance;\n\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, []); // Initializing VoteFactory contract\n\n  useEffect(() => {\n    async function setup() {\n      if (web3 == \"\") {\n        console.log('unable to get factory');\n        return;\n      }\n\n      try {\n        var [user] = await web3.eth.getAccounts();\n        setManager(user);\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        setVoteFactory(instance);\n      } catch (error) {\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setup();\n  }, [web3]); // Return all group IDs of a user as an array\n\n  useEffect(() => {\n    var displayVotes = async () => {\n      if (contract == '') {\n        return;\n      }\n\n      const response = await voteFactory.methods.getUserAllGroups().call();\n      const temp = [];\n\n      for (var i = 0; i < response.length; i++) {\n        temp[i] = parseInt(response[i]);\n      }\n\n      console.log(temp);\n      setGroupsID(temp);\n    };\n\n    displayVotes();\n  }, [voteFactory]);\n  const electionTypes = [{\n    key: 'sm',\n    text: 'simple majority',\n    value: 'majority'\n  }, {\n    key: 'tt',\n    text: 'two thirds',\n    value: 'twoThirds'\n  }];\n\n  var onSubmit = async event => {\n    event.preventDefault();\n    var factoryContract;\n    var voteContract;\n    var addressOfVote;\n\n    var setupVoteFactory = async () => {\n      //initializes voteFactory\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        factoryContract = instance; // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    var createVote = async () => {\n      //uses voteFactory to create Vote\n      if (factoryContract == '') {\n        return;\n      } // Get the value from the contract to prove it worked.\n\n\n      await factoryContract.methods.createVote(0).send({\n        from: manager\n      });\n    };\n\n    var getElectionAddress = async () => {\n      //calls voteFactory method to get new Vote address\n      const response = await factoryContract.methods.getDeployedVotes().call();\n      addressOfVote = response[response.length - 1];\n    };\n\n    var initializeElection = async () => {\n      //initializes vote contract\n      try {\n        // Get the contract instance.\n        const instance = await new web3.eth.Contract(VoteContract.abi, addressOfVote);\n        voteContract = instance;\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    var setUpElection = async () => {\n      //call to vote contract to edit election\n      if (!voteContract) {\n        console.log(\"voteContract dne\");\n        return;\n      }\n\n      await voteContract.methods.editElection(title, new Date(startDate).getTime(), new Date(endDate).getTime(), description, electionType).send({\n        from: manager\n      });\n    };\n\n    var displayVote = async () => {\n      // testing purposes\n      const summary = await voteContract.methods.currentElection().call();\n      console.log(summary);\n    };\n\n    await setupVoteFactory();\n    await createVote();\n    await getElectionAddress();\n    await initializeElection();\n    await setUpElection();\n    await displayVote();\n    Router.push(\"/\");\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }), __jsx(\"h1\", {\n    style: adminTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, \"New Election\"), __jsx(Form, {\n    onSubmit: onSubmit,\n    style: adminFields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    required: true,\n    label: \"Election title\",\n    value: title,\n    onChange: event => setTitle(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    label: \"Start date\",\n    type: \"date\",\n    value: startDate,\n    onChange: event => setStartDate(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    required: true,\n    label: \"End date\",\n    type: \"date\",\n    value: endDate,\n    onChange: event => setEndDate(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Select, {\n    fluid: true,\n    label: \"Type of election\",\n    options: electionTypes,\n    placeholder: \"Type of election\",\n    value: electionType,\n    onChange: event => setElectionType(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 17\n    }\n  }, __jsx(Form.TextArea, {\n    required: true,\n    label: \"Description\",\n    value: description,\n    onChange: event => setDescription(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 21\n    }\n  }, \"Cancel\"), __jsx(Form.Button, {\n    type: \"submit\",\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 21\n    }\n  }, \"Publish Election\"))));\n};\n\nexport default NewElection;","map":{"version":3,"sources":["C:/Users/foubroker/Desktop/BAM/voting-at-mcgill-2/client/src/pages/newElection.js"],"names":["React","useState","useEffect","Header","VoteFactoryContract","VoteContract","Form","getWeb3","Router","adminTitle","color","marginBottom","fontSize","textAlign","adminFields","margin","NewElection","web3","setWeb3","manager","setManager","voteFactory","setVoteFactory","groupsID","setGroupsID","title","setTitle","startDate","setStartDate","endDate","setEndDate","electionType","setElectionType","electionGroups","setElectionGroups","description","setDescription","web3Instance","initWeb3","setup","console","log","user","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","displayVotes","contract","response","methods","getUserAllGroups","call","temp","i","length","parseInt","electionTypes","key","text","value","onSubmit","event","preventDefault","factoryContract","voteContract","addressOfVote","setupVoteFactory","createVote","send","from","getElectionAddress","getDeployedVotes","initializeElection","setUpElection","editElection","Date","getTime","displayVote","summary","currentElection","push","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Header } from '../components/header';\r\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\r\nimport VoteContract from \"../contracts/Vote.json\";\r\nimport { Form } from \"semantic-ui-react\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport Router from 'next/router';\r\n\r\nconst adminTitle = {\r\n    color: \"red\",\r\n    marginBottom: \"5%\",\r\n    fontSize: \"3em\",\r\n    textAlign: \"center\"\r\n};\r\n\r\nconst adminFields = {\r\n    margin: \"auto 5% auto 5%\"\r\n};\r\n\r\nconst NewElection = () => {\r\n\r\n    const [web3, setWeb3] = useState('');\r\n    const [manager, setManager] = useState('');\r\n    const [voteFactory, setVoteFactory] = useState('');\r\n    const [groupsID, setGroupsID] = useState('');\r\n\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [startDate, setStartDate] = useState(0);\r\n    const [endDate, setEndDate] = useState(0);\r\n    const [electionType, setElectionType] = useState('majority');\r\n    const [electionGroups, setElectionGroups] = useState([]);\r\n    const [description, setDescription] = useState('');\r\n    \r\n    // initializing web3\r\n    useEffect(() => {\r\n        var web3Instance;\r\n        async function initWeb3() {\r\n            web3Instance = await getWeb3();\r\n            setWeb3(web3Instance);\r\n        }\r\n        initWeb3();\r\n    },[]);\r\n\r\n    // Initializing VoteFactory contract\r\n    useEffect(()=> {\r\n        async function setup() {\r\n            if(web3 == \"\") {\r\n              console.log('unable to get factory')\r\n              return;\r\n            }\r\n            try {\r\n              var [user] = await web3.eth.getAccounts();\r\n              setManager(user);\r\n              const networkId = await web3.eth.net.getId();\r\n              const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n              const instance = new web3.eth.Contract(\r\n                VoteFactoryContract.abi,\r\n                deployedNetwork && deployedNetwork.address,\r\n              );\r\n              setVoteFactory(instance);\r\n          \r\n            } catch (error) {\r\n              alert(\r\n                `Failed to load web3, accounts, or contract. Check console for details.`,\r\n              );\r\n              console.error(error);\r\n            }\r\n          }\r\n            setup();\r\n\r\n    },[web3])\r\n\r\n    // Return all group IDs of a user as an array\r\n    useEffect(()=> {\r\n        var displayVotes = async () => {\r\n        if(contract == '') {\r\n            return;\r\n        }\r\n        const response = await voteFactory.methods.getUserAllGroups().call();\r\n        const temp = [];\r\n        for (var i = 0; i < response.length; i++) {\r\n            temp[i] = parseInt(response[i]);\r\n        }\r\n        console.log(temp);\r\n        setGroupsID(temp);\r\n        };\r\n        displayVotes();\r\n    },[voteFactory]);\r\n\r\n    const electionTypes = [\r\n        {\r\n            key: 'sm',\r\n            text: 'simple majority',\r\n            value: 'majority'\r\n\r\n        },\r\n        {\r\n            key: 'tt',\r\n            text: 'two thirds',\r\n            value: 'twoThirds'\r\n        }\r\n    ];\r\n\r\n    var onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        var factoryContract;\r\n        var voteContract;\r\n        var addressOfVote;\r\n        var setupVoteFactory = async () => { //initializes voteFactory\r\n            if(web3 == '') {\r\n                return;\r\n            }\r\n            try {\r\n                // Get the contract instance.\r\n                const networkId = await web3.eth.net.getId();\r\n                const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n                const instance = new web3.eth.Contract(\r\n                    VoteFactoryContract.abi,\r\n                    deployedNetwork && deployedNetwork.address,\r\n                );\r\n                factoryContract = instance;\r\n\r\n                // Set web3, accounts, and contract to the state, and then proceed with an\r\n            } catch (error) {\r\n                // Catch any errors for any of the above operations.\r\n                alert(\r\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\r\n                );\r\n                console.error(error);\r\n            }\r\n        };\r\n        var createVote = async () => {//uses voteFactory to create Vote\r\n            if(factoryContract == ''){\r\n                return;\r\n            }\r\n            // Get the value from the contract to prove it worked.\r\n            await factoryContract.methods.createVote(0).send({\r\n                from: manager\r\n            });\r\n        };\r\n        var getElectionAddress = async () => {//calls voteFactory method to get new Vote address\r\n            const response = await factoryContract.methods.getDeployedVotes().call();\r\n            addressOfVote = response[response.length - 1];\r\n        };\r\n        var initializeElection = async () => {//initializes vote contract\r\n            try {\r\n                // Get the contract instance.\r\n                const instance = await new web3.eth.Contract(\r\n                    VoteContract.abi,\r\n                    addressOfVote,\r\n                );\r\n                voteContract = instance;\r\n            } catch (error) {\r\n                // Catch any errors for any of the above operations.\r\n                alert(\r\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\r\n                );\r\n                console.error(error);\r\n            }\r\n        };\r\n        var setUpElection = async() => {//call to vote contract to edit election\r\n            if (!voteContract) {\r\n                console.log(\"voteContract dne\");\r\n                return;\r\n            }\r\n            await voteContract.methods\r\n                .editElection(title, new Date(startDate).getTime(), new Date(endDate).getTime(), description, electionType)\r\n                .send({\r\n                    from: manager\r\n                })\r\n        };\r\n\r\n        var displayVote = async () => { // testing purposes\r\n            const summary = await voteContract.methods.currentElection().call();\r\n            console.log(summary);\r\n        };\r\n        await setupVoteFactory();\r\n        await createVote();\r\n        await getElectionAddress();\r\n        await initializeElection();\r\n        await setUpElection();\r\n        await displayVote();\r\n        Router.push(\"/\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <h1 style={adminTitle}>New Election</h1>\r\n            \r\n            <Form onSubmit={onSubmit} style={adminFields}>\r\n                <div>\r\n                    <Form.Input required label=\"Election title\"\r\n                                 value={title}\r\n                                 onChange={event => setTitle(event.target.value)}\r\n                    >\r\n\r\n                    </Form.Input>\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <Form.Input label=\"Start date\" type=\"date\"\r\n\r\n                                 value={startDate}\r\n                                 onChange={event => setStartDate(event.target.value)}\r\n                    >\r\n\r\n                    </Form.Input>\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <Form.Input required label=\"End date\" type=\"date\"\r\n\r\n                                 value={endDate}\r\n                                 onChange={event => setEndDate(event.target.value)}\r\n                    />\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <Form.Select\r\n                        fluid\r\n                        label='Type of election'\r\n                        options={electionTypes}\r\n                        placeholder='Type of election'\r\n                        value={electionType}\r\n                        onChange={event => setElectionType(event.target.value)}\r\n                    />\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <Form.TextArea required\r\n                                 label=\"Description\"\r\n\r\n                                 value={description}\r\n                                 onChange={event => setDescription(event.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <br></br>\r\n                <div>\r\n                    <Form.Button>Cancel</Form.Button>\r\n                    <Form.Button type=\"submit\" onSubmit={onSubmit}>Publish Election</Form.Button>\r\n                </div>\r\n\r\n\r\n            </Form>\r\n        </>\r\n    )\r\n};\r\nexport default NewElection;\r\n"]},"metadata":{},"sourceType":"module"}