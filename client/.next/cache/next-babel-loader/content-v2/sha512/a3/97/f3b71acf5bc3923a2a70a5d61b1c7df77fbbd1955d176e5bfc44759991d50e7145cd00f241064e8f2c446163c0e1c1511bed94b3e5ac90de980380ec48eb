{"ast":null,"code":"var _jsxFileName = \"/home/wen_wong/voting-at-mcgill/client/src/pages/joinGroup.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport 'semantic-ui-css/semantic.min.css';\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width: '80%'\n  }\n});\n\nconst JoinGroup = () => {\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: groupsID,\n    1: setGroupsID\n  } = useState('');\n  const {\n    0: contract,\n    1: setContract\n  } = useState('');\n  const {\n    0: renderedGroups,\n    1: renderGroups\n  } = useState([]);\n  useEffect(() => {\n    // get web3\n    async function initWeb3() {\n      console.log('initializing web3');\n      const web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, []);\n  useEffect(() => {\n    // get Factory contract\n    async function setup() {\n      if (web3 == \"\") {\n        console.log('unable to get factory');\n        return;\n      }\n\n      try {\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        setContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setup(); // console.log('ok')\n  }, [web3]);\n  useEffect(() => {\n    //display available votes addresses\n    var displayVotes = async () => {\n      if (contract == '') {\n        return;\n      }\n\n      const response = await contract.methods.getExistingGroups().call(); // Update state with the result.\n\n      const temp = [];\n\n      for (var i = 0; i < response.length; i++) {\n        temp[i] = parseInt(response[i]);\n      }\n\n      console.log(temp);\n      setGroupsID(temp);\n    };\n\n    displayVotes();\n  }, [contract]);\n\n  var displayInfo = async identification => {\n    if (groupsID == '') {\n      return;\n    }\n\n    try {\n      return await contract.methods.getGroup(identification).call();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    //render votes\n    var renderVotes = async () => {\n      if (!groupsID) {\n        return;\n      }\n\n      var temp = [];\n      await groupsID.forEach(identification => {\n        displayInfo(identification).then(newGroup => {\n          temp.push(newGroup);\n        });\n      });\n      setTimeout(function () {\n        renderGroups(temp);\n      }, 100);\n    };\n\n    renderVotes();\n  }, [groupsID]);\n  useEffect(() => {\n    if (renderedGroups) {\n      console.log(renderedGroups);\n    }\n  }, [renderedGroups]); //return <a>Hello World</a>;\n\n  return renderedGroups ? renderedGroups.map((group, index) => //<Link className=\"ui button\" route ={`/elections/vote/${vote}`} key={index}>\n  __jsx(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, group[1]) // <div className=\"ui link card\" style={{width:\"80%\", color: '#f00000'}}>\n  // <div className=\"card\">\n  // <div className=\"content\">\n  //     <div className=\"header\">{group[0][0]}</div>\n  //     <div className=\"description\">hello</div>\n  // </div>\n  // </div>\n  // </div>\n  ) : __jsx(React.Fragment, null);\n};\n\nexport default JoinGroup;","map":{"version":3,"sources":["/home/wen_wong/voting-at-mcgill/client/src/pages/joinGroup.js"],"names":["React","useState","useEffect","makeStyles","VoteFactoryContract","VoteContract","getWeb3","require","useStyles","card","width","JoinGroup","web3","setWeb3","groupsID","setGroupsID","contract","setContract","renderedGroups","renderGroups","initWeb3","console","log","web3Instance","setup","networkId","eth","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","displayVotes","response","methods","getExistingGroups","call","temp","i","length","parseInt","displayInfo","identification","getGroup","renderVotes","forEach","then","newGroup","push","setTimeout","map","group","index"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,mBAAP,MAAgC,+BAAhC;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAO,kCAAP;;AAEAC,OAAO,CAAC,6BAAD,CAAP;;AAEA,MAAMC,SAAS,GAAGL,UAAU,CAAC;AAC3BM,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAC;AADF;AADqB,CAAD,CAA5B;;AAMA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAA,OAACa,QAAD;AAAA,OAAWC;AAAX,MAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACe,QAAD;AAAA,OAAWC;AAAX,MAA0BhB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACiB,cAAD;AAAA,OAAiBC;AAAjB,MAAiClB,QAAQ,CAAC,EAAD,CAA/C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAAC;AACf,mBAAekB,QAAf,GAA0B;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,YAAMC,YAAY,GAAG,MAAMjB,OAAO,EAAlC;AACAO,MAAAA,OAAO,CAACU,YAAD,CAAP;AACD;;AACDH,IAAAA,QAAQ;AACT,GAPQ,EAOP,EAPO,CAAT;AASAlB,EAAAA,SAAS,CAAC,MAAM;AAAC;AACf,mBAAesB,KAAf,GAAuB;AACrB,UAAGZ,IAAI,IAAI,EAAX,EAAe;AACbS,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA;AACD;;AACD,UAAI;AACF;AACA,cAAMG,SAAS,GAAG,MAAMb,IAAI,CAACc,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAxB;AACA,cAAMC,eAAe,GAAGzB,mBAAmB,CAAC0B,QAApB,CAA6BL,SAA7B,CAAxB;AACA,cAAMM,QAAQ,GAAG,IAAInB,IAAI,CAACc,GAAL,CAASM,QAAb,CACf5B,mBAAmB,CAAC6B,GADL,EAEfJ,eAAe,IAAIA,eAAe,CAACK,OAFpB,CAAjB;AAIAjB,QAAAA,WAAW,CAACc,QAAD,CAAX,CARE,CAUF;AACD,OAXD,CAWE,OAAOI,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,CACF,wEADE,CAAL;AAGAf,QAAAA,OAAO,CAACc,KAAR,CAAcA,KAAd;AACD;AACF;;AACCX,IAAAA,KAAK,GAzBO,CA0BZ;AACH,GA3BQ,EA2BP,CAACZ,IAAD,CA3BO,CAAT;AA6BAV,EAAAA,SAAS,CAAC,MAAK;AAAC;AACd,QAAImC,YAAY,GAAG,YAAY;AAC7B,UAAGrB,QAAQ,IAAI,EAAf,EAAmB;AACjB;AACD;;AACD,YAAMsB,QAAQ,GAAG,MAAMtB,QAAQ,CAACuB,OAAT,CAAiBC,iBAAjB,GAAqCC,IAArC,EAAvB,CAJ6B,CAK7B;;AACA,YAAMC,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,QAAQ,CAACM,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxCD,QAAAA,IAAI,CAACC,CAAD,CAAJ,GAAUE,QAAQ,CAACP,QAAQ,CAACK,CAAD,CAAT,CAAlB;AACD;;AACDtB,MAAAA,OAAO,CAACC,GAAR,CAAYoB,IAAZ;AACA3B,MAAAA,WAAW,CAAC2B,IAAD,CAAX;AACD,KAZD;;AAaAL,IAAAA,YAAY;AACb,GAfQ,EAeP,CAACrB,QAAD,CAfO,CAAT;;AAkBA,MAAI8B,WAAW,GAAG,MAAOC,cAAP,IAA0B;AAC1C,QAAGjC,QAAQ,IAAI,EAAf,EAAmB;AACjB;AACD;;AACD,QAAI;AACF,aAAO,MAAME,QAAQ,CAACuB,OAAT,CAAiBS,QAAjB,CAA0BD,cAA1B,EAA0CN,IAA1C,EAAb;AACD,KAFD,CAEE,OAAON,KAAP,EAAc;AACdd,MAAAA,OAAO,CAACc,KAAR,CAAcA,KAAd;AACD;AACF,GATD;;AAUAjC,EAAAA,SAAS,CAAC,MAAK;AAAC;AACd,QAAI+C,WAAW,GAAG,YAAY;AAC1B,UAAI,CAACnC,QAAL,EAAe;AACb;AACD;;AACD,UAAI4B,IAAI,GAAG,EAAX;AACA,YAAM5B,QAAQ,CAACoC,OAAT,CAAiBH,cAAc,IAAI;AACrCD,QAAAA,WAAW,CAACC,cAAD,CAAX,CAA4BI,IAA5B,CAAiCC,QAAQ,IAAI;AAC3CV,UAAAA,IAAI,CAACW,IAAL,CAAUD,QAAV;AACH,SAFC;AAGH,OAJK,CAAN;AAKAE,MAAAA,UAAU,CAAC,YAAU;AACnBnC,QAAAA,YAAY,CAACuB,IAAD,CAAZ;AACD,OAFS,EAEP,GAFO,CAAV;AAGD,KAbH;;AAcAO,IAAAA,WAAW;AACZ,GAhBQ,EAgBP,CAACnC,QAAD,CAhBO,CAAT;AAkBAZ,EAAAA,SAAS,CAAC,MAAK;AACb,QAAGgB,cAAH,EAAmB;AACjBG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,cAAZ;AACD;AACF,GAJQ,EAIP,CAACA,cAAD,CAJO,CAAT,CA1FsB,CAgGpB;;AACA,SAAOA,cAAc,GAAGA,cAAc,CAACqC,GAAf,CAAmB,CAACC,KAAD,EAAQC,KAAR,KACvC;AACA;AAAI,IAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAAC,CAAD,CADR,CAFoB,CAKpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZoB,GAAH,GAanB,2BAbF;AAcH,CA/GD;;AAiHA,eAAe7C,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport 'semantic-ui-css/semantic.min.css';\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width:'80%'\n  }\n});\n\nconst JoinGroup = () => {\n  const [web3, setWeb3] = useState('');\n  const [groupsID, setGroupsID] = useState('');\n  const [contract, setContract] = useState('');\n  const [renderedGroups, renderGroups] = useState([]);\n\n  useEffect(() => {// get web3\n    async function initWeb3() {\n      console.log('initializing web3');\n      const web3Instance = await getWeb3();\n      setWeb3(web3Instance)\n    }\n    initWeb3();\n  },[]);\n\n  useEffect(() => {// get Factory contract\n    async function setup() {\n      if(web3 == \"\") {\n        console.log('unable to get factory')\n        return;\n      }\n      try {\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n          VoteFactoryContract.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n        setContract(instance);\n    \n        // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }\n    }\n      setup();\n      // console.log('ok')\n  },[web3]);\n\n  useEffect(()=> {//display available votes addresses\n    var displayVotes = async () => {\n      if(contract == '') {\n        return;\n      }\n      const response = await contract.methods.getExistingGroups().call();\n      // Update state with the result.\n      const temp = [];\n      for (var i = 0; i < response.length; i++) {\n        temp[i] = parseInt(response[i]);\n      }\n      console.log(temp);\n      setGroupsID(temp);\n    };\n    displayVotes();\n  },[contract]);\n  \n\n  var displayInfo = async (identification) => { \n    if(groupsID == '') {\n      return;\n    }\n    try {\n      return await contract.methods.getGroup(identification).call();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  useEffect(()=> {//render votes\n    var renderVotes = async () => {\n        if (!groupsID) {\n          return;\n        }\n        var temp = [];\n        await groupsID.forEach(identification => {\n            displayInfo(identification).then(newGroup => {\n              temp.push(newGroup);\n          });\n        });\n        setTimeout(function(){\n          renderGroups(temp);\n        }, 100);\n      }\n    renderVotes();\n  },[groupsID]);\n\n  useEffect(()=> {\n    if(renderedGroups) {\n      console.log(renderedGroups);\n    }\n  },[renderedGroups]);\n\n    //return <a>Hello World</a>;\n    return renderedGroups ? renderedGroups.map((group, index) => \n        //<Link className=\"ui button\" route ={`/elections/vote/${vote}`} key={index}>\n        <li key={index}>\n          {group[1]}\n        </li>\n        // <div className=\"ui link card\" style={{width:\"80%\", color: '#f00000'}}>\n        // <div className=\"card\">\n        // <div className=\"content\">\n        //     <div className=\"header\">{group[0][0]}</div>\n        //     <div className=\"description\">hello</div>\n        // </div>\n        // </div>\n        // </div>\n  ) : <></>\n};\n\nexport default JoinGroup;"]},"metadata":{},"sourceType":"module"}