{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _readOnlyError from \"@babel/runtime/helpers/esm/readOnlyError\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport 'semantic-ui-css/semantic.min.css';\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar useStyles = makeStyles({\n  card: {\n    width: '80%'\n  }\n});\n\nvar JoinGroup = function JoinGroup() {\n  _s();\n\n  var _useState = useState(''),\n      web3 = _useState[0],\n      setWeb3 = _useState[1];\n\n  var _useState2 = useState(''),\n      groupsID = _useState2[0],\n      setGroupsID = _useState2[1];\n\n  var _useState3 = useState(''),\n      contract = _useState3[0],\n      setContract = _useState3[1];\n\n  var _useState4 = useState([]),\n      renderedGroups = _useState4[0],\n      renderGroups = _useState4[1];\n\n  useEffect(function () {\n    // get web3\n    function initWeb3() {\n      return _initWeb.apply(this, arguments);\n    }\n\n    function _initWeb() {\n      _initWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var web3Instance;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log('initializing web3');\n                _context.next = 3;\n                return getWeb3();\n\n              case 3:\n                web3Instance = _context.sent;\n                setWeb3(web3Instance);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _initWeb.apply(this, arguments);\n    }\n\n    initWeb3();\n  }, []);\n  useEffect(function () {\n    // get Factory contract\n    function setup() {\n      return _setup.apply(this, arguments);\n    }\n\n    function _setup() {\n      _setup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var networkId, deployedNetwork, instance;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(web3 == \"\")) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                console.log('unable to get factory');\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                _context2.prev = 3;\n                _context2.next = 6;\n                return web3.eth.net.getId();\n\n              case 6:\n                networkId = _context2.sent;\n                deployedNetwork = VoteFactoryContract.networks[networkId];\n                instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n                setContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n\n                _context2.next = 16;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](3);\n                // Catch any errors for any of the above operations.\n                alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n                console.error(_context2.t0);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[3, 12]]);\n      }));\n      return _setup.apply(this, arguments);\n    }\n\n    setup(); // console.log('ok')\n  }, [web3]);\n\n  var convertStrArrayToIntArray = function convertStrArrayToIntArray(str, sep) {\n    sep = typeof sep !== 'undefined' ? sep : \" \";\n    return str.split(sep).map(function (val) {\n      return parseInt(val, 10);\n    });\n  };\n\n  useEffect(function () {\n    //display available votes addresses\n    var displayVotes = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var response, temp, i;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(contract == '')) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 2:\n                _context3.next = 4;\n                return contract.methods.getExistingGroups().call();\n\n              case 4:\n                response = _context3.sent;\n                // Update state with the result.\n                temp = [];\n\n                for (i = 0; i < response.length; i++) {\n                  temp[i] = parseInt(response[i]);\n                }\n\n                response = (_readOnlyError(\"response\"), temp);\n                console.log(response);\n                setGroupsID(response);\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function displayVotes() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    displayVotes();\n  }, [contract]);\n\n  var displayInfo = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(identification) {\n      var instance;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(groupsID == '')) {\n                _context4.next = 2;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 2:\n              _context4.prev = 2;\n              // Get the contract instance.\n              instance = new web3.eth.Contract(VoteContract.abi, identification);\n              _context4.next = 6;\n              return contract.methods.getGroup(identification).call();\n\n            case 6:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 9:\n              _context4.prev = 9;\n              _context4.t0 = _context4[\"catch\"](2);\n              console.error(_context4.t0);\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[2, 9]]);\n    }));\n\n    return function displayInfo(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    //render votes\n    var renderVotes = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (groupsID) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 2:\n                _context5.next = 4;\n                return groupsID.forEach(function (identification) {\n                  displayInfo(identification).then(function (newGroup) {\n                    renderGroups([].concat(_toConsumableArray(renderedGroups), [newGroup]));\n                  });\n                });\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function renderVotes() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    renderVotes();\n  }, [groupsID]);\n  useEffect(function () {\n    if (renderedGroups != []) {\n      console.log(renderedGroups);\n    }\n  }, [renderedGroups]);\n  return __jsx(React.Fragment, null);\n  /*\n     //return <a>Hello World</a>;\n     return groupList ? groupList.map((group) => \n         //<Link className=\"ui button\" route ={`/elections/vote/${vote}`} key={index}>\n         <div className=\"ui link card\" style={{width:\"80%\", color: '#f00000'}}>\n         <div className=\"card\">\n         <div className=\"content\">\n             <div className=\"header\">Group</div>\n             <div className=\"meta\">\n                 <a>{group.groupName}</a>\n             </div>\n             <div className=\"description\">\n                 {group.description}\n             </div>\n         </div>\n             <div className=\"extra content\">\n                 <span>\n                     <i className=\"user icon\"></i>\n                     {group.getMembers.size()}\n                 </span>\n             </div>\n         </div>\n         </div>\n   ) : <></> */\n};\n\n_s(JoinGroup, \"o6SvP/+TZFPQW6LLIZfNW7VgzNY=\");\n\n_c = JoinGroup;\nexport default JoinGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"JoinGroup\");","map":{"version":3,"sources":["/home/wen_wong/voting-at-mcgill/client/src/pages/joinGroup.js"],"names":["React","useState","useEffect","makeStyles","VoteFactoryContract","VoteContract","getWeb3","require","useStyles","card","width","JoinGroup","web3","setWeb3","groupsID","setGroupsID","contract","setContract","renderedGroups","renderGroups","initWeb3","console","log","web3Instance","setup","eth","net","getId","networkId","deployedNetwork","networks","instance","Contract","abi","address","alert","error","convertStrArrayToIntArray","str","sep","split","map","val","parseInt","displayVotes","methods","getExistingGroups","call","response","temp","i","length","displayInfo","identification","getGroup","renderVotes","forEach","then","newGroup"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport 'semantic-ui-css/semantic.min.css';\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width:'80%'\n  }\n});\n\nconst JoinGroup = () => {\n    const [web3, setWeb3] = useState('');\n  const [groupsID, setGroupsID] = useState('');\n  const [contract, setContract] = useState('');\n  const [renderedGroups, renderGroups] = useState([]);\n\n  useEffect(() => {// get web3\n    async function initWeb3() {\n      console.log('initializing web3');\n      const web3Instance = await getWeb3();\n      setWeb3(web3Instance)\n    }\n    initWeb3();\n  },[]);\n\n  useEffect(() => {// get Factory contract\n    async function setup() {\n      if(web3 == \"\") {\n        console.log('unable to get factory')\n        return;\n      }\n      try {\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n          VoteFactoryContract.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n        setContract(instance);\n    \n        // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }\n    }\n      setup();\n      // console.log('ok')\n  },[web3]);\n\n  var convertStrArrayToIntArray = function(str, sep) {\n\tsep = typeof sep !== 'undefined' ? sep : \" \";\n\treturn str.split(sep).map(function(val) {\n\t\treturn parseInt(val, 10);\n\t});\n}\n\n  useEffect(()=> {//display available votes addresses\n    var displayVotes = async () => {\n      if(contract == ''){\n        return;\n      }\n      const response = await contract.methods.getExistingGroups().call();\n      // Update state with the result.\n      const temp = [];\n      for (var i = 0; i < response.length; i++) {\n        temp[i] = parseInt(response[i]);\n      }\n\n      response = temp;\n      console.log(response);\n      setGroupsID(response);\n    };\n    displayVotes();\n  },[contract]);\n  \n\n  var displayInfo = async (identification) => { \n    if(groupsID == '') {\n      return;\n    }\n    try {// Get the contract instance.\n      const instance = new web3.eth.Contract(\n        VoteContract.abi,\n        identification\n      );\n      return (await contract.methods.getGroup(identification).call());\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  useEffect(()=> {//render votes\n    var renderVotes = async () => {\n        if (!groupsID) {\n          return;\n        }\n        await groupsID.forEach(identification => {\n            displayInfo(identification).then(newGroup => {\n              renderGroups([...renderedGroups, newGroup]);\n          });\n        });\n      }\n    renderVotes();\n  },[groupsID]);\n\n  useEffect(()=> {\n    if(renderedGroups != []) {\n      console.log(renderedGroups);\n    }\n  },[renderedGroups]);\n  \n    return <></>;\n /*\n    //return <a>Hello World</a>;\n    return groupList ? groupList.map((group) => \n        //<Link className=\"ui button\" route ={`/elections/vote/${vote}`} key={index}>\n        <div className=\"ui link card\" style={{width:\"80%\", color: '#f00000'}}>\n        <div className=\"card\">\n        <div className=\"content\">\n            <div className=\"header\">Group</div>\n            <div className=\"meta\">\n                <a>{group.groupName}</a>\n            </div>\n            <div className=\"description\">\n                {group.description}\n            </div>\n        </div>\n            <div className=\"extra content\">\n                <span>\n                    <i className=\"user icon\"></i>\n                    {group.getMembers.size()}\n                </span>\n            </div>\n        </div>\n        </div>\n  ) : <></> */\n};\n\nexport default JoinGroup;"]},"metadata":{},"sourceType":"module"}