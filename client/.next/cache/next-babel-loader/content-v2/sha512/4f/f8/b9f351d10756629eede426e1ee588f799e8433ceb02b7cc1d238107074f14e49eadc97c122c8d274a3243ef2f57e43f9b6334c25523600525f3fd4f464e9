{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\PROJECT_VOTE\\\\voting-at-mcgill\\\\client\\\\src\\\\pages\\\\newElection.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Header } from '../components/header';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport * as m from \"@material-ui/core\";\nimport getWeb3 from \"../getWeb3\";\n\nconst NewElection = () => {\n  const {\n    0: voteAddress,\n    1: setVoteAddress\n  } = useState('');\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: accounts,\n    1: setAccounts\n  } = useState('');\n  const {\n    0: contract,\n    1: setContract\n  } = useState('');\n  const {\n    0: voteContract,\n    1: setVoteContract\n  } = useState('');\n  const electionTypes = [{\n    value: 'majority',\n    label: 'simple majority'\n  }, {\n    value: 'twoThirds',\n    label: 'two thirds'\n  }]; // var onSubmit = async () => {\n  //\n  // };\n\n  var web3Instance;\n  useEffect(() => {\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, []);\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n\n  const changeTitle = event => {\n    setTitle(event.target.value);\n  };\n\n  const {\n    0: startDate,\n    1: setStartDate\n  } = useState(0);\n\n  const changeStartDate = event => {\n    setStartDate(event.target.value);\n  };\n\n  const {\n    0: endDate,\n    1: setEndDate\n  } = useState(0);\n\n  const changeEndDate = event => {\n    setEndDate(event.target.value);\n  };\n\n  const {\n    0: electionType,\n    1: setElectionType\n  } = useState('majority');\n\n  const changeElectionType = event => {\n    setElectionType(event.target.value);\n  };\n\n  const {\n    0: description,\n    1: setDescription\n  } = useState('');\n\n  const changeDescription = event => {\n    setDescription(event.target.value);\n  };\n\n  useEffect(() => {\n    // get Factory contract\n    async function setup() {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        setAccounts(await web3.eth.getAccounts()); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        setContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setup();\n  }, [web3]);\n  useEffect(() => {\n    //just get Vote contract\n    async function setup() {\n      if (web3 == '' || !voteAddress) {\n        return;\n      }\n\n      try {\n        // Get the contract instance.\n        const instance = new web3.eth.Contract(VoteContract.abi, voteAddress);\n        setVoteContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setup();\n    console.log('you do be having an address ' + voteAddress);\n  }, [contract, voteAddress]); // useEffect(() => {\n  //     var createVote = async () => {\n  //         if(contract == ''){\n  //             return;\n  //         }\n  //         // Get the value from the contract to prove it worked.\n  //         // uncomment to create votes, note that second await call wont run if first is run.\n  //         await contract.methods.createVote(0).send({\n  //             from: accounts[0]\n  //         });\n  //     };\n  //     createVote();\n  // },[contract]);\n\n  var onSubmit = async event => {\n    event.preventDefault();\n\n    var createVote = async () => {\n      //uses voteFactory to create Vote\n      if (contract == '') {\n        return;\n      } // Get the value from the contract to prove it worked.\n\n\n      await contract.methods.createVote(0).send({\n        from: accounts[0]\n      });\n    };\n\n    var getElectionAddress = async () => {\n      //calls voteFactory method to get new Vote address\n      if (contract == '') {\n        return;\n      }\n\n      const response = await contract.methods.getDeployedVotes().call();\n      await setVoteAddress(response[response.length - 1]);\n    };\n\n    var setUpElection = async () => {\n      if (voteContract == '') {\n        console.log(\"voteContract dne\");\n        return;\n      }\n\n      await voteContract.methods.editElection(title, new Date(startDate).getTime(), new Date(endDate).getTime(), description, [0]);\n    };\n\n    var displayVote = async () => {\n      const summary = await voteContract.methods.currentElection().call();\n      console.log(summary);\n    };\n\n    await createVote();\n    await getElectionAddress();\n    await setUpElection();\n    await displayVote();\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, \"New Election\"), __jsx(\"form\", {\n    onSubmit: onSubmit,\n    noValidate: true,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    required: true,\n    fullWidth: true,\n    label: \"Election title\",\n    variant: \"outlined\",\n    value: title,\n    onChange: changeTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    label: \"Start date\",\n    type: \"date\",\n    variant: \"outlined\",\n    InputLabelProps: {\n      shrink: true\n    },\n    value: startDate,\n    onChange: changeStartDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    required: true,\n    label: \"End date\",\n    type: \"date\",\n    variant: \"outlined\",\n    InputLabelProps: {\n      shrink: true\n    },\n    value: endDate,\n    onChange: changeEndDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    required: true,\n    select: true,\n    label: \"Type of election\",\n    variant: \"outlined\",\n    value: electionType,\n    onChange: changeElectionType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 21\n    }\n  }, electionTypes.map(option => __jsx(m.MenuItem, {\n    key: option.value,\n    value: option.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 29\n    }\n  }, option.label)))), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 17\n    }\n  }, __jsx(m.TextField, {\n    required: true,\n    multiline: true,\n    fullWidth: true,\n    label: \"Description\",\n    rows: 4,\n    variant: \"outlined\",\n    value: description,\n    onChange: changeDescription,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 17\n    }\n  }, __jsx(m.Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 21\n    }\n  }, \"Cancel\"), __jsx(m.Button, {\n    type: \"submit\",\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 21\n    }\n  }, \"Publish Election\"))));\n};\n\nexport default NewElection;","map":{"version":3,"sources":["C:/Users/foubroker/PROJECT_VOTE/voting-at-mcgill/client/src/pages/newElection.js"],"names":["React","useState","useEffect","Header","VoteFactoryContract","VoteContract","m","getWeb3","NewElection","voteAddress","setVoteAddress","web3","setWeb3","accounts","setAccounts","contract","setContract","voteContract","setVoteContract","electionTypes","value","label","web3Instance","initWeb3","title","setTitle","changeTitle","event","target","startDate","setStartDate","changeStartDate","endDate","setEndDate","changeEndDate","electionType","setElectionType","changeElectionType","description","setDescription","changeDescription","setup","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","console","log","onSubmit","preventDefault","createVote","methods","send","from","getElectionAddress","response","getDeployedVotes","call","length","setUpElection","editElection","Date","getTime","displayVote","summary","currentElection","shrink","map","option"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Header } from '../components/header';\r\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\r\nimport VoteContract from \"../contracts/Vote.json\";\r\nimport * as m from \"@material-ui/core\";\r\nimport getWeb3 from \"../getWeb3\";\r\n\r\n\r\n\r\nconst NewElection = () => {\r\n\r\n    const [voteAddress, setVoteAddress] = useState('');\r\n    const [web3, setWeb3] = useState('');\r\n    const [accounts, setAccounts] = useState('');\r\n    const [contract, setContract] = useState('');\r\n    const [voteContract, setVoteContract] = useState('');\r\n    const electionTypes = [\r\n        {\r\n            value: 'majority',\r\n            label: 'simple majority'\r\n        },\r\n        {\r\n            value: 'twoThirds',\r\n            label: 'two thirds'\r\n        }\r\n    ];\r\n\r\n\r\n    // var onSubmit = async () => {\r\n    //\r\n    // };\r\n\r\n    var web3Instance;\r\n    useEffect(() => {\r\n        async function initWeb3() {\r\n            web3Instance = await getWeb3();\r\n            setWeb3(web3Instance);\r\n        }\r\n        initWeb3();\r\n    },[]);\r\n\r\n    const [title, setTitle] = useState('');\r\n    const changeTitle = (event) => {\r\n        setTitle(event.target.value);\r\n    };\r\n    const [startDate, setStartDate] = useState(0);\r\n    const changeStartDate = (event) => {\r\n        setStartDate(event.target.value);\r\n    };\r\n    const [endDate, setEndDate] = useState(0);\r\n    const changeEndDate = (event) => {\r\n        setEndDate(event.target.value);\r\n    };\r\n    const [electionType, setElectionType] = useState('majority');\r\n    const changeElectionType = (event) => {\r\n        setElectionType(event.target.value);\r\n    };\r\n    const [description, setDescription] = useState('');\r\n    const changeDescription = (event) => {\r\n        setDescription(event.target.value);\r\n    };\r\n\r\n    useEffect(() => {// get Factory contract\r\n        async function setup() {\r\n            if(web3 == '') {\r\n                return;\r\n            }\r\n            try {\r\n                setAccounts(await web3.eth.getAccounts());\r\n                // Get the contract instance.\r\n                const networkId = await web3.eth.net.getId();\r\n                const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n                const instance = new web3.eth.Contract(\r\n                    VoteFactoryContract.abi,\r\n                    deployedNetwork && deployedNetwork.address,\r\n                );\r\n                setContract(instance);\r\n\r\n                // Set web3, accounts, and contract to the state, and then proceed with an\r\n            } catch (error) {\r\n                // Catch any errors for any of the above operations.\r\n                alert(\r\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\r\n                );\r\n                console.error(error);\r\n            }\r\n        }\r\n        setup();\r\n    },[web3]);\r\n\r\n    useEffect(() => {//just get Vote contract\r\n        async function setup() {\r\n            if(web3 == '' || !voteAddress) {\r\n                return;\r\n            }\r\n            try {\r\n                // Get the contract instance.\r\n                const instance = new web3.eth.Contract(\r\n                    VoteContract.abi,\r\n                    voteAddress,\r\n                );\r\n                setVoteContract(instance);\r\n                // Set web3, accounts, and contract to the state, and then proceed with an\r\n            } catch (error) {\r\n                // Catch any errors for any of the above operations.\r\n                alert(\r\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\r\n                );\r\n                console.error(error);\r\n            }\r\n        }\r\n        setup();\r\n        console.log('you do be having an address ' + voteAddress);\r\n    },[contract,voteAddress]);\r\n\r\n    // useEffect(() => {\r\n    //     var createVote = async () => {\r\n    //         if(contract == ''){\r\n    //             return;\r\n    //         }\r\n    //         // Get the value from the contract to prove it worked.\r\n    //         // uncomment to create votes, note that second await call wont run if first is run.\r\n    //         await contract.methods.createVote(0).send({\r\n    //             from: accounts[0]\r\n    //         });\r\n    //     };\r\n    //     createVote();\r\n    // },[contract]);\r\n\r\n\r\n    var onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        var createVote = async () => {//uses voteFactory to create Vote\r\n            if(contract == ''){\r\n                return;\r\n            }\r\n            // Get the value from the contract to prove it worked.\r\n            await contract.methods.createVote(0).send({\r\n                from: accounts[0]\r\n            });\r\n        };\r\n        var getElectionAddress = async () => {//calls voteFactory method to get new Vote address\r\n            if(contract == ''){\r\n                return;\r\n            }\r\n            const response = await contract.methods.getDeployedVotes().call();\r\n            await setVoteAddress(response[response.length - 1]);\r\n        };\r\n        var setUpElection = async() => {\r\n            if (voteContract == '') {\r\n                console.log(\"voteContract dne\");\r\n                return;\r\n            }\r\n\r\n            await voteContract.methods.editElection(title, new Date(startDate).getTime(), new Date(endDate).getTime(), description, [0]);\r\n        };\r\n\r\n            var displayVote = async () => {\r\n                const summary = await voteContract.methods.currentElection().call();\r\n                console.log(summary);\r\n            };\r\n\r\n            await createVote();\r\n            await getElectionAddress();\r\n            await setUpElection();\r\n            await displayVote();\r\n\r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <h1>New Election</h1>\r\n            <form onSubmit={onSubmit} noValidate autoComplete=\"off\">\r\n                <div>\r\n                    <m.TextField required fullWidth label=\"Election title\"\r\n                                 variant=\"outlined\"\r\n                                 value={title}\r\n                                 onChange={changeTitle}\r\n                    >\r\n\r\n                    </m.TextField>\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <m.TextField label=\"Start date\" type=\"date\"\r\n                                 variant=\"outlined\"\r\n                                 InputLabelProps={{\r\n                                    shrink: true,\r\n                                    }}\r\n                                 value={startDate}\r\n                                 onChange={changeStartDate}\r\n                    >\r\n\r\n                    </m.TextField>\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <m.TextField required label=\"End date\" type=\"date\"\r\n                                 variant=\"outlined\"\r\n                                 InputLabelProps={{\r\n                        shrink: true,\r\n                        }}\r\n                                 value={endDate}\r\n                                 onChange={changeEndDate}\r\n                    />\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <m.TextField required select label=\"Type of election\"\r\n                                 variant=\"outlined\"\r\n                                 value={electionType}\r\n                                 onChange={changeElectionType}>\r\n                        {electionTypes.map((option) => (\r\n                            <m.MenuItem key={option.value} value={option.value}>\r\n                                {option.label}\r\n                            </m.MenuItem>\r\n                        ))}\r\n                    </m.TextField>\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    {/*<m.TextField label=\"Select groups (someone help with the search and select multiple plz)\" variant=\"outlined\" /> */}\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <m.TextField required multiline fullWidth\r\n                                 label=\"Description\"\r\n                                 rows={4}\r\n                                 variant=\"outlined\"\r\n                                 value={description}\r\n                                 onChange={changeDescription}\r\n                    />\r\n                </div>\r\n\r\n                <br></br>\r\n                <div>\r\n                    <m.Button>Cancel</m.Button>\r\n                    <m.Button type=\"submit\" onSubmit={onSubmit}>Publish Election</m.Button>\r\n                </div>\r\n\r\n\r\n            </form>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\nexport default NewElection;\r\n"]},"metadata":{},"sourceType":"module"}