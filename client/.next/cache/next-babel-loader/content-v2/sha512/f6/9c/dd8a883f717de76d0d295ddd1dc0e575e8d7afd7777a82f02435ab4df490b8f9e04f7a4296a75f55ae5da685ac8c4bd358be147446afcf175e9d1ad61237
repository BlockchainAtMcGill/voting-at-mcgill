{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes';\nimport 'semantic-ui-css/semantic.min.css';\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width: '80%'\n  }\n});\n\nconst JoinGroup = () => {\n  var web3Instance;\n  var factoryContract;\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: Load,\n    1: setLoad\n  } = useState(true);\n  const {\n    0: contract,\n    1: setContract\n  } = useState('');\n  const {\n    0: groupID,\n    1: setGroupID\n  } = useState('');\n  const {\n    0: groupList,\n    1: setGroups\n  } = useState([]);\n  const {\n    0: members,\n    1: getMembers\n  } = useState([]); // Initialize Web3\n\n  useEffect(() => {\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }); // Initialize VoteFactory Contract\n\n  useEffect(() => {\n    async function setupVoteFactory() {\n      if (web3 == '') {\n        console.log('unable to get factory');\n        return;\n      }\n\n      try {\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        factoryContract = instance;\n      } catch (error) {\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setupVoteFactory();\n  }, [web3]); // Display all Groups\n\n  useEffect(() => {\n    var displayGroups = async () => {\n      if (contract == '') {\n        return;\n      }\n\n      const response = await contract.methods.getExistingGroups().call();\n      setGroups(response);\n    };\n\n    displayGroups();\n  }, [contract]); // Display the information of a Group\n\n  useEffect(() => {\n    var displayInfo = async groupID => {\n      if (groupList == '') {\n        return;\n      }\n\n      try {\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, groupID);\n        return await instance.methods.getGroup(groupID).call();\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    var renderGroups = async () => {\n      if (groupList == '') {\n        return;\n      }\n\n      var temp = [];\n      await groupList.forEach(groupID => {\n        displayInfo(groupID).then(newGroup => {\n          temp.push(newGroup);\n        });\n      });\n      setGroups(temp);\n    };\n\n    renderGroups();\n  }, [groupList]);\n  return __jsx(React.Fragment, null, \"Hello World\"); //     return groupList ? groupList.map((group) => \n  //         //<Link className=\"ui button\" route ={`/elections/vote/${vote}`} key={index}>\n  //         <div className=\"ui link card\" style={{width:\"80%\", color: '#f00000'}}>\n  //         <div className=\"card\">\n  //         <div className=\"content\">\n  //             <div className=\"header\">Group</div>\n  //             <div className=\"meta\">\n  //                 <a>{group.groupName}</a>\n  //             </div>\n  //             <div className=\"description\">\n  //                 {group.description}\n  //             </div>\n  //         </div>\n  //             <div className=\"extra content\">\n  //                 <span>\n  //                     <i className=\"user icon\"></i>\n  //                     {group.getMembers.size()}\n  //                 </span>\n  //             </div>\n  //         </div>\n  //         </div>\n  //   ) : <></>\n};\n\nexport default JoinGroup;","map":{"version":3,"sources":["/home/wen_wong/voting-at-mcgill/client/src/pages/joinGroup.js"],"names":["React","useState","useEffect","makeStyles","VoteFactoryContract","VoteContract","getWeb3","Header","Link","require","useStyles","card","width","JoinGroup","web3Instance","factoryContract","web3","setWeb3","Load","setLoad","contract","setContract","groupID","setGroupID","groupList","setGroups","members","getMembers","initWeb3","setupVoteFactory","console","log","networkId","eth","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","displayGroups","response","methods","getExistingGroups","call","displayInfo","getGroup","renderGroups","temp","forEach","then","newGroup","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes'\nimport 'semantic-ui-css/semantic.min.css';\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width:'80%'\n  }\n});\n\nconst JoinGroup = () => {\n    var web3Instance;\n    var factoryContract;\n\n    const [web3, setWeb3] = useState('');\n    const [Load, setLoad] = useState(true);\n    const [contract, setContract] = useState('');\n    const [groupID, setGroupID] = useState('');\n    const [groupList, setGroups] = useState([]);\n    const [members, getMembers] = useState([]);\n\n    // Initialize Web3\n    useEffect(() => {\n\n        async function initWeb3() {\n            web3Instance = await getWeb3();\n            setWeb3(web3Instance);\n        }\n        initWeb3();\n    });\n\n    // Initialize VoteFactory Contract\n    useEffect(() => {\n        async function setupVoteFactory() {\n            if (web3 == '') {\n                console.log('unable to get factory');\n                return;\n            }\n\n            try {\n                const networkId = await web3.eth.net.getId();\n                const deployedNetwork = VoteFactoryContract.networks[networkId];\n                const instance = new web3.eth.Contract(\n                    VoteFactoryContract.abi,\n                    deployedNetwork && deployedNetwork.address\n                );\n                factoryContract = instance;\n            } catch (error) {\n                alert(`Failed to load web3, accounts, or contract. Check console for details.`)\n                console.error(error);\n            }\n        }\n\n        setupVoteFactory();\n    }, [web3]);\n\n    // Display all Groups\n    useEffect(() => {\n        var displayGroups = async () => {\n            if (contract == '') {\n                return;\n            }\n            const response = await contract.methods.getExistingGroups().call();\n            setGroups(response);\n        };\n\n        displayGroups();\n    }, [contract]);\n\n    // Display the information of a Group\n    useEffect(() => {\n        var displayInfo = async (groupID) => {\n            if (groupList == '') {\n                return;\n            }\n\n            try {\n                const instance = new web3.eth.Contract(\n                    VoteFactoryContract.abi, \n                    groupID\n                );\n\n                return (await instance.methods.getGroup(groupID).call());\n            } catch (error) {\n                console.error(error);\n            }\n        };\n\n        var renderGroups = async () => {\n            if (groupList == '') {\n                return;\n            }\n\n            var temp = [];\n            await groupList.forEach(groupID => {\n                displayInfo(groupID).then(newGroup => {\n                    temp.push(newGroup);\n                });\n            });\n\n            setGroups(temp);\n        }\n\n        renderGroups();\n    }, [groupList]);\n\n    return <>Hello World</>;\n//     return groupList ? groupList.map((group) => \n//         //<Link className=\"ui button\" route ={`/elections/vote/${vote}`} key={index}>\n//         <div className=\"ui link card\" style={{width:\"80%\", color: '#f00000'}}>\n//         <div className=\"card\">\n//         <div className=\"content\">\n//             <div className=\"header\">Group</div>\n//             <div className=\"meta\">\n//                 <a>{group.groupName}</a>\n//             </div>\n//             <div className=\"description\">\n//                 {group.description}\n//             </div>\n//         </div>\n//             <div className=\"extra content\">\n//                 <span>\n//                     <i className=\"user icon\"></i>\n//                     {group.getMembers.size()}\n//                 </span>\n//             </div>\n//         </div>\n//         </div>\n//   ) : <></>\n};\n\nexport default JoinGroup;"]},"metadata":{},"sourceType":"module"}