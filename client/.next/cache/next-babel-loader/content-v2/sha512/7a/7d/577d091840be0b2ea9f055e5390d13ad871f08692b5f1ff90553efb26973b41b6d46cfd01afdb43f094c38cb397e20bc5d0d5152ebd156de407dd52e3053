{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\PROJECT_VOTE\\\\voting-at-mcgill\\\\client\\\\src\\\\pages\\\\elections\\\\apply\\\\apply.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Header } from '../../../components/header';\nimport VoteFactoryContract from \"../../../contracts/VoteFactory.json\";\nimport VoteContract from \"../../../contracts/Vote.json\";\nimport { Form } from \"semantic-ui-react\";\nimport getWeb3 from \"../../../getWeb3\";\nimport 'semantic-ui-css/semantic.min.css';\n\nconst Apply = () => {\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  var web3Instance;\n  useEffect(() => {\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, []); //please follow the course for a better implementation @Jing\n\n  const {\n    0: candidateName,\n    1: setName\n  } = useState('');\n  const {\n    0: currentDate,\n    1: setCurrentDate\n  } = useState(0);\n  const {\n    0: description,\n    1: setDescription\n  } = useState('');\n\n  var onSubmit = async event => {\n    event.preventDefault();\n    var manager;\n    var factoryContract;\n    var voteContract;\n    var addressOfVote;\n\n    var setupVoteFactory = async () => {\n      //initializes voteFactory\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        [manager] = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        factoryContract = instance; // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    var getElectionAddress = async () => {\n      const url = window.location.href;\n      const pos = url.indexOf('y') + 2;\n      addressOfVote = url.slice(pos);\n      console.log(addressOfVote);\n    };\n\n    var initializeElection = async () => {\n      //initializes vote contract\n      try {\n        // Get the contract instance.\n        const instance = await new web3.eth.Contract(VoteContract.abi, addressOfVote);\n        voteContract = instance;\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    var setCandidate = async () => {\n      await voteContract.methods.enterElection(candidateName, description, new Date(currentDate).getTime()).send({\n        from: manager\n      });\n    };\n\n    var displayCand = async () => {\n      // testing purposes\n      const summary = await voteContract.methods.get_candidates(manager).call();\n      console.log(summary);\n    };\n\n    await setupVoteFactory();\n    await getElectionAddress();\n    await initializeElection();\n    await setCandidate();\n    await displayCand();\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"Run for Election\"), __jsx(\"h3\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, \" \"), __jsx(Form, {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    required: true,\n    label: \"Enter Name\",\n    value: candidateName,\n    onChange: event => setName(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    label: \"Current date\",\n    type: \"date\",\n    value: currentDate,\n    onChange: event => setCurrentDate(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, __jsx(Form.TextArea, {\n    required: true,\n    label: \"Description\",\n    value: description,\n    onChange: event => setDescription(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, \"Cancel\"), __jsx(Form.Button, {\n    type: \"submit\",\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }, \"Run for Election\"))));\n};\n/*Apply.getInitialProps = async (props) => {\r\n    console.log(props.query.address)\r\n    return {VoteContract: props.query.address}\r\n  };\r\n*/\n\n\nexport default Apply;","map":{"version":3,"sources":["C:/Users/foubroker/PROJECT_VOTE/voting-at-mcgill/client/src/pages/elections/apply/apply.js"],"names":["React","useState","useEffect","Header","VoteFactoryContract","VoteContract","Form","getWeb3","Apply","web3","setWeb3","web3Instance","initWeb3","candidateName","setName","currentDate","setCurrentDate","description","setDescription","onSubmit","event","preventDefault","manager","factoryContract","voteContract","addressOfVote","setupVoteFactory","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","console","getElectionAddress","url","window","location","href","pos","indexOf","slice","log","initializeElection","setCandidate","methods","enterElection","Date","getTime","send","from","displayCand","summary","get_candidates","call","color","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Header } from '../../../components/header';\r\nimport VoteFactoryContract from \"../../../contracts/VoteFactory.json\";\r\nimport VoteContract from \"../../../contracts/Vote.json\";\r\nimport { Form } from \"semantic-ui-react\";\r\nimport getWeb3 from \"../../../getWeb3\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\n\r\n\r\nconst Apply = () => {\r\n\r\n    const [web3, setWeb3] = useState('');\r\n    var web3Instance;\r\n    useEffect(() => {\r\n        async function initWeb3() {\r\n            web3Instance = await getWeb3();\r\n            setWeb3(web3Instance);\r\n        }\r\n        initWeb3();\r\n    },[]);\r\n\r\n    //please follow the course for a better implementation @Jing\r\n    const [candidateName, setName] = useState('');\r\n    const [currentDate, setCurrentDate] = useState(0);\r\n    const [description, setDescription] = useState('');\r\n\r\n    var onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        var manager\r\n        var factoryContract\r\n        var voteContract;\r\n        var addressOfVote;\r\n\r\n        var setupVoteFactory = async () => { //initializes voteFactory\r\n            if(web3 == '') {\r\n                return;\r\n            }\r\n            try {\r\n                [manager] = (await web3.eth.getAccounts());\r\n                // Get the contract instance.\r\n                const networkId = await web3.eth.net.getId();\r\n                const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n                const instance = new web3.eth.Contract(\r\n                    VoteFactoryContract.abi,\r\n                    deployedNetwork && deployedNetwork.address,\r\n                );\r\n                factoryContract = instance;\r\n\r\n                // Set web3, accounts, and contract to the state, and then proceed with an\r\n            } catch (error) {\r\n                // Catch any errors for any of the above operations.\r\n                alert(\r\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\r\n                );\r\n                console.error(error);\r\n            }\r\n        };\r\n        var getElectionAddress = async() =>{\r\n            const url=window.location.href;\r\n            const pos=url.indexOf('y')+2;\r\n            addressOfVote= url.slice(pos);\r\n            console.log(addressOfVote);\r\n        };\r\n        var initializeElection = async () => {//initializes vote contract\r\n            try {\r\n                // Get the contract instance.\r\n                const instance = await new web3.eth.Contract(\r\n                    VoteContract.abi,\r\n                    addressOfVote,\r\n                );\r\n                voteContract = instance;\r\n            } catch (error) {\r\n                // Catch any errors for any of the above operations.\r\n                alert(\r\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\r\n                );\r\n                console.error(error);\r\n            }\r\n        };\r\n        var setCandidate = async () => {\r\n            await voteContract.methods.enterElection(candidateName, description ,new Date(currentDate).getTime()).send({from: manager});\r\n        };\r\n        var displayCand = async () => { // testing purposes\r\n            const summary = await voteContract.methods.get_candidates(manager).call();\r\n            console.log(summary);\r\n        };\r\n        await setupVoteFactory();\r\n        await getElectionAddress();\r\n        await initializeElection();\r\n        await setCandidate();\r\n        await displayCand();\r\n    };\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <h1>Run for Election</h1>\r\n            <h3 style={{color: \"red\"}}> </h3>\r\n            <Form onSubmit={onSubmit}>\r\n                <div>\r\n                    <Form.Input required label=\"Enter Name\"\r\n                                 value={candidateName}\r\n                                 onChange={event => setName(event.target.value)}\r\n                    >\r\n\r\n                    </Form.Input>\r\n                </div>\r\n\r\n                <br></br>\r\n\r\n                <div>\r\n                    <Form.Input label=\"Current date\" type=\"date\"\r\n\r\n                                 value={currentDate}\r\n                                 onChange={event => setCurrentDate(event.target.value)}\r\n                    >\r\n\r\n                    </Form.Input>\r\n                </div>\r\n\r\n                <br></br>\r\n\r\n                <div>\r\n                    <Form.TextArea required\r\n                                 label=\"Description\"\r\n\r\n                                 value={description}\r\n                                 onChange={event => setDescription(event.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <br></br>\r\n                <div>\r\n                    <Form.Button>Cancel</Form.Button>\r\n                    <Form.Button type=\"submit\" onSubmit={onSubmit}>Run for Election</Form.Button>\r\n                </div>\r\n\r\n\r\n            </Form>\r\n\r\n        </>\r\n      )\r\n};\r\n/*Apply.getInitialProps = async (props) => {\r\n    console.log(props.query.address)\r\n    return {VoteContract: props.query.address}\r\n  };\r\n*/\r\nexport default Apply;\r\n"]},"metadata":{},"sourceType":"module"}