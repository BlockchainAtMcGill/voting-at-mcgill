{"ast":null,"code":"var _jsxFileName = \"/home/wen_wong/voting-at-mcgill/client/src/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes';\nimport 'semantic-ui-css/semantic.min.css'; // CommonJS\n\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width: '80%'\n  }\n});\n\nfunction App() {\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: votesAddresses,\n    1: setVotesAddresses\n  } = useState('');\n  const {\n    0: contract,\n    1: setContract\n  } = useState('');\n  const {\n    0: renderedAddresses,\n    1: renderAddresses\n  } = useState([]);\n  useEffect(() => {\n    // get web3\n    async function initWeb3() {\n      console.log('initializing web3');\n      const web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, []);\n  useEffect(() => {\n    // get Factory contract\n    async function setup() {\n      if (web3 == \"\") {\n        console.log('unable to get factory');\n        return;\n      }\n\n      try {\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        setContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }\n\n    setup(); // console.log('ok')\n  }, [web3]);\n  useEffect(() => {\n    //display available votes addresses\n    var displayVotes = async () => {\n      if (contract == '') {\n        return;\n      }\n\n      const response = await contract.methods.getDeployedVotes().call(); // Update state with the result.\n\n      setVotesAddresses(response);\n    };\n\n    displayVotes();\n  }, [contract]);\n  useEffect(() => {\n    //render votes\n    var displayInfo = async address => {\n      if (votesAddresses == '') {\n        return;\n      }\n\n      try {\n        // Get the contract instance.\n        const instance = new web3.eth.Contract(VoteContract.abi, address);\n        return await instance.methods.currentElection().call(); // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    var renderVotes = async () => {\n      if (!votesAddresses) {\n        return;\n      }\n\n      var temp = [];\n      votesAddresses.forEach(address => {\n        displayInfo(address).then(newAddress => temp.push(newAddress));\n      });\n      renderAddresses(temp);\n    };\n\n    renderVotes();\n  }, [votesAddresses]);\n\n  function displayVoteList() {\n    if (web3 == \"\") {\n      return \"waiting for votes to display...\";\n    } else if (votesAddresses == \"\") {\n      return \"no votes to display\";\n    }\n\n    return votesAddresses ? votesAddresses.map((vote, index) => // <Link className=\"ui button\" route ={`/elections/vote/${vote}`}>\n    // <Card key={index} variant=\"outlined\" className ={classes.card}>\n    //   <CardContent >\n    //     <Grid container>\n    //       <Grid item xs ={9}><span>{vote}</span></Grid>\n    //       <Grid item xs ={3}>\n    //       </Grid>\n    //     </Grid>\n    //   </CardContent>\n    // </Card>\n    // </Link>\n    __jsx(Link, {\n      className: \"ui button\",\n      route: `/elections/vote/${vote}`,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"ui link card\",\n      style: {\n        width: \"80%\",\n        color: '#f00000'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    }, \"Election\"), __jsx(\"div\", {\n      className: \"meta\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }, vote)), __jsx(\"div\", {\n      className: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    }, \"Click to Vote\")), __jsx(\"div\", {\n      className: \"extra content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, __jsx(\"i\", {\n      className: \"user icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }), \"0 votes\")))))) : __jsx(React.Fragment, null);\n  }\n\n  function displayrenderedVotes() {\n    return renderedAddresses[0] ? __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 35\n      }\n    }, renderedAddresses[0].title) : console.log(renderedAddresses);\n  }\n\n  function clicked() {\n    ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    console.log(renderedAddresses);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: clicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, \"view rendered votes\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, displayVoteList())));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/wen_wong/voting-at-mcgill/client/src/pages/index.js"],"names":["React","useState","useEffect","makeStyles","VoteFactoryContract","VoteContract","getWeb3","Header","Link","require","useStyles","card","width","App","web3","setWeb3","votesAddresses","setVotesAddresses","contract","setContract","renderedAddresses","renderAddresses","initWeb3","console","log","web3Instance","setup","networkId","eth","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","displayVotes","response","methods","getDeployedVotes","call","displayInfo","currentElection","renderVotes","temp","forEach","then","newAddress","push","displayVoteList","map","vote","index","color","displayrenderedVotes","title","clicked","ethereum","request","method"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport getWeb3 from \"../getWeb3\";\nimport { Header } from '../components/header';\nimport { Link } from '../../routes'\nimport 'semantic-ui-css/semantic.min.css';\n// CommonJS\nrequire(\"regenerator-runtime/runtime\");\n\nconst useStyles = makeStyles({\n  card: {\n    width:'80%'\n  }\n});\n\nfunction App() {\n  const [web3, setWeb3] = useState('');\n  const [votesAddresses, setVotesAddresses] = useState('');\n  const [contract, setContract] = useState('');\n  const [renderedAddresses, renderAddresses] = useState([]);\n\n  useEffect(() => {// get web3\n    async function initWeb3() {\n      console.log('initializing web3');\n      const web3Instance = await getWeb3();\n      setWeb3(web3Instance)\n    }\n    initWeb3();\n  },[]);\n\n  useEffect(() => {// get Factory contract\n    async function setup() {\n      if(web3 == \"\") {\n        console.log('unable to get factory')\n        return;\n      }\n      try {\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n          VoteFactoryContract.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n        setContract(instance);\n    \n        // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }\n    }\n      setup();\n      // console.log('ok')\n  },[web3]);\n\n  useEffect(()=> {//display available votes addresses\n    var displayVotes = async () => {\n      if(contract == ''){\n        return;\n      }\n      const response = await contract.methods.getDeployedVotes().call();\n      // Update state with the result.\n      setVotesAddresses(response);\n    };\n    displayVotes();\n  },[contract]);\n\n  useEffect(()=> {//render votes\n    var displayInfo = async (address) => { \n      if(votesAddresses == '') {\n        return;\n      }\n      try {\n        // Get the contract instance.\n        const instance = new web3.eth.Contract(\n          VoteContract.abi,\n          address\n        );\n        return (await instance.methods.currentElection().call());\n        // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }\n    };\n    var renderVotes = async () => {\n        if (!votesAddresses){\n          return;\n        }\n        var temp = []\n        votesAddresses.forEach(address => {\n            displayInfo(address).then(newAddress =>\n            temp.push(newAddress)\n          )\n        })\n        renderAddresses(temp);\n      }\n      renderVotes();\n    },[votesAddresses]);\n\n\n  function displayVoteList() {\n    if(web3 == \"\"){\n      return \"waiting for votes to display...\"\n    }\n    else if(votesAddresses == \"\"){\n      return \"no votes to display\"\n    }\n    return votesAddresses ? votesAddresses.map((vote, index) => \n        // <Link className=\"ui button\" route ={`/elections/vote/${vote}`}>\n          // <Card key={index} variant=\"outlined\" className ={classes.card}>\n          //   <CardContent >\n          //     <Grid container>\n          //       <Grid item xs ={9}><span>{vote}</span></Grid>\n          //       <Grid item xs ={3}>\n          //       </Grid>\n          //     </Grid>\n          //   </CardContent>\n          // </Card>\n        // </Link>\n        <Link className=\"ui button\" route ={`/elections/vote/${vote}`} key={index}>\n        <div className=\"ui link card\" style={{width:\"80%\", color: '#f00000'}}>\n        <div className=\"card\">\n        <div className=\"content\">\n          <div className=\"header\">Election</div>\n          <div className=\"meta\">\n            <a>{vote}</a>\n          </div>\n          <div className=\"description\">\n            Click to Vote\n          </div>\n        </div>\n        <div className=\"extra content\">\n          <span>\n            <i className=\"user icon\"></i>\n            0 votes\n          </span>\n        </div>\n        </div></div></Link>\n      ) : <></>\n    }\n\n  function displayrenderedVotes() {\n    return renderedAddresses[0] ? <div>{renderedAddresses[0].title}</div> : console.log(renderedAddresses)\n  }\n\n  function clicked() {\n    ethereum.request({ method: 'eth_requestAccounts' });\n    console.log(renderedAddresses)\n  }\n  return( \n    <>\n      <Header></Header>\n      <br></br>\n      <br></br>\n      <br></br>\n      <br></br>\n      <div className=\"App\">\n        <button onClick={clicked}>view rendered votes</button>\n        <div>{ displayVoteList() }</div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}