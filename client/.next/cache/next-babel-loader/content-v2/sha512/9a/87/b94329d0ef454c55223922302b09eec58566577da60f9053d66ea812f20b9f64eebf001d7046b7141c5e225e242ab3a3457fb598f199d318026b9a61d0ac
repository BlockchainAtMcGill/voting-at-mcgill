{"ast":null,"code":"var _jsxFileName = \"/home/wen_wong/voting-at-mcgill/client/src/pages/registerUser.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Header } from '../components/header';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport { Form, Loader } from \"semantic-ui-react\";\nimport getWeb3 from \"../getWeb3\";\nimport 'semantic-ui-css/semantic.min.css';\nconst adminTitle = {\n  color: \"red\",\n  marginBottom: \"5%\",\n  fontSize: \"3em\",\n  textAlign: \"center\"\n};\nconst adminFields = {\n  margin: \"auto 5% auto 5%\"\n};\n\nconst RegisterUser = () => {\n  // Basic\n  var web3Instance;\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const {\n    0: Load,\n    1: setLoad\n  } = useState(true);\n  const {\n    0: registeringUser,\n    1: setRegisteringUser\n  } = useState(false); // Call the contract\n\n  const {\n    0: username,\n    1: setUsername\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  useEffect(() => {\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, [Load]);\n\n  var onSubmit = async event => {\n    event.preventDefault();\n    var user;\n    var factoryContract; // Initializes VoteFactory Contract\n\n    var setupVoteFactory = async () => {\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        [user] = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        factoryContract = instance; // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    }; // Calls VoteFactory Contract to create a new instance of Group\n\n\n    var createGroup = async () => {\n      setRegisteringUser(true);\n\n      if (factoryContract == '') {\n        return;\n      } // Calls the method createGroup from VoteFactory.sol\n\n\n      await factoryContract.methods.registerUser(username, email, password, {\n        from: user\n      }).send({\n        from: user\n      });\n      setRegisteringUser(false);\n      setLoad(!Load);\n    }; // Verify the values of the newly created instance of Group\n\n\n    var displayGroup = async () => {\n      const summary = await factoryContract.methods.getUser({\n        from: user\n      }).call();\n      console.log(summary);\n    };\n\n    await setupVoteFactory();\n    await createGroup();\n    await displayGroup();\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }), __jsx(\"h1\", {\n    style: adminTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, \"Register\"), __jsx(Form, {\n    onSubmit: onSubmit,\n    style: adminFields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    required: true,\n    label: \"Username\",\n    value: username,\n    onChange: event => setUsername(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, __jsx(Form.TextArea, {\n    required: true,\n    label: \"Email\",\n    value: email,\n    onChange: event => setEmail(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    required: true,\n    label: \"Password\",\n    value: password,\n    onChange: event => setPassword(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }), __jsx(Loader, {\n    active: registeringUser,\n    inline: \"centered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }, \"Cancel\"), __jsx(Form.Button, {\n    type: \"submit\",\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 21\n    }\n  }, \"Register\"))));\n};\n\nexport default RegisterUser;","map":{"version":3,"sources":["/home/wen_wong/voting-at-mcgill/client/src/pages/registerUser.js"],"names":["React","useState","useEffect","Header","VoteFactoryContract","VoteContract","Form","Loader","getWeb3","adminTitle","color","marginBottom","fontSize","textAlign","adminFields","margin","RegisterUser","web3Instance","web3","setWeb3","Load","setLoad","registeringUser","setRegisteringUser","username","setUsername","email","setEmail","password","setPassword","initWeb3","onSubmit","event","preventDefault","user","factoryContract","setupVoteFactory","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","console","createGroup","methods","registerUser","from","send","displayGroup","summary","getUser","call","log","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Header } from '../components/header';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport { Form, Loader  } from \"semantic-ui-react\";\nimport getWeb3 from \"../getWeb3\";\nimport 'semantic-ui-css/semantic.min.css';\n\nconst adminTitle = {\n    color: \"red\",\n    marginBottom: \"5%\",\n    fontSize: \"3em\",\n    textAlign: \"center\"\n};\n\nconst adminFields = {\n    margin: \"auto 5% auto 5%\"\n};\n\nconst RegisterUser = () => {\n    // Basic\n    var web3Instance;\n    const [web3, setWeb3] = useState('');\n    const [Load, setLoad] = useState(true);\n    const [registeringUser, setRegisteringUser] = useState(false);\n\n    // Call the contract\n    const [username, setUsername] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    useEffect(() => {\n        async function initWeb3() {\n            web3Instance = await getWeb3();\n            setWeb3(web3Instance);\n        }\n        initWeb3();\n    },[Load]);\n\n    var onSubmit = async (event) => {\n        event.preventDefault();\n        var user;\n        var factoryContract;\n        \n        // Initializes VoteFactory Contract\n        var setupVoteFactory = async () => {\n            if(web3 == '') {\n                return;\n            }\n            try {\n                [user] = (await web3.eth.getAccounts());\n                // Get the contract instance.\n                const networkId = await web3.eth.net.getId();\n                const deployedNetwork = VoteFactoryContract.networks[networkId];\n                const instance = new web3.eth.Contract(\n                    VoteFactoryContract.abi,\n                    deployedNetwork && deployedNetwork.address,\n                );\n                factoryContract = instance;\n\n                // Set web3, accounts, and contract to the state, and then proceed with an\n            } catch (error) {\n                // Catch any errors for any of the above operations.\n                alert(\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\n                );\n                console.error(error);\n            }\n        };\n        // Calls VoteFactory Contract to create a new instance of Group\n        var createGroup = async () => {\n            setRegisteringUser(true);\n            if(factoryContract == ''){\n                return;\n            }\n            // Calls the method createGroup from VoteFactory.sol\n            await factoryContract.methods.registerUser(username, email, password, {\n                from: user\n            }).send({\n                from: user\n            });\n            setRegisteringUser(false);\n            setLoad(!Load);\n        };\n\n        // Verify the values of the newly created instance of Group\n        var displayGroup = async () => {\n            const summary = await factoryContract.methods.getUser({\n                from: user\n            }).call();\n            console.log(summary);\n        };\n\n        await setupVoteFactory();\n        await createGroup();\n        await displayGroup();\n    };\n\n    return (\n        <>\n            <Header/>\n            <br></br>\n            <br></br>\n            <br></br>\n            <h1 style={adminTitle}>Register</h1>\n            \n            <Form onSubmit={onSubmit} style={adminFields}>\n                <div>\n                    <Form.Input required label=\"Username\"\n                                 value={username}\n                                 onChange={event => setUsername(event.target.value)}\n                    >\n\n                    </Form.Input>\n                </div>\n                <br></br>\n                <div>\n                    <Form.TextArea required\n                                 label=\"Email\"\n                                 value={email}\n                                 onChange={event => setEmail(event.target.value)}\n                    />\n                </div>\n                <br></br>\n                <div>\n                    <Form.Input required label=\"Password\"\n                                 value={password}\n                                 onChange={event => setPassword(event.target.value)}\n                    >\n\n                    </Form.Input>\n                </div>\n                <br></br>\n                <Loader\n                        active={registeringUser}\n                        inline='centered'\n                />                     \n                <br></br>\n                <div>\n                    <Form.Button>Cancel</Form.Button>\n                    <Form.Button type=\"submit\" onSubmit={onSubmit}>Register</Form.Button>\n                </div>\n            </Form>\n        </>\n    )\n};\nexport default RegisterUser;\n"]},"metadata":{},"sourceType":"module"}