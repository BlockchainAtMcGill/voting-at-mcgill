{"ast":null,"code":"var _jsxFileName = \"/home/wen_wong/voting-at-mcgill/client/src/pages/newGroup.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Header } from '../components/header';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport { Form } from \"semantic-ui-react\";\nimport getWeb3 from \"../getWeb3\";\nimport 'semantic-ui-css/semantic.min.css';\nconst adminTitle = {\n  color: \"red\",\n  marginBottom: \"5%\",\n  fontSize: \"3em\",\n  textAlign: \"center\"\n};\nconst adminFields = {\n  margin: \"auto 5% auto 5%\"\n};\n\nconst NewGroup = () => {\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  var web3Instance;\n  useEffect(() => {\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, []);\n  const {\n    0: groupName,\n    1: setGroupName\n  } = useState('');\n  const {\n    0: description,\n    1: setDescription\n  } = useState('');\n  const {\n    0: groupID,\n    1: setGroupID\n  } = useState('');\n\n  var onSubmit = async event => {\n    event.preventDefault();\n    var manager;\n    var factoryContract;\n    var voteContract;\n    var addressOfVote;\n\n    var setupVoteFactory = async () => {\n      //initializes voteFactory\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        [manager] = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        factoryContract = instance; // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    var setupVote = async () => {\n      //initializes vote contract\n      try {\n        // Get the contract instance.\n        const instance = await new web3.eth.Contract(VoteContract.abi, addressOfVote);\n        voteContract = instance;\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    var createGroup = async () => {\n      //uses voteFactory to create Vote\n      if (factoryContract == '') {\n        return;\n      } // Get the value from the contract to prove it worked.\n\n\n      await factoryContract.methods.createGroup(groupName, description, groupID).send({\n        from: manager\n      });\n    };\n\n    var displayGroup = async () => {\n      // testing purposes\n      const numOfGroups = await voteFactoryContract.methods.getNumOfGroups().call();\n      const summary = [numOfGroups];\n\n      for (var i = 0; i < numOfGroups; i++) {\n        summary[i] = await voteContract.methods.call();\n      }\n\n      console.log(summary);\n    };\n\n    await setupVoteFactory();\n    await setupVote();\n    await createGroup();\n    await displayGroup();\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }), __jsx(\"h1\", {\n    style: adminTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, \"New Group\"), __jsx(Form, {\n    onSubmit: onSubmit,\n    style: adminFields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    required: true,\n    label: \"Group name\",\n    value: groupName,\n    onChange: event => setGroupName(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, __jsx(Form.TextArea, {\n    required: true,\n    label: \"Description\",\n    value: description,\n    onChange: event => setDescription(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    required: true,\n    label: \"Group ID\",\n    value: groupID,\n    onChange: event => setGroupID(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 21\n    }\n  }, \"Cancel\"), __jsx(Form.Button, {\n    type: \"submit\",\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }, \"Create Group\"))));\n};\n\nexport default NewGroup;","map":{"version":3,"sources":["/home/wen_wong/voting-at-mcgill/client/src/pages/newGroup.js"],"names":["React","useState","useEffect","Header","VoteFactoryContract","VoteContract","Form","getWeb3","adminTitle","color","marginBottom","fontSize","textAlign","adminFields","margin","NewGroup","web3","setWeb3","web3Instance","initWeb3","groupName","setGroupName","description","setDescription","groupID","setGroupID","onSubmit","event","preventDefault","manager","factoryContract","voteContract","addressOfVote","setupVoteFactory","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","console","setupVote","createGroup","methods","send","from","displayGroup","numOfGroups","voteFactoryContract","getNumOfGroups","call","summary","i","log","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Header } from '../components/header';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport { Form } from \"semantic-ui-react\";\nimport getWeb3 from \"../getWeb3\";\nimport 'semantic-ui-css/semantic.min.css';\n\nconst adminTitle = {\n    color: \"red\",\n    marginBottom: \"5%\",\n    fontSize: \"3em\",\n    textAlign: \"center\"\n};\n\nconst adminFields = {\n    margin: \"auto 5% auto 5%\"\n};\n\nconst NewGroup = () => {\n\n    const [web3, setWeb3] = useState('');\n    var web3Instance;\n\n    useEffect(() => {\n        async function initWeb3() {\n            web3Instance = await getWeb3();\n            setWeb3(web3Instance);\n        }\n        initWeb3();\n    },[]);\n\n    const [groupName, setGroupName] = useState('');\n    const [description, setDescription] = useState('');\n    const [groupID, setGroupID] = useState('');\n\n    var onSubmit = async (event) => {\n        event.preventDefault();\n        var manager;\n        var factoryContract;\n        var voteContract;\n        var addressOfVote;\n        \n        var setupVoteFactory = async () => { //initializes voteFactory\n            if(web3 == '') {\n                return;\n            }\n            try {\n                [manager] = (await web3.eth.getAccounts());\n                // Get the contract instance.\n                const networkId = await web3.eth.net.getId();\n                const deployedNetwork = VoteFactoryContract.networks[networkId];\n                const instance = new web3.eth.Contract(\n                    VoteFactoryContract.abi,\n                    deployedNetwork && deployedNetwork.address,\n                );\n                factoryContract = instance;\n\n                // Set web3, accounts, and contract to the state, and then proceed with an\n            } catch (error) {\n                // Catch any errors for any of the above operations.\n                alert(\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\n                );\n                console.error(error);\n            }\n        };\n\n        var setupVote = async () => {//initializes vote contract\n                    try {\n                        // Get the contract instance.\n                        const instance = await new web3.eth.Contract(\n                            VoteContract.abi,\n                            addressOfVote,\n                        );\n                        voteContract = instance;\n                    } catch (error) {\n                        // Catch any errors for any of the above operations.\n                        alert(\n                            `Failed to load web3, accounts, or contract. Check console for details.`,\n                        );\n                        console.error(error);\n                    }\n                };\n\n        var createGroup = async () => {//uses voteFactory to create Vote\n            if(factoryContract == ''){\n                return;\n            }\n            // Get the value from the contract to prove it worked.\n            await factoryContract.methods.createGroup(groupName, description, groupID).send({\n                from: manager\n            });\n        };\n\n        var displayGroup = async () => { // testing purposes\n            const numOfGroups = await voteFactoryContract.methods.getNumOfGroups().call();\n            const summary = [numOfGroups];\n            for (var i = 0; i <numOfGroups; i++) {\n                summary[i] = await voteContract.methods.call();\n            }\n            console.log(summary);\n        };\n        await setupVoteFactory();\n        await setupVote();\n        await createGroup();\n        await displayGroup();\n    };\n\n    return (\n        <>\n            <Header/>\n            <br></br>\n            <br></br>\n            <br></br>\n            <h1 style={adminTitle}>New Group</h1>\n            \n            <Form onSubmit={onSubmit} style={adminFields}>\n                <div>\n                    <Form.Input required label=\"Group name\"\n                                 value={groupName}\n                                 onChange={event => setGroupName(event.target.value)}\n                    >\n\n                    </Form.Input>\n                </div>\n\n                <br></br>\n                \n                <div>\n                    <Form.TextArea required\n                                 label=\"Description\"\n                                 value={description}\n                                 onChange={event => setDescription(event.target.value)}\n                    />\n                </div>\n\n                <br></br>\n\n                <div>\n                    <Form.Input required label=\"Group ID\"\n                                 value={groupID}\n                                 onChange={event => setGroupID(event.target.value)}\n                    >\n\n                    </Form.Input>\n                </div>\n\n                <br></br>\n                \n                <div>\n                    <Form.Button>Cancel</Form.Button>\n                    <Form.Button type=\"submit\" onSubmit={onSubmit}>Create Group</Form.Button>\n                </div>\n            </Form>\n        </>\n    )\n};\nexport default NewGroup;\n"]},"metadata":{},"sourceType":"module"}