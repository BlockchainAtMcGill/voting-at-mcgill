{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\foubroker\\\\PROJECT_VOTE\\\\voting-at-mcgill\\\\client\\\\src\\\\pages\\\\newElection.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Header } from '../components/header';\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\nimport VoteContract from \"../contracts/Vote.json\";\nimport { Form } from \"semantic-ui-react\";\nimport getWeb3 from \"../getWeb3\";\nimport 'semantic-ui-css/semantic.min.css';\n\nconst NewElection = () => {\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState('');\n  const electionTypes = [{\n    key: 'sm',\n    text: 'simple majority',\n    value: 'majority'\n  }, {\n    key: 'tt',\n    text: 'two thirds',\n    value: 'twoThirds'\n  }];\n  var web3Instance;\n  useEffect(() => {\n    async function initWeb3() {\n      web3Instance = await getWeb3();\n      setWeb3(web3Instance);\n    }\n\n    initWeb3();\n  }, []);\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n\n  const changeTitle = event => {\n    setTitle(event.target.value);\n  };\n\n  const {\n    0: startDate,\n    1: setStartDate\n  } = useState(0);\n\n  const changeStartDate = event => {\n    setStartDate(event.target.value);\n  };\n\n  const {\n    0: endDate,\n    1: setEndDate\n  } = useState(0);\n\n  const changeEndDate = event => {\n    setEndDate(event.target.value);\n  };\n\n  const {\n    0: electionType,\n    1: setElectionType\n  } = useState('majority');\n\n  const changeElectionType = event => {\n    setElectionType(event.target.value);\n  };\n\n  const {\n    0: description,\n    1: setDescription\n  } = useState('');\n\n  const changeDescription = event => {\n    setDescription(event.target.value);\n  };\n\n  var onSubmit = async event => {\n    event.preventDefault();\n    var manager;\n    var factoryContract;\n    var voteContract;\n    var addressOfVote; // var web3Instance;\n    // async function initWeb3() {\n    //     web3Instance = await getWeb3();\n    //     setWeb3(web3Instance);\n    // }\n    // initWeb3();\n\n    var setupVoteFactory = async () => {\n      //initializes voteFactory\n      if (web3 == '') {\n        return;\n      }\n\n      try {\n        [manager] = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VoteFactoryContract.networks[networkId];\n        const instance = new web3.eth.Contract(VoteFactoryContract.abi, deployedNetwork && deployedNetwork.address);\n        factoryContract = instance; // Set web3, accounts, and contract to the state, and then proceed with an\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    var createVote = async () => {\n      //uses voteFactory to create Vote\n      if (factoryContract == '') {\n        return;\n      } // Get the value from the contract to prove it worked.\n\n\n      await factoryContract.methods.createVote(0).send({\n        from: manager\n      });\n    };\n\n    var getElectionAddress = async () => {\n      //calls voteFactory method to get new Vote address\n      const response = await factoryContract.methods.getDeployedVotes().call();\n      addressOfVote = response[response.length - 1];\n    };\n\n    var initializeElection = async () => {\n      //initializes vote contract\n      try {\n        // Get the contract instance.\n        const instance = await new web3.eth.Contract(VoteContract.abi, addressOfVote);\n        voteContract = instance;\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    var setUpElection = async () => {\n      //call to vote contract to edit election\n      if (!voteContract) {\n        console.log(\"voteContract dne\");\n        return;\n      }\n\n      await voteContract.methods.editElection(title, new Date(startDate).getTime(), new Date(endDate).getTime(), description, [0]).send({\n        from: manager\n      });\n    };\n\n    var displayVote = async () => {\n      // testing purposes\n      const summary = await voteContract.methods.currentElection().call();\n      console.log(summary);\n    };\n\n    await setupVoteFactory();\n    await createVote();\n    await getElectionAddress();\n    await initializeElection();\n    await setUpElection();\n    await displayVote();\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, \"New Election\"), __jsx(Form, {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    required: true,\n    label: \"Election title\",\n    value: title,\n    onChange: event => setTitle(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    label: \"Start date\",\n    type: \"date\",\n    value: startDate,\n    onChange: event => setStartDate(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Input, {\n    required: true,\n    label: \"End date\",\n    type: \"date\",\n    value: endDate,\n    onChange: event => setEndDate(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Select, {\n    fluid: true,\n    label: \"Type of election\",\n    options: electionTypes,\n    placeholder: \"Type of election\",\n    value: electionType,\n    onChange: event => setElectionType(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }\n  }, __jsx(Form.TextArea, {\n    required: true,\n    label: \"Description\",\n    value: description,\n    onChange: changeDescription,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 21\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }\n  }, __jsx(Form.Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 21\n    }\n  }, \"Cancel\"), __jsx(Form.Button, {\n    type: \"submit\",\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 21\n    }\n  }, \"Publish Election\"))));\n};\n\nexport default NewElection;","map":{"version":3,"sources":["C:/Users/foubroker/PROJECT_VOTE/voting-at-mcgill/client/src/pages/newElection.js"],"names":["React","useState","useEffect","Header","VoteFactoryContract","VoteContract","Form","getWeb3","NewElection","web3","setWeb3","electionTypes","key","text","value","web3Instance","initWeb3","title","setTitle","changeTitle","event","target","startDate","setStartDate","changeStartDate","endDate","setEndDate","changeEndDate","electionType","setElectionType","changeElectionType","description","setDescription","changeDescription","onSubmit","preventDefault","manager","factoryContract","voteContract","addressOfVote","setupVoteFactory","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","console","createVote","methods","send","from","getElectionAddress","response","getDeployedVotes","call","length","initializeElection","setUpElection","log","editElection","Date","getTime","displayVote","summary","currentElection"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Header } from '../components/header';\r\nimport VoteFactoryContract from \"../contracts/VoteFactory.json\";\r\nimport VoteContract from \"../contracts/Vote.json\";\r\nimport { Form } from \"semantic-ui-react\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\n\r\nconst NewElection = () => {\r\n\r\n    const [web3, setWeb3] = useState('');\r\n    const electionTypes = [\r\n        {\r\n            key: 'sm',\r\n            text: 'simple majority',\r\n            value: 'majority'\r\n\r\n        },\r\n        {\r\n            key: 'tt',\r\n            text: 'two thirds',\r\n            value: 'twoThirds'\r\n        }\r\n    ];\r\n\r\n    var web3Instance;\r\n    useEffect(() => {\r\n        async function initWeb3() {\r\n            web3Instance = await getWeb3();\r\n            setWeb3(web3Instance);\r\n        }\r\n        initWeb3();\r\n    },[]);\r\n\r\n\r\n    const [title, setTitle] = useState('');\r\n    const changeTitle = (event) => {\r\n        setTitle(event.target.value);\r\n    };\r\n    const [startDate, setStartDate] = useState(0);\r\n    const changeStartDate = (event) => {\r\n        setStartDate(event.target.value);\r\n    };\r\n    const [endDate, setEndDate] = useState(0);\r\n    const changeEndDate = (event) => {\r\n        setEndDate(event.target.value);\r\n    };\r\n    const [electionType, setElectionType] = useState('majority');\r\n    const changeElectionType = (event) => {\r\n        setElectionType(event.target.value);\r\n    };\r\n    const [description, setDescription] = useState('');\r\n    const changeDescription = (event) => {\r\n        setDescription(event.target.value);\r\n    };\r\n\r\n\r\n    var onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        var manager;\r\n        var factoryContract;\r\n        var voteContract;\r\n        var addressOfVote;\r\n        // var web3Instance;\r\n\r\n        // async function initWeb3() {\r\n        //     web3Instance = await getWeb3();\r\n        //     setWeb3(web3Instance);\r\n        // }\r\n        // initWeb3();\r\n        var setupVoteFactory = async () => { //initializes voteFactory\r\n            if(web3 == '') {\r\n                return;\r\n            }\r\n            try {\r\n                [manager] = (await web3.eth.getAccounts());\r\n                // Get the contract instance.\r\n                const networkId = await web3.eth.net.getId();\r\n                const deployedNetwork = VoteFactoryContract.networks[networkId];\r\n                const instance = new web3.eth.Contract(\r\n                    VoteFactoryContract.abi,\r\n                    deployedNetwork && deployedNetwork.address,\r\n                );\r\n                factoryContract = instance;\r\n\r\n                // Set web3, accounts, and contract to the state, and then proceed with an\r\n            } catch (error) {\r\n                // Catch any errors for any of the above operations.\r\n                alert(\r\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\r\n                );\r\n                console.error(error);\r\n            }\r\n        };\r\n        var createVote = async () => {//uses voteFactory to create Vote\r\n            if(factoryContract == ''){\r\n                return;\r\n            }\r\n            // Get the value from the contract to prove it worked.\r\n            await factoryContract.methods.createVote(0).send({\r\n                from: manager\r\n            });\r\n        };\r\n        var getElectionAddress = async () => {//calls voteFactory method to get new Vote address\r\n            const response = await factoryContract.methods.getDeployedVotes().call();\r\n            addressOfVote = response[response.length - 1];\r\n        };\r\n        var initializeElection = async () => {//initializes vote contract\r\n            try {\r\n                // Get the contract instance.\r\n                const instance = await new web3.eth.Contract(\r\n                    VoteContract.abi,\r\n                    addressOfVote,\r\n                );\r\n                voteContract = instance;\r\n            } catch (error) {\r\n                // Catch any errors for any of the above operations.\r\n                alert(\r\n                    `Failed to load web3, accounts, or contract. Check console for details.`,\r\n                );\r\n                console.error(error);\r\n            }\r\n        };\r\n        var setUpElection = async() => {//call to vote contract to edit election\r\n            if (!voteContract) {\r\n                console.log(\"voteContract dne\");\r\n                return;\r\n            }\r\n            await voteContract.methods\r\n                .editElection(title, new Date(startDate).getTime(), new Date(endDate).getTime(), description, [0])\r\n                .send({\r\n                    from: manager\r\n                })\r\n        };\r\n\r\n        var displayVote = async () => { // testing purposes\r\n            const summary = await voteContract.methods.currentElection().call();\r\n            console.log(summary);\r\n        };\r\n        await setupVoteFactory();\r\n        await createVote();\r\n        await getElectionAddress();\r\n        await initializeElection();\r\n        await setUpElection();\r\n        await displayVote();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <h1>New Election</h1>\r\n            \r\n            <Form onSubmit={onSubmit}>\r\n                <div>\r\n                    <Form.Input required label=\"Election title\"\r\n                                 value={title}\r\n                                 onChange={event => setTitle(event.target.value)}\r\n                    >\r\n\r\n                    </Form.Input>\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <Form.Input label=\"Start date\" type=\"date\"\r\n\r\n                                 value={startDate}\r\n                                 onChange={event => setStartDate(event.target.value)}\r\n                    >\r\n\r\n                    </Form.Input>\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <Form.Input required label=\"End date\" type=\"date\"\r\n\r\n                                 value={endDate}\r\n                                 onChange={event => setEndDate(event.target.value)}\r\n                    />\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <Form.Select\r\n                        fluid\r\n                        label='Type of election'\r\n                        options={electionTypes}\r\n                        placeholder='Type of election'\r\n                        value={electionType}\r\n                        onChange={event => setElectionType(event.target.value)}\r\n                    />\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    {/*<m.TextField label=\"Select groups (someone help with the search and select multiple plz)\" variant=\"outlined\" /> */}\r\n                </div>\r\n                <br></br>\r\n                <div>\r\n                    <Form.TextArea required\r\n                                 label=\"Description\"\r\n\r\n                                 value={description}\r\n                                 onChange={changeDescription}\r\n                    />\r\n                </div>\r\n\r\n                <br></br>\r\n                <div>\r\n                    <Form.Button>Cancel</Form.Button>\r\n                    <Form.Button type=\"submit\" onSubmit={onSubmit}>Publish Election</Form.Button>\r\n                </div>\r\n\r\n\r\n            </Form>\r\n        </>\r\n    )\r\n};\r\nexport default NewElection;\r\n"]},"metadata":{},"sourceType":"module"}